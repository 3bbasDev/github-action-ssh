import { Component, OnInit, Input, Output, EventEmitter, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';
import { Property, Checklist, Level, Kriterien, Category } from 'shared';
import { Observable, of } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { KriteriumComponent } from '../kriterium/kriterium.component';
import { NavigateForward } from '@fivethree/ngxs-ionic-router-plugin';
import { Dispatch } from '@ngxs-labs/dispatch-decorator';

@Component({
  selector: 'app-select-content',
  templateUrl: './select-content.component.html',
  styleUrls: ['./select-content.component.scss']
})
export class SelectContentComponent implements OnInit {

  @Input() property: Property;
  @Input() selectedCat: Category;

  checklists: Observable<Checklist[]>;
  level: Observable<Level[]>;
  kriterien: Observable<Kriterien[]>;

  @Output() select = new EventEmitter<Kriterien[]>();
  @Output() abort = new EventEmitter<void>();

  @ViewChildren(KriteriumComponent) kriterienComponents: QueryList<KriteriumComponent>;

  constructor(private changeDetector: ChangeDetectorRef) { }

  load() {
    console.log('####', this.property);
    this.checklists = of(this.property)
      .pipe(
        filter(property => !!property),
        map(property => property.checklists)
      );
    this.level = this.checklists
      .pipe(
        filter(checklists => !!checklists),
        map(checklists =>
          checklists.map(checklist => checklist.levels).reduce((prev, curr) => prev.concat(curr))
        )
      );

    this.kriterien = this.level
      .pipe(
        map(levels => levels.map(level => level.kriterien).reduce((prev, curr) => prev.concat(curr))),
        map(kritieren => kritieren.sort((c1, c2) => c1.id < c2.id ? -1 : 1))
      );

    this.kriterien.subscribe(kriterien => {
      console.log('got kriterien of selected property', kriterien);
    });
  }

  ngOnInit() {
    this.load();
  }


  onDone() {
    this.changeDetector.detectChanges();
    console.log(this.kriterienComponents);
    const ret = this.kriterienComponents
      .toArray()
      .filter(krit => krit.checked)
      .map(krit => krit.kriterium);
    this.select.emit(ret);
    this.reset();
  }

  addChecklist(checklist: Checklist) {
    // TODO provide checklist or checklist kriteria in startCheck
    this.startCheck(this.property);
  }

  @Dispatch()
  startCheck = (property) => new NavigateForward(['/check'], {
    queryParams: {
      id: property.id
    }
  })

  onAbort() {
    this.reset();
    this.abort.emit();
  }

  reset() {
    this.kriterienComponents
      .forEach((k: KriteriumComponent) => k.checked = false);
  }

  set(kriterien: Kriterien[]) {
    kriterien
      .forEach(kriterium => {
        this.kriterienComponents
          .find(component => component.kriterium.id === kriterium.id).checked = true;
      });

  }



}
