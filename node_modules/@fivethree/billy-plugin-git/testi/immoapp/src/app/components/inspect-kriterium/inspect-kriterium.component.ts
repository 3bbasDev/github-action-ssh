import { PropertiesState } from '@store/properties/properties.state';
import { ContextState } from '@store/context/context.state';
import { Dispatch } from '@ngxs-labs/dispatch-decorator';
import { FivLoadingProgressBar, FivExpandable } from '@fivethree/core';
import { Component, OnInit, Input, ViewChild } from '@angular/core';
import { Kriterien, Inspection, User, GetContextResult, Property, AddInspectionResultPayload, Image } from 'shared';
import { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser';
import { map, tap } from 'rxjs/operators';
import { NotifyHint, NotifyError } from '@store/notify/notify.actions';
import { Store, Select } from '@ngxs/store';
import { CreateInspectionResult } from '@store/inspections/inspections.actions';
import { ImageService } from '@services/image.service';
import { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';
import { ActionSheetController } from '@ionic/angular';
import { Observable, zip } from 'rxjs';
import { AuthState } from '@store/auth/auth.state';
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';
import { FivImageViewer } from '@fivethree/core';


@Component({
  selector: 'app-inspect-kriterium',
  templateUrl: './inspect-kriterium.component.html',
  styleUrls: ['./inspect-kriterium.component.scss']
})
export class InspectKriteriumComponent implements OnInit {

  inspectionForm: FormGroup;

  @Input() kriterium: Kriterien;
  @Input() inspection: Inspection;
  @Input() done = false;
  picto: SafeResourceUrl;
  image: SafeResourceUrl;

  @ViewChild('ex') expandable: FivExpandable;
  @ViewChild(FivImageViewer) imageViewer: FivImageViewer;
  @Select(ContextState.context)
  context: Observable<GetContextResult>;
  @Select(AuthState.user)
  user: Observable<User>;

  property: Observable<Property>;
  users: Observable<User[]>;


  constructor(private store: Store,
    private imageService: ImageService,
    public formBuilder: FormBuilder,
    public actionSheetController: ActionSheetController,
    private camera: Camera,
    private dom: DomSanitizer) {

  }

  ngOnInit() {
    this.setupInspectionForm();
    this.loadImage();
    this.property = this.store.select(PropertiesState.getProperty(this.inspection.propertyId));
    const hausmeister = this.property.pipe(map(p => p.hausmeister || []));
    const mitarbeiter = this.context.pipe(map(p => p.mitarbeiter || []));
    this.users = zip(hausmeister, mitarbeiter)
      .pipe(
        map(data => [...data[0] || [], ...data[1] || []])
      );


  }

  setupInspectionForm() {
    this.inspectionForm = this.formBuilder.group({
      pruefkriteriumId: [this.kriterium.id, Validators.required],
      result: [false, Validators.required],
      description: [''],
      images: [[]],
      assignedUserId: [''],
    }, {
        validator: this.checkInspectionContent
      });
  }

  private checkInspectionContent(group: FormGroup) {
    const result = group.controls.result.value;
    const description = group.controls.description.value;
    const images = group.controls.images.value;
    return result || description.length > 0 || images.length > 0 ? null : { inspectionNotReady: true };
  }

  loadImage() {
    if (this.kriterium.picto) {
      this.imageService.getPictoBase64(this.kriterium.picto.id)
        .pipe(
          map(image => this.dom.bypassSecurityTrustResourceUrl(`data:${image.type};base64,${image.data}`)),
          tap(image => this.picto = image),
        ).subscribe((i) => {
          console.log('loaded image', i);
        }, err => console.log('couldnt load image', err));
    }
  }

  inspect(bar: FivLoadingProgressBar) {
    console.log('form value', this.inspectionForm.value);
    bar.load();
    this.store.dispatch(new CreateInspectionResult(this.inspectionForm.value, this.inspection.id))
      .subscribe(() => bar.complete({}),
        err => {
          this.store.dispatch(
            new NotifyError('Die Inspection konnte nicht angelegt werden konnte. Bitte versuchen Sie es später erneut.', err));
          bar.unload();
        });
  }

  async presentUserSelection(context: GetContextResult, property: Property) {
    const buttons = [];
    context.mitarbeiter
      .forEach(m => {
        buttons.push({
          text: m.firstname + ' ' + m.lastname,
          icon: 'md-contact',
          handler: () => {
            this.assignUser(m);
          }
        });
      });
    (property.hausmeister || [])
      .forEach(user => {
        buttons.push({
          text: user.firstname + ' ' + user.lastname,
          icon: 'md-contact',
          handler: () => {
            this.assignUser(user);
          }
        });
      });
    buttons.push({
      text: 'Abbrechen',
      icon: 'close',
      role: 'cancel'
    });
    const actionSheet = await this.actionSheetController.create({
      header: 'Prüfpunkt zuweisen',
      buttons: buttons
    });

    await actionSheet.present();
  }


  @Dispatch()
  onCameraError = () => new NotifyHint('Es konnte kein Bild aufgenommen werden. Bitte versuchen Sie es später erneut.')

  assignUser(user: User) {
    this.inspectionForm.patchValue({ 'assignedUserId': user.id });
  }

  get assignedUser(): AbstractControl {
    return this.inspectionForm.get('assignedUserId');
  }

  inspectionComplete(event) {

  }

  takePicture() {
    const options: CameraOptions = {
      destinationType: this.camera.DestinationType.DATA_URL,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE,
      allowEdit: false,
      correctOrientation: true
    };

    this.camera.getPicture(options).then((picto) => {
      // picto is either a base64 encoded string or a file URI
      // If it's base64 (DATA_URL):
      this.image = this.dom.bypassSecurityTrustResourceUrl('data:image/jpeg;base64,' + picto);
      const image: Image = {
        data: picto,
        name: `Inspektion_${this.inspection.id}_${this.kriterium.name}`,
        type: 'image/jpeg'
      };
      this.inspectionForm.patchValue({ images: [image] });
    }, (err) => {
      // Handle error
      if (err !== 'No Image Selected') {
        console.log(err);
        this.onCameraError();
      }
    });
  }

  onActionClick(index: number) {
    switch (index) {
      case 0: this.removePicture(); break;
      case 1: this.renewPicture(); break;
    }
  }

  renewPicture() {
    this.imageViewer.componentRef.instance.remove();
    this.takePicture();
  }

  removePicture() {
    this.imageViewer.componentRef.instance.remove();
    this.image = null;
  }



}
