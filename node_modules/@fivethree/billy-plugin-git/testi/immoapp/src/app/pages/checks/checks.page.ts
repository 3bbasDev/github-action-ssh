import { GetClosedInspections } from './../../store/inspections/inspections.actions';
import { Component, OnInit, ViewChild } from '@angular/core';
import { timer, Observable, Subscription, zip } from 'rxjs';
import { FivLoadingContent, FivLoadingProgressBar } from '@fivethree/core';
import { Inspection } from 'shared';
import { Select } from '@ngxs/store';
import { InspectionsState } from '@store/inspections/inspections.state';
import { Dispatch } from '@ngxs-labs/dispatch-decorator';
import { GetInspections } from '@store/inspections/inspections.actions';
import { first, map } from 'rxjs/operators';

@Component({
  selector: 'app-checks',
  templateUrl: './checks.page.html',
  styleUrls: ['./checks.page.scss'],
  animations: [

  ]
})
export class ChecksPage implements OnInit {

  @Select(InspectionsState.inspections)
  inspections: Observable<Inspection[]>;

  @Select(InspectionsState.closedInspections)
  closedInspections: Observable<Inspection[]>;

  animation: any;

  @ViewChild(FivLoadingContent) refresher: FivLoadingContent;
  @ViewChild(FivLoadingProgressBar) bar: FivLoadingProgressBar;
  refreshSub: Subscription;

  constructor() { }

  ngOnInit() {
    this.loadInspections();
    this.loadClosedInspections();
  }

  ionViewDidEnter() {
  }

  ionViewDidLeave() {
    if (this.refreshSub) {
      this.refreshSub.unsubscribe();
    }
  }

  @Dispatch()
  loadInspections = () => new GetInspections()

  @Dispatch()
  loadClosedInspections = () => new GetClosedInspections()

  onRefresh(refresher: FivLoadingContent) {
    this.loadInspections();
    this.loadClosedInspections();
    const t = timer(600);
    zip(t, this.inspections,this.closedInspections)
      .pipe(
        first()
      ).subscribe(() => this.refresher.completeRefresh());
  }
}
