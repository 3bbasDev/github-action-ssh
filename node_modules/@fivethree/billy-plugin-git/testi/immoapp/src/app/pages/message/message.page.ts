import { Message, Inspection, Property } from 'shared';
import { MessagesState } from './../../store/messages/messages.state';
import { ActivatedRoute } from '@angular/router';
import { Component, OnInit } from '@angular/core';
import { Store, Select } from '@ngxs/store';
import { Observable, of } from 'rxjs';
import { Dispatch } from '@ngxs-labs/dispatch-decorator';
import { NavigateBack, NavigateForward } from '@fivethree/ngxs-ionic-router-plugin';
import { tap, flatMap, filter } from 'rxjs/operators';
import { MarkMessageRead } from '@store/messages/messages.actions';
import { InspectionsState } from '@store/inspections/inspections.state';
import { PropertiesState } from '@store/properties/properties.state';
import { inspect } from 'util';
import { GetInspections } from '@store/inspections/inspections.actions';

@Component({
  selector: 'app-message',
  templateUrl: './message.page.html',
  styleUrls: ['./message.page.scss'],
})
export class MessagePage implements OnInit {

  messageId: number;
  notification: Observable<Message>;

  inspection: Observable<Inspection>;
  property: Observable<Property>;

  @Select(InspectionsState.inspections)
  inspections: Observable<Inspection[]>;

  constructor(private route: ActivatedRoute,
    private store: Store) { }

  ngOnInit() {
    this.messageId = +this.route.snapshot.paramMap.get('id');
    this.notification = this.store.select(MessagesState.getMessage(this.messageId));
    this.notification
      .pipe(
        tap(notification => {
          if (notification && !notification.readByUser) {
            this.store.dispatch(new MarkMessageRead(this.messageId));
          }
        }),
        flatMap(() => {
          if (notification => !!notification.targetId && notification.type === 'inspection_created') {
            // reload inspections
            this.loadInspections();
            return this.inspections;
          } 
        })
      )
      .subscribe();

    this.inspection = this.notification
      .pipe(
        filter(notification => !!notification.targetId && notification.type === 'inspection_created'),
        flatMap(notification => this.store.select(InspectionsState.getInspection(+notification.targetId)))
      );

    this.property = this.inspection
      .pipe(
        flatMap(inspection => this.store.select(PropertiesState.getProperty(+inspection.propertyId)))
      );

  }

  @Dispatch()
  onBackClick = () => new NavigateBack()

  @Dispatch()
  inspect = (inspection: Inspection) => new NavigateForward(['/inspect', inspection.id])

  @Dispatch()
  loadInspections = () => new GetInspections()


}
