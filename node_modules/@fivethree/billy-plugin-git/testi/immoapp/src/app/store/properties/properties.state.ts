import { State, Selector, Action, StateContext, createSelector } from '@ngxs/store';
import { PropertiesService } from '@services/properties.service';
import { Property } from 'shared';
import { GetAllProperties } from './properties.actions';
import { tap } from 'rxjs/operators';

export interface PropertiesStateModel {
    properties?: Property[];
}

@State<PropertiesStateModel>({
    name: 'properties',
    defaults: {
        properties: []
    }
})
export class PropertiesState {

    static getProperty(propertyId: number) {
        return createSelector([PropertiesState], (state: PropertiesStateModel) => {
            return state.properties.find(property => property.id === propertyId);
        });
    }

    @Selector()
    static properties(state: PropertiesStateModel) { return state.properties; }

    constructor(private propertiesService: PropertiesService) {

    }

    @Action(GetAllProperties)
    getAllProperties(ctx: StateContext<PropertiesStateModel>) {
        return this.propertiesService.loadAllProperties()
            .pipe(tap(response => ctx.patchState({ properties: response.properties })));
    }
}
