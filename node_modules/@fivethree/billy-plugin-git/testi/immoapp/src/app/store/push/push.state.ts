import { Platform } from '@ionic/angular';
import { State, Action, StateContext, } from '@ngxs/store';
import { PushService } from '@services/push.service';
import {
    RegisterPush,
    UnregisterPush,
    ListenToNotifications,
    ListenToTokenRefresh,
    SavePushToken,
    PushOnLogin,
    PushOnLogout,
    OpenPushContent
} from './push.actions';
import { tap } from 'rxjs/operators';
import { NotifyHint } from '@store/notify/notify.actions';
import { MessageRedirect, GetMessages } from '@store/messages/messages.actions';
import { PushData, PushExtraData } from 'shared';

export interface PushStateModel {
    fcmToken?: string;
}

@State<PushStateModel>({
    name: 'push',
    defaults: {
        fcmToken: ''
    }
})
export class PushState {

    constructor(private pushService: PushService,
        private platform: Platform) {

    }

    get isCordova(): boolean {
        return this.platform.is('cordova');
    }

    @Action(RegisterPush)
    registerPush(ctx: StateContext<PushStateModel>) {
        if (!this.isCordova) { return; }
        return this.pushService.getPushToken()
            .pipe(tap(fcmToken => ctx.dispatch(new SavePushToken(fcmToken))));
    }

    @Action(SavePushToken)
    savePushToken(ctx: StateContext<PushStateModel>, action: SavePushToken) {
        ctx.patchState({ fcmToken: action.payload });
        return this.pushService.registerPushToken({ token: action.payload });
    }

    @Action(UnregisterPush)
    unregisterPush(ctx: StateContext<PushStateModel>) {
        if (!this.isCordova) { return; }
        return this.pushService.unregisterPushToken({ token: ctx.getState().fcmToken });
    }

    /**
     * Events
     */

    @Action(PushOnLogin)
    onPushOnLogin(ctx: StateContext<PushStateModel>) {
        ctx.dispatch([new RegisterPush(), new ListenToNotifications(), new ListenToTokenRefresh()]);
    }

    @Action(PushOnLogout)
    onPushOnLogout(ctx: StateContext<PushStateModel>) {
        ctx.dispatch([new UnregisterPush()]);
    }

    @Action(ListenToNotifications)
    onNotification(ctx: StateContext<PushStateModel>) {
        if (!this.isCordova) { return; }
        return this.pushService.listenToNotifications()
            .pipe(tap((push: PushData) => {
                const pushExtraData: PushExtraData = JSON.parse(push.jsonData);
                if (push.wasTapped) {
                    // background
                    ctx.dispatch(new OpenPushContent(+pushExtraData.messageId));
                } else {
                    // foreground
                    ctx.dispatch([new GetMessages(),
                    new NotifyHint(`Sie haben eine neue Nachricht: ${push.title}`,
                        { closeButtonText: 'Anzeigen', showCloseButton: true, duration: 6000 },
                        new MessageRedirect(+pushExtraData.messageId))]);
                }
            }));
    }

    @Action(OpenPushContent)
    onOpenPushContent(ctx: StateContext<PushStateModel>, action: OpenPushContent) {
        ctx.dispatch([new GetMessages(), new MessageRedirect(+action.payload)]);
    }

    @Action(ListenToTokenRefresh)
    onListenToTokenRefresh(ctx: StateContext<PushStateModel>) {
        if (!this.isCordova) { return; }
        return this.pushService.listenToTokenRefresh()
            .pipe(tap(fcmToken => ctx.dispatch(new SavePushToken(fcmToken))));
    }

}
