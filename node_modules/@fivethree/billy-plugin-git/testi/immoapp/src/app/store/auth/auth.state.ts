import { State, Selector, Action, StateContext, NgxsOnInit, Store, Actions } from '@ngxs/store';
import { User } from 'shared';
import { AuthService } from '@services/auth.service';
import { Logout, LoginRedirect, LoginSuccess, Login, LoadInitialData, TransferLocalData } from './auth.actions';
import { NavigateRoot } from '@fivethree/ngxs-ionic-router-plugin';
import { tap } from 'rxjs/operators';
import { GetInspections } from '@store/inspections/inspections.actions';
import { GetMessages } from '@store/messages/messages.actions';
import { PushOnLogin, PushOnLogout } from '@store/push/push.actions';

export interface AuthStateModel {
    user?: User;
    token?: string;
}

@State<AuthStateModel>({
    name: 'auth',
})
export class AuthState implements NgxsOnInit {

    @Selector()
    static token(state: AuthStateModel) { return state.token; }

    @Selector()
    static user(state: AuthStateModel) { return state.user; }

    constructor(private store: Store,
        private actions: Actions,
        private authService: AuthService) {

    }

    ngxsOnInit(ctx: StateContext<AuthStateModel>, ) {
        if (ctx.getState().token) {
            ctx.dispatch([new LoadInitialData(), new TransferLocalData()]);
        }
    }

    @Action(Login)
    login(ctx: StateContext<AuthStateModel>, action: Login) {
        return this.authService.signIn(action.payload)
            .pipe(
                tap((response) => ctx.patchState({
                    user: response.user,
                    token: response.accessToken
                })));
    }

    @Action(Logout)
    logout(ctx: StateContext<AuthStateModel>) {
        ctx.setState({});
        ctx.dispatch([new LoginRedirect(), new PushOnLogout()]);
    }

    /*
     * Events
     */

    @Action(LoginRedirect)
    onLoginRedirect(ctx: StateContext<AuthStateModel>) {
        ctx.dispatch(new NavigateRoot('/login'));
    }

    @Action(LoginSuccess)
    onLoginSuccess(ctx: StateContext<AuthStateModel>) {
        ctx.dispatch(new NavigateRoot('/'));
        ctx.dispatch([new LoadInitialData(), new TransferLocalData()]);
    }

    @Action(LoadInitialData)
    onLoadInitialData(ctx: StateContext<AuthStateModel>) {
        ctx.dispatch([new GetInspections(), new GetMessages(), new PushOnLogin()]);
    }

    @Action(TransferLocalData)
    onTransferLocalData(ctx: StateContext<AuthStateModel>) {
        // TODO call actions to transfer local data
        // ctx.dispatch([
        // ]);
    }
}
