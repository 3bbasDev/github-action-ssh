package de.fivethree.immoapps.mail.service;

import de.fivethree.immoapps.mail.domain.Mail;
import de.fivethree.immoapps.mail.domain.MailReceiver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Service
public class MailSendService {

    @Autowired
    private JavaMailSender mailSender;

    public void sendMailEntity(Mail mail) throws Exception {
        List<String> receivers = new ArrayList<>();
        List<String> ccReceivers = new ArrayList<>();
        List<String> bccReceivers = new ArrayList<>();

        for (MailReceiver receiver : mail.getReceivers()) {
            receivers.add(receiver.getMailAddress());
        }

        for (MailReceiver ccReceiver : mail.getCcReceivers()) {
            ccReceivers.add(ccReceiver.getMailAddress());
        }

        for (MailReceiver bccReceiver : mail.getBccReceivers()) {
            bccReceivers.add(bccReceiver.getMailAddress());
        }

        if (mail.getHtmlMail() != null && mail.getHtmlMail().equals(true)) {
            sendHTMLMail(mail.getSenderAddress(), receivers, ccReceivers, bccReceivers, mail.getSubject(),
                    mail.getBody());
        } else {
            sendPlainMail(mail.getSenderAddress(), receivers, ccReceivers, bccReceivers, mail.getSubject(),
                    mail.getBody());
        }
    }

    public void sendHTMLMail(final String sender,
                             final String receiver,
                             final String subject,
                             final String htmlMessage) throws MessagingException {
        Collection<String> receivers = new ArrayList<>();
        receivers.add(receiver);
        sendHTMLMail(sender, receivers, null, null, subject, htmlMessage);
    }

    public void sendHTMLMail(final String sender, final Collection<String> receivers,
                             final String subject, final String htmlMessage) throws MessagingException {
        sendHTMLMail(sender, receivers, null, null, subject, htmlMessage);
    }

    public void sendHTMLMail(final String sender, final Collection<String> receivers, final Collection<String> ccReceivers,
                             final String subject, final String htmlMessage) throws MessagingException {
        sendHTMLMail(sender, receivers, ccReceivers, null, subject, htmlMessage);
    }

    public void sendHTMLMail(final String sender, final Collection<String> receivers, final Collection<String> ccReceivers,
                             final Collection<String> bccReceivers,
                             final String subject, final String htmlMessage) throws MessagingException {
        MimeMessage mail = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(mail, true);

        helper.setTo(getCollectionAsArray(receivers));

        if (ccReceivers != null && ccReceivers.size() > 0) {
            helper.setCc(getCollectionAsArray(ccReceivers));
        }

        if (bccReceivers != null && bccReceivers.size() > 0) {
            helper.setBcc(getCollectionAsArray(bccReceivers));
        }

        helper.setFrom(sender);
        helper.setSubject(subject);
        helper.setText(htmlMessage, true);
        mailSender.send(mail);
    }


    public void sendPlainMail(final String sender,
                              final String receiver,
                              final String subject, final String message) {
        Collection<String> receivers = new ArrayList<>();
        receivers.add(receiver);
        sendPlainMail(sender, receivers, null, null, subject, message);
    }

    public void sendPlainMail(final String sender,
                              final Collection<String> receivers,
                              final String subject, final String message) {
        sendPlainMail(sender, receivers, null, null, subject, message);
    }

    public void sendPlainMail(final String sender,
                              final Collection<String> receivers, final Collection<String> ccReceivers,
                              final String subject, final String message) {
        sendPlainMail(sender, receivers, ccReceivers, null, subject, message);
    }

    public void sendPlainMail(final String sender,
                              final Collection<String> receivers, final Collection<String> ccReceivers,
                              final Collection<String> bccReceivers,
                              final String subject, final String message) {
        SimpleMailMessage mail = new SimpleMailMessage();
        mail.setTo(getCollectionAsArray(receivers));

        if (ccReceivers != null && ccReceivers.size() > 0) {
            mail.setCc(getCollectionAsArray(ccReceivers));
        }

        if (bccReceivers != null && bccReceivers.size() > 0) {
            mail.setBcc(getCollectionAsArray(bccReceivers));
        }

        mail.setFrom(sender);
        mail.setSubject(subject);
        mail.setText(message);

        mailSender.send(mail);
    }


    private String[] getCollectionAsArray(Collection<String> collectionToConvert) {
        String[] ret = new String[collectionToConvert.size()];
        return collectionToConvert.toArray(ret);
    }
}
