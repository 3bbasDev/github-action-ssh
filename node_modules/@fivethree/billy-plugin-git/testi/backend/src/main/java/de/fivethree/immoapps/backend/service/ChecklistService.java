package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.checklist.Checklist;
import de.fivethree.immoapps.backend.domain.checklist.ChecklistLevel;
import de.fivethree.immoapps.backend.domain.checklist.ChecklistPruefkriterium;
import de.fivethree.immoapps.backend.domain.checklist.PruefkriteriumCategory;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplate;
import de.fivethree.immoapps.backend.domain.picto.HausverwalterPicto;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.exceptions.EntityNotFoundException;
import de.fivethree.immoapps.backend.exceptions.NotAuthorizedException;
import de.fivethree.immoapps.backend.model.payload.req.checklist.AddLevelToChecklistRequest;
import de.fivethree.immoapps.backend.model.payload.req.checklist.AddPruefkriteriumRequest;
import de.fivethree.immoapps.backend.repository.*;
import de.fivethree.immoapps.backend.repository.checklist.*;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Service
@Transactional
public class ChecklistService {
    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private PropertyRepository propertyRepo;

    @Autowired
    private ChecklistRepository checklistRepo;

    @Autowired
    private ChecklistTemplateRepository checklistTemplateRepo;

    @Autowired
    private ChecklistLevelRepository checklistLevelRepo;

    @Autowired
    private PruefkriteriumCategoryRepository pruefkriteriumCategoryRepo;

    @Autowired
    private ChecklistPruefkriteriumRepository checklistPruefkriteriumRepo;

    @Autowired
    private HausverwalterPictoRepository hausverwalterPictoRepo;

    @Autowired
    private UserRepository userRepo;

    @Autowired
    private PropertyService propertyService;

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Checklist> addChecklists(final List<Long> checklistTemplateIds, final Long propertyId) {
        List<Checklist> ret = new ArrayList<>();

        Long hausverwalterId = securityFacade.getCurrentUser().getId();

        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            User mitarbeiter = userRepo.getOne(securityFacade.getCurrentUser().getId());
            hausverwalterId = mitarbeiter.getVorgesetzter().getId();
        }

        Property property = this.propertyRepo.findByIdAndHausverwalterAndFetchChecklists(propertyId, hausverwalterId);

        if (property == null) {
            throw new EntityNotFoundException(propertyId, "Property");
        }

        for (Long checklistTemplateId : checklistTemplateIds) {
            ChecklistTemplate template = this.checklistTemplateRepo.findByIdAndHausverwalter(checklistTemplateId,
                    hausverwalterId);

            if (template == null) {
                throw new EntityNotFoundException(checklistTemplateId, "ChecklistTemplate");
            }
            ret.add(ModelMapper.mapChecklistTemplateToChecklist(template, property));
        }

        property.getChecklists().addAll(ret);
        property = propertyRepo.save(property);
        return property.getChecklists();
    }


    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Checklist> addChecklist(final Long checklistTemplateId, final Long propertyId) {
        Long hausverwalterId = securityFacade.getCurrentUser().getId();

        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            User mitarbeiter = this.userRepo.getOne(securityFacade.getCurrentUser().getId());
            hausverwalterId = mitarbeiter.getVorgesetzter().getId();
        }

        ChecklistTemplate template = this.checklistTemplateRepo.findByIdAndHausverwalter(checklistTemplateId,
                hausverwalterId);

        Property property = this.propertyRepo.findByIdAndHausverwalterAndFetchChecklists(propertyId, hausverwalterId);

        if (template == null) {
            throw new EntityNotFoundException(checklistTemplateId, "ChecklistTemplate");
        }

        if (property == null) {
            throw new EntityNotFoundException(propertyId, "Property");
        }

        Checklist checklist = ModelMapper.mapChecklistTemplateToChecklist(template, property);
        property.getChecklists().add(checklist);
        property = propertyRepo.save(property);
        return property.getChecklists();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public void deleteChecklist(Long propertyId, Long checklistId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.checklistRepo.findByIdAndProperty(checklistId, property);

        if (checklist == null) {
            throw new EntityNotFoundException(checklistId, "Checklist");
        }

        this.checklistRepo.delete(checklist);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist getChecklist(final Long propertyId, final Long checklistId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.checklistRepo.findByIdAndPropertyAndFetchLevelsAndFetchKriterien(checklistId, property.getId());

        if (checklist == null) {
            throw new EntityNotFoundException(checklistId, "Checklist");
        }

        return checklist;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist updateChecklist(final Long propertyId, final Long checklistId, final String name) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.getChecklistAndFetchLevelsAndKriterien(checklistId, property);
        checklist.setName(name);
        return checklistRepo.save(checklist);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Checklist> getChecklists(final Long propertyId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        return this.checklistRepo.getAllByPropertyAndFetchLevelsAndFetchKriterien(property.getId());
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist addLevelToCheckList(Long propertyId, Long id,
                                         AddLevelToChecklistRequest addLevelToChecklistRequest) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.checklistRepo.findByIdAndPropertyAndFetchLevelsAndFetchKriterien(id, property.getId());

        if (checklist == null) {
            throw new EntityNotFoundException(id, "Checklist");
        }

        if (addLevelToChecklistRequest.getLevelNames().size() > 0) {
            for (String levelName : addLevelToChecklistRequest.getLevelNames()) {
                ChecklistLevel level = new ChecklistLevel(levelName);
                level.setChecklist(checklist);
                checklist.getLevels().add(level);
            }
        } else if (addLevelToChecklistRequest.getName() != null
                && !addLevelToChecklistRequest.getName().isEmpty()) {
            ChecklistLevel level = new ChecklistLevel(addLevelToChecklistRequest.getName());
            level.setChecklist(checklist);
            checklist.getLevels().add(level);
        }

        checklist = checklistRepo.save(checklist);
        return checklist;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist updateChecklistLevel(final Long propertyId, final Long checklistId, final Long levelId,
                                          final String name) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.getChecklistAndFetchLevelsAndKriterien(checklistId, property);

        Optional<ChecklistLevel> levelOpt = checklistLevelRepo.findById(levelId);

        if (!levelOpt.isPresent()) {
            throw new EntityNotFoundException(levelId, "Ebene");
        }

        ChecklistLevel level = levelOpt.get();
        ChecklistLevel levelToChange = null;

        for (ChecklistLevel checklistLevel : checklist.getLevels()) {
            if (checklistLevel.getId().equals(level.getId())) {
                levelToChange = checklistLevel;
                break;
            }
        }

        if (levelToChange == null) {
            throw new NotAuthorizedException("Ebene mit der Id: " + levelId + " konnte nicht in der Checklist mit der Id: "
                    + checklistId + " gefunden werden");
        }

        levelToChange.setName(name);
        return checklistRepo.save(checklist);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist updateChecklistPruefkriterium(final Long propertyId, final Long checklistId, final Long levelId,
                                                   final Long kriteriumId, final String name) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.getChecklistAndFetchLevelsAndKriterien(checklistId, property);

        Optional<ChecklistPruefkriterium> kriteriumOpt = checklistPruefkriteriumRepo.findById(kriteriumId);

        if (!kriteriumOpt.isPresent()) {
            throw new EntityNotFoundException(levelId, "Kriterium");
        }

        ChecklistPruefkriterium kriterium = kriteriumOpt.get();
        ChecklistPruefkriterium kriteriumToChange = null;

        for (ChecklistLevel checklistLevel : checklist.getLevels()) {
            for (ChecklistPruefkriterium checklistPruefkriterium : checklistLevel.getPruefkriterien()) {
                if (checklistPruefkriterium.getId().equals(kriterium.getId())) {
                    kriteriumToChange = checklistPruefkriterium;
                    break;
                }
            }
        }

        if (kriteriumToChange == null) {
            throw new NotAuthorizedException("Ebene mit der Id: " + levelId + " konnte nicht in der Checklist mit der Id: "
                    + checklistId + " gefunden werden");
        }

        kriteriumToChange.setName(name);
        return checklistRepo.save(checklist);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist removeLevelFromChecklist(Long propertyId, Long id, Long levelId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.checklistRepo.findByIdAndPropertyAndFetchLevelsAndFetchKriterien(id,
                property.getId());

        if (checklist == null) {
            throw new EntityNotFoundException(id, "Checklist");
        }
        Optional<ChecklistLevel> level = checklistLevelRepo.findById(levelId);

        if (!level.isPresent()) {
            throw new EntityNotFoundException(levelId, "Ebene");
        }

        checklist.getLevels().remove(level.get());
        return checklistRepo.save(checklist);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist addKriterium(Long propertyId, Long id, Long levelId, AddPruefkriteriumRequest addPruefkriteriumRequest) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.checklistRepo.findByIdAndPropertyAndFetchLevelsAndFetchKriterien(id, property.getId());

        if (checklist == null) {
            throw new EntityNotFoundException(id, "Checklist");
        }

        Optional<ChecklistLevel> level = checklistLevelRepo.findById(levelId);

        if (!level.isPresent()) {
            throw new EntityNotFoundException(levelId, "Ebene");
        }

        Optional<PruefkriteriumCategory> category = pruefkriteriumCategoryRepo.findById(addPruefkriteriumRequest.getCategoryId());

        if (!category.isPresent()) {
            throw new EntityNotFoundException(addPruefkriteriumRequest.getCategoryId(), "Kategorie");
        }


        ChecklistPruefkriterium kriterium;

        if (addPruefkriteriumRequest.getPictoId() == null) {
            kriterium = new ChecklistPruefkriterium(addPruefkriteriumRequest.getName(),
                    category.get());
        } else {
            Long hausverwalterId = securityFacade.getCurrentUser().getId();

            if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
                User mitarbeiter = userRepo.getOne(securityFacade.getCurrentUser().getId());
                hausverwalterId = mitarbeiter.getVorgesetzter().getId();
            }

            HausverwalterPicto picto = hausverwalterPictoRepo.findByIdAndHausverwalterId(addPruefkriteriumRequest.getPictoId(),
                    hausverwalterId);

            kriterium = new ChecklistPruefkriterium(addPruefkriteriumRequest.getName(),
                    category.get(), picto);
        }

        kriterium.setLevel(level.get());

        checklist.getLevels().remove(level.get());
        level.get().getPruefkriterien().add(kriterium);

        checklist.getLevels().add(level.get());

        return this.checklistRepo.save(checklist);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistPruefkriterium addPicto(Long propertyId, Long id, Long levelId, Long kriterienId, Long pictoId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Map.Entry<ChecklistPruefkriterium, HausverwalterPicto> tuple = getPictoWithAllSecurityChecks(id, property, kriterienId, pictoId);

        ChecklistPruefkriterium kriterium = tuple.getKey();
        kriterium.setPicto(tuple.getValue());
        return this.checklistPruefkriteriumRepo.save(kriterium);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistPruefkriterium removePicto(Long propertyId, Long id, Long levelId, Long kriterienId, Long pictoId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Map.Entry<ChecklistPruefkriterium, HausverwalterPicto> tuple = getPictoWithAllSecurityChecks(id, property, kriterienId, pictoId);

        ChecklistPruefkriterium kriterium = tuple.getKey();
        kriterium.setPicto(null);
        return this.checklistPruefkriteriumRepo.save(kriterium);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Checklist removeKriterium(Long propertyId, Long id, Long levelId, Long kriterienId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        Checklist checklist = this.checklistRepo.findByIdAndPropertyAndFetchLevelsAndFetchKriterien(id,
                property.getId());

        if (checklist == null) {
            throw new EntityNotFoundException(id, "Checklist");
        }

        Optional<ChecklistLevel> level = checklistLevelRepo.findById(levelId);

        if (!level.isPresent()) {
            throw new EntityNotFoundException(levelId, "Ebene");
        }

        Optional<ChecklistPruefkriterium> kriterium = checklistPruefkriteriumRepo.findById(kriterienId);

        if (!kriterium.isPresent()) {
            throw new EntityNotFoundException(kriterienId, "Kriterium");
        }

        checklist.getLevels().remove(level.get());
        level.get().getPruefkriterien().remove(kriterium.get());
        checklist.getLevels().add(level.get());

        return checklistRepo.save(checklist);
    }

    private Checklist getChecklistAndFetchLevelsAndKriterien(Long id, Property property) {
        Checklist checklist = this.checklistRepo.findByIdAndPropertyAndFetchLevelsAndFetchKriterien(id, property.getId());

        if (checklist == null) {
            throw new EntityNotFoundException(id, "Checklist");
        }

        return checklist;
    }


    private Map.Entry<ChecklistPruefkriterium, HausverwalterPicto> getPictoWithAllSecurityChecks(Long id, Property property, Long kriterienId,
                                                                                                 Long pictoId) {
        Checklist checklist = this.checklistRepo.findByIdAndPropertyAndFetchLevelsAndFetchKriterien(id, property.getId());

        Optional<ChecklistPruefkriterium> kriteriumCheck = checklistPruefkriteriumRepo.findById(kriterienId);

        if (!kriteriumCheck.isPresent()) {
            throw new EntityNotFoundException(kriterienId, "Kriterium");
        }

        if (!checkKriteriumPriviliges(checklist, kriteriumCheck.get())) {
            throw new NotAuthorizedException("Ihnen fehlt die Berechtigung, um diese Aktion durchzuführen");
        }

        Long hausverwalterId = securityFacade.getCurrentUser().getId();

        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            User mitarbeiter = userRepo.getOne(securityFacade.getCurrentUser().getId());
            hausverwalterId = mitarbeiter.getVorgesetzter().getId();
        }

        HausverwalterPicto picto = hausverwalterPictoRepo.findByIdAndHausverwalterId(pictoId, hausverwalterId);

        if (picto == null) {
            throw new EntityNotFoundException(pictoId, "Piktogramm");
        }

        return new HashMap.SimpleEntry<>(kriteriumCheck.get(), picto);
    }

    /**
     * checks if the kriterium is inside the checklist so that we can figure that the hausverwalter is allowed
     * to do stuff with it.
     *
     * @param checklist        checklist which shall contain the kriterium.
     * @param kriteriumToCheck kriterium to check.
     * @return true in case the kriterium is inside the checklist otherwise false.
     */
    private boolean checkKriteriumPriviliges(Checklist checklist,
                                             ChecklistPruefkriterium kriteriumToCheck) {
        for (ChecklistLevel templateLevel : checklist.getLevels()) {
            if (templateLevel.getPruefkriterien().contains(kriteriumToCheck)) {
                return true;
            }
        }

        return false;
    }
}
