package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.adminchecklist.AdminChecklistTemplate;
import de.fivethree.immoapps.backend.domain.checklist.PruefkriteriumCategory;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplate;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplateLevel;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplatePruefkriterium;
import de.fivethree.immoapps.backend.domain.picto.HausverwalterPicto;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.exceptions.DataIntegrityException;
import de.fivethree.immoapps.backend.exceptions.EntityNotFoundException;
import de.fivethree.immoapps.backend.model.payload.req.checklist.*;
import de.fivethree.immoapps.backend.repository.*;
import de.fivethree.immoapps.backend.repository.checklist.*;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.Set;

@Service
@Transactional
public class ChecklistTemplateService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ChecklistTemplateRepository checklistTemplateRepo;

    @Autowired
    private ChecklistTemplateLevelRepository checklistTemplateLevelRepo;

    @Autowired
    private PruefkriteriumCategoryRepository pruefkriteriumCategoryRepo;

    @Autowired
    private ChecklistTemplatePruefkriteriumRepository checklistTemplatePruefkriteriumRepository;

    @Autowired
    private HausverwalterPictoRepository hausverwalterPictoRepo;

    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private AdminChecklistTemplateService adminChecklistTemplateService;

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<ChecklistTemplate> getAll() {
        return checklistTemplateRepo.getAllByHausverwalterAndFetchLevelsAndFetchKriterien(getHausverwalterId());
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate getById(Long id) {
        ChecklistTemplate checklistTemplate = checklistTemplateRepo
                .findByIdAndHausverwalterAndFetchLevelsAndFetchKriterien(id, getHausverwalterId());

        if (checklistTemplate == null) {
            throw new EntityNotFoundException(id, "ChecklistTemplate");
        }

        return checklistTemplate;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate addTemplate(CreateChecklistTemplateRequest createChecklistTemplateRequest) {
        User hausverwalter = userRepository.getOne(getHausverwalterId());

        ChecklistTemplate checklistTemplate = new ChecklistTemplate(createChecklistTemplateRequest.getName(),
                createChecklistTemplateRequest.getDefaultChecklist());
        checklistTemplate.setHausverwalter(hausverwalter);

        for (String level : createChecklistTemplateRequest.getLevels()) {
            ChecklistTemplateLevel checklistLevel = new ChecklistTemplateLevel(level);
            checklistLevel.setChecklistTemplate(checklistTemplate);
            checklistTemplate.getLevels().add(checklistLevel);
        }

        return this.checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate addTemplateFromAdminTemplate(Long adminChecklistId) {
        AdminChecklistTemplate adminChecklistTemplate = adminChecklistTemplateService.getById(adminChecklistId);
        User hausverwalter = userRepository.getOne(getHausverwalterId());

        ChecklistTemplate checklistTemplate = ModelMapper.mapAdminChecklistTemplateToChecklistTemplate(
                adminChecklistTemplate, hausverwalter);

        checklistTemplate = checklistTemplateRepo.save(checklistTemplate);
        hausverwalter.getChecklistTemplates().add(checklistTemplate);
        userRepository.save(hausverwalter);

        return checklistTemplate;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate updateTemplate(Long id, UpdateChecklistReq updateChecklistReq) {
        ChecklistTemplate checklistTemplate = getById(id);
        checklistTemplate.setName(updateChecklistReq.getName());

        if (updateChecklistReq.getDefaultChecklist() != null) {
            checklistTemplate.setDefaultChecklist(updateChecklistReq.getDefaultChecklist());
        }

        return this.checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate addLevel(Long id, AddLevelToChecklistRequest addLevelToChecklistRequest) {
        ChecklistTemplate checklistTemplate = getById(id);

        //in case the caller passed a lists of level we use this lists
        if (addLevelToChecklistRequest.getLevelNames().size() > 0) {
            for (String levelName : addLevelToChecklistRequest.getLevelNames()) {
                ChecklistTemplateLevel level = new ChecklistTemplateLevel(levelName);
                level.setChecklistTemplate(checklistTemplate);
                checklistTemplate.getLevels().add(level);
            }
        } else if (addLevelToChecklistRequest.getName() != null
                && !addLevelToChecklistRequest.getName().isEmpty()) {
            ChecklistTemplateLevel level = new ChecklistTemplateLevel(addLevelToChecklistRequest.getName());
            level.setChecklistTemplate(checklistTemplate);
            checklistTemplate.getLevels().add(level);
        }

        return this.checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate updateLevel(Long id, Long levelId, UpdateChecklistLevelReq updateChecklistLevelReq) {
        ChecklistTemplate checklistTemplate = getById(id);
        ChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);

        ChecklistTemplateLevel levelToChange = null;

        for (ChecklistTemplateLevel checklistTemplateLevel : checklistTemplate.getLevels()) {
            if (checklistTemplateLevel.getId().equals(level.getId())) {
                levelToChange = checklistTemplateLevel;
            }
        }

        if (levelToChange == null) {
            throw new DataIntegrityException("Das Level mit der id: " + levelId + " konnte nicht im Template " +
                    "mit der id: " + id + " gefunden werden.");
        }

        levelToChange.setName(updateChecklistLevelReq.getName());

        return this.checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate addPruefkriterium(Long id, Long levelId, AddPruefkriteriumRequest addPruefkriteriumRequest) {
        ChecklistTemplate checklistTemplate = getById(id);
        ChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        PruefkriteriumCategory category = getCategoryById(addPruefkriteriumRequest.getCategoryId());

        ChecklistTemplatePruefkriterium kriterium;

        if (addPruefkriteriumRequest.getPictoId() == null) {
            kriterium = new ChecklistTemplatePruefkriterium(addPruefkriteriumRequest.getName(), category);
        } else {
            HausverwalterPicto picto = hausverwalterPictoRepo.findByIdAndHausverwalterId(addPruefkriteriumRequest.getPictoId(),
                    getHausverwalterId());
            kriterium = new ChecklistTemplatePruefkriterium(addPruefkriteriumRequest.getName(),
                    category, picto);
        }

        kriterium.setLevel(level);

        checklistTemplate.getLevels().remove(level);
        level.getPruefkriterien().add(kriterium);

        checklistTemplate.getLevels().add(level);

        return this.checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate updatePruefkriterium(Long id, Long levelId, Long kriterienId,
                                                  UpdateChecklistPruefkriteriumReq updateChecklistPruefkriteriumReq) {
        ChecklistTemplate checklistTemplate = getById(id);
        ChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        ChecklistTemplatePruefkriterium kriterium = getKriteriumByIdAndLevel(kriterienId, level);

        ChecklistTemplatePruefkriterium kriteriumToChange = null;

        for (ChecklistTemplateLevel checklistTemplateLevel : checklistTemplate.getLevels()) {
            for (ChecklistTemplatePruefkriterium checklistTemplatePruefkriterium : checklistTemplateLevel.getPruefkriterien()) {
                if (checklistTemplatePruefkriterium.getId().equals(kriterium.getId())) {
                    kriteriumToChange = checklistTemplatePruefkriterium;
                    break;
                }
            }
        }

        if (kriteriumToChange == null) {
            throw new DataIntegrityException("Das Kriterium mit der id: " + kriterienId + " konnte nicht im Template " +
                    "mit der id: " + id + " gefunden werden.");
        }

        kriteriumToChange.setName(updateChecklistPruefkriteriumReq.getName());

        return this.checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate deletePruefkriterium(Long id, Long levelId, Long kriterienId) {
        ChecklistTemplate checklistTemplate = getById(id);
        ChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        ChecklistTemplatePruefkriterium kriterium = getKriteriumByIdAndLevel(kriterienId, level);

        checklistTemplate.getLevels().remove(level);
        level.getPruefkriterien().remove(kriterium);
        checklistTemplate.getLevels().add(level);

        return checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public void delete(Long id) {
        ChecklistTemplate checklistTemplate = getById(id);
        checklistTemplateRepo.delete(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplate deleteLevel(Long id, Long levelId) {
        ChecklistTemplate checklistTemplate = getById(id);
        ChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        checklistTemplate.getLevels().remove(level);
        return checklistTemplateRepo.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplatePruefkriterium addPicto(Long id, Long levelId, Long kriterienId,
                                                    AddPictoRequest addPictoRequest) {
        ChecklistTemplate checklistTemplate = getById(id);
        ChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        ChecklistTemplatePruefkriterium kriterium = getKriteriumByIdAndLevel(kriterienId, level);
        HausverwalterPicto picto = getPictoById(addPictoRequest.getPictoId());
        kriterium.setPicto(picto);
        return this.checklistTemplatePruefkriteriumRepository.save(kriterium);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ChecklistTemplatePruefkriterium removePicto(Long id, Long levelId, Long kriterienId, Long pictoId) {
        ChecklistTemplate checklistTemplate = getById(id);
        ChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        ChecklistTemplatePruefkriterium kriterium = getKriteriumByIdAndLevel(kriterienId, level);
        HausverwalterPicto picto = getPictoById(pictoId);
        kriterium.setPicto(null);
        return this.checklistTemplatePruefkriteriumRepository.save(kriterium);
    }


    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private Long getHausverwalterId() {
        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            User mitarbeiter = userRepository.getOne(securityFacade.getCurrentUser().getId());
            return mitarbeiter.getVorgesetzter().getId();
        }

        return securityFacade.getCurrentUser().getId();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private ChecklistTemplateLevel getLevelByIdAndChecklistTemplate(Long id, ChecklistTemplate checklistTemplate) {
        ChecklistTemplateLevel level = checklistTemplateLevelRepo.findByIdAndChecklistTemplate(id, checklistTemplate);

        if (level == null) {
            throw new EntityNotFoundException(id, "ChecklistTemplateLevel");
        }

        return level;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private ChecklistTemplatePruefkriterium getKriteriumByIdAndLevel(Long kriterienId, ChecklistTemplateLevel level) {
        ChecklistTemplatePruefkriterium ret = checklistTemplatePruefkriteriumRepository.
                findByIdAndLevel(kriterienId, level);

        if (ret == null) {
            throw new EntityNotFoundException(kriterienId, "ChecklistTemplatePruefkriterium");
        }

        return ret;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private HausverwalterPicto getPictoById(Long id) {
        HausverwalterPicto picto = hausverwalterPictoRepo.findByIdAndHausverwalterId(id, getHausverwalterId());

        if (picto == null) {
            throw new EntityNotFoundException(id, "HausverwalterPicto");
        }

        return picto;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private PruefkriteriumCategory getCategoryById(Long id) {
        Optional<PruefkriteriumCategory> category = pruefkriteriumCategoryRepo.findById(id);

        if (!category.isPresent()) {
            throw new EntityNotFoundException(id, "AdminChecklistTemplateLevel");
        }

        return category.get();
    }


}
