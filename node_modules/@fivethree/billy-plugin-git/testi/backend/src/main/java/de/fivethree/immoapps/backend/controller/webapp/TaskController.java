package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.domain.task.Task;
import de.fivethree.immoapps.backend.model.payload.req.task.CreateTaskRequest;
import de.fivethree.immoapps.backend.model.payload.req.task.UpdateTaskRequest;
import de.fivethree.immoapps.backend.model.payload.res.task.GetTasksRes;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.service.TaskService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@RestController
@RequestMapping("/immoapps/api/properties/{propertyId}/tasks")
public class TaskController {
    @Autowired
    private TaskService taskService;

    @Autowired
    private SecurityFacade securityFacade;

    @GetMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getTasks(@PathVariable Long propertyId) {
        List<Task> tasks = this.taskService.getTasksOfProperty(propertyId);
        return ResponseEntity.ok(new GetTasksRes(ModelMapper.mapTasks(tasks, securityFacade)));
    }

    @PostMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> createNewTask(@PathVariable Long propertyId,
                                           @RequestBody @Valid @NotNull CreateTaskRequest createTaskRequest) {
        Task task = this.taskService.createTaskForProperty(propertyId, createTaskRequest);
        return ResponseEntity.ok(ModelMapper.mapTask(task, securityFacade));
    }

    @PostMapping("/{taskId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> updateTask(@PathVariable Long propertyId, @PathVariable Long taskId,
                                                  @RequestBody @Valid @NotNull UpdateTaskRequest updateTaskRequest) {
        Task task = this.taskService.updateTaskForProperty(propertyId, taskId, updateTaskRequest);
        return ResponseEntity.ok(ModelMapper.mapTask(task, securityFacade));
    }

    @CrossOrigin
    @DeleteMapping("/{taskId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteTask(@PathVariable Long propertyId, @PathVariable Long taskId) {
        this.taskService.deleteTask(propertyId, taskId);
        return ResponseEntity.ok().build();
    }
}
