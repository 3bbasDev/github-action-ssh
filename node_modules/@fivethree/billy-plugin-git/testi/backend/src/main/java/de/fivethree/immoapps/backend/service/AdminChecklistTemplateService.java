package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.adminchecklist.AdminChecklistTemplate;
import de.fivethree.immoapps.backend.domain.adminchecklist.AdminChecklistTemplateLevel;
import de.fivethree.immoapps.backend.domain.adminchecklist.AdminChecklistTemplatePruefkriterium;
import de.fivethree.immoapps.backend.domain.checklist.PruefkriteriumCategory;
import de.fivethree.immoapps.backend.domain.picto.AdminPicto;
import de.fivethree.immoapps.backend.exceptions.DataIntegrityException;
import de.fivethree.immoapps.backend.exceptions.EntityNotFoundException;
import de.fivethree.immoapps.backend.model.payload.req.checklist.*;
import de.fivethree.immoapps.backend.repository.checklist.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.Set;

@Service
@Transactional
public class AdminChecklistTemplateService {
    @Autowired
    private AdminChecklistTemplateRepository adminChecklistTemplateRepository;

    @Autowired
    private AdminChecklistLevelRepository adminChecklistLevelRepo;

    @Autowired
    private PruefkriteriumCategoryRepository pruefkriteriumCategoryRepo;

    @Autowired
    private AdminChecklistPruefkriteriumRepository adminChecklistPruefkriteriumRepo;

    @Autowired
    private AdminPictoRepository adminPictoRepo;


    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<AdminChecklistTemplate> getAll() {
        return adminChecklistTemplateRepository.getAllAndFetchAndLevelsAndFetchKriterien();
    }

    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public AdminChecklistTemplate getById(Long id) {
        AdminChecklistTemplate checklistTemplate = adminChecklistTemplateRepository
                .findByIdAndFetchLevelsAndFetchKriterien(id);

        if (checklistTemplate == null) {
            throw new EntityNotFoundException(id, "AdminChecklistTemplate");
        }

        return checklistTemplate;
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate addTemplate(CreateAdminChecklistTemplateRequest createAdminChecklistTemplateReq) {
        AdminChecklistTemplate adminChecklistTemplate = new AdminChecklistTemplate(
                createAdminChecklistTemplateReq.getName(), createAdminChecklistTemplateReq.getDefaultChecklist());

        for (String level : createAdminChecklistTemplateReq.getLevels()) {
            AdminChecklistTemplateLevel checklistLevel = new AdminChecklistTemplateLevel(level);
            checklistLevel.setAdminchecklisttemplate(adminChecklistTemplate);
            adminChecklistTemplate.getLevels().add(checklistLevel);
        }

        return this.adminChecklistTemplateRepository.save(adminChecklistTemplate);
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate updateTemplate(Long id, UpdateChecklistReq updateAdminChecklistTemplateReq) {
        AdminChecklistTemplate template = getById(id);
        template.setName(updateAdminChecklistTemplateReq.getName());

        if (updateAdminChecklistTemplateReq.getDefaultChecklist() != null) {
            template.setDefaultChecklist(updateAdminChecklistTemplateReq.getDefaultChecklist());
        }

        this.adminChecklistTemplateRepository.save(template);

        return template;
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate addLevelToTemplate(Long id, AddLevelToChecklistRequest addLevelToChecklistRequest) {
        AdminChecklistTemplate checklistTemplate = getById(id);

        //in case the caller passed a lists of level we use this lists
        if (addLevelToChecklistRequest.getLevelNames().size() > 0) {
            for (String levelName : addLevelToChecklistRequest.getLevelNames()) {
                AdminChecklistTemplateLevel level = new AdminChecklistTemplateLevel(levelName);
                level.setAdminchecklisttemplate(checklistTemplate);
                checklistTemplate.getLevels().add(level);
            }
        } else if (addLevelToChecklistRequest.getName() != null
                && !addLevelToChecklistRequest.getName().isEmpty()) {
            AdminChecklistTemplateLevel level = new AdminChecklistTemplateLevel(addLevelToChecklistRequest.getName());
            level.setAdminchecklisttemplate(checklistTemplate);
            checklistTemplate.getLevels().add(level);
        }

        this.adminChecklistTemplateRepository.save(checklistTemplate);
        return checklistTemplate;
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate updateTemplateLevel(Long id, Long levelId, UpdateChecklistLevelReq updateChecklistReq) {
        AdminChecklistTemplate template = getById(id);
        AdminChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, template);

        AdminChecklistTemplateLevel levelToChange = null;

        for (AdminChecklistTemplateLevel templateLevel : template.getLevels()) {
            if (templateLevel.getId().equals(level.getId())) {
                levelToChange = templateLevel;
                break;
            }
        }

        if (levelToChange == null) {
            throw new DataIntegrityException("Das Level mit der id: " + levelId + " konnte nicht im Admintemplate mit " +
                    "der id: " + id + " gefunden werden.");
        }

        levelToChange.setName(updateChecklistReq.getName());
        this.adminChecklistTemplateRepository.save(template);
        return template;
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate deleteTemplateLevel(Long id, Long levelId) {
        AdminChecklistTemplate checklistTemplate = getById(id);
        AdminChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        checklistTemplate.getLevels().remove(level);
        return adminChecklistTemplateRepository.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate addPruefKriteriumToLevel(Long id, Long levelId,
                                                           AddPruefkriteriumRequest addPruefkriteriumRequest) {
        AdminChecklistTemplate checklistTemplate = getById(id);
        AdminChecklistTemplateLevel level = this.getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        PruefkriteriumCategory category = this.getCategoryById(addPruefkriteriumRequest.getCategoryId());

        AdminChecklistTemplatePruefkriterium kriterium;

        //add picto when existing
        if (addPruefkriteriumRequest.getPictoId() == null) {
            kriterium = new AdminChecklistTemplatePruefkriterium(addPruefkriteriumRequest.getName(),
                    category);
        } else {
            Optional<AdminPicto> picto = adminPictoRepo.findById(addPruefkriteriumRequest.getPictoId());

            if (picto.isPresent()) {
                kriterium = new AdminChecklistTemplatePruefkriterium(addPruefkriteriumRequest.getName(),
                        category, picto.get());
            } else {
                kriterium = new AdminChecklistTemplatePruefkriterium(addPruefkriteriumRequest.getName(),
                        category);
            }
        }

        kriterium.setLevel(level);

        checklistTemplate.getLevels().remove(level);
        level.getPruefkriterien().add(kriterium);

        checklistTemplate.getLevels().add(level);

        return this.adminChecklistTemplateRepository.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate updatePruefkriterium(Long id, Long levelId, Long kriterienId,
                                                       UpdateChecklistPruefkriteriumReq updateChecklistPruefkriterium) {
        AdminChecklistTemplate template = getById(id);
        AdminChecklistTemplatePruefkriterium kriterium = getPruefkriteriumByIdAndLevelIdAndChecklistTemplate(kriterienId,
                levelId, template);

        AdminChecklistTemplatePruefkriterium kriteriumToChange = null;

        for (AdminChecklistTemplateLevel level : template.getLevels()) {
            for (AdminChecklistTemplatePruefkriterium adminChecklistTemplatePruefkriterium : level.getPruefkriterien()) {
                if (adminChecklistTemplatePruefkriterium.getId().equals(kriterium.getId())) {
                    kriteriumToChange = adminChecklistTemplatePruefkriterium;
                    break;
                }
            }
        }

        if (kriteriumToChange == null) {
            throw new DataIntegrityException("Das Kriterium mit der id: " + kriterienId + " konnte nicht im Template mit " +
                    "der id: " + id + " gefunden werden.");
        }

        kriteriumToChange.setName(updateChecklistPruefkriterium.getName());

        this.adminChecklistTemplateRepository.save(template);
        return template;
    }

    @PreAuthorize("hasRole('ADMIN')")
    public void delete(Long id) {
        AdminChecklistTemplate template = getById(id);
        this.adminChecklistTemplateRepository.delete(template);
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplate deleteKriterium(Long id, Long levelId, Long kriterienId) {
        AdminChecklistTemplate checklistTemplate = getById(id);
        AdminChecklistTemplateLevel level = getLevelByIdAndChecklistTemplate(levelId, checklistTemplate);
        AdminChecklistTemplatePruefkriterium kriterium = getPruefkriteriumByIdAndLevel(kriterienId, level);

        checklistTemplate.getLevels().remove(level);
        level.getPruefkriterien().remove(kriterium);
        checklistTemplate.getLevels().add(level);

        return adminChecklistTemplateRepository.save(checklistTemplate);
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplatePruefkriterium addPicto(Long id, Long levelId, Long kriterienId,
                                                         AddPictoRequest addPictoRequest) {
        AdminChecklistTemplate checklistTemplate = getById(id);
        AdminChecklistTemplatePruefkriterium kriterium = getPruefkriteriumByIdAndLevelIdAndChecklistTemplate(kriterienId,
                levelId, checklistTemplate);
        AdminPicto picto = getPictoById(addPictoRequest.getPictoId());

        kriterium.setPicto(picto);

        return adminChecklistPruefkriteriumRepo.save(kriterium);
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminChecklistTemplatePruefkriterium removePicto(Long id, Long levelId, Long kriterienId, Long pictoId) {
        AdminChecklistTemplate checklistTemplate = getById(id);
        AdminChecklistTemplatePruefkriterium kriterium = getPruefkriteriumByIdAndLevelIdAndChecklistTemplate(kriterienId,
                levelId, checklistTemplate);
        // just to check if the id is right though.
        AdminPicto picto = getPictoById(pictoId);
        kriterium.setPicto(null);
        return this.adminChecklistPruefkriteriumRepo.save(kriterium);
    }

    private AdminChecklistTemplateLevel getLevelByIdAndChecklistTemplate(Long id,
                                                                         AdminChecklistTemplate adminChecklistTemplate) {
        AdminChecklistTemplateLevel ret = this.adminChecklistLevelRepo.findByIdAndAdminchecklisttemplate(id,
                adminChecklistTemplate);

        if (ret == null) {
            throw new EntityNotFoundException(id, "AdminChecklistTemplateLevel");
        }

        return ret;
    }

    private AdminChecklistTemplatePruefkriterium getPruefkriteriumByIdAndLevelIdAndChecklistTemplate(Long id, Long levelId,
                                                                                                     AdminChecklistTemplate adminChecklistTemplate){
        AdminChecklistTemplatePruefkriterium pruefkriterium = adminChecklistPruefkriteriumRepo
                .findByIdAndLevel(id, getLevelByIdAndChecklistTemplate(levelId, adminChecklistTemplate));

        if (pruefkriterium == null) {
            throw new EntityNotFoundException(id, "AdminChecklistTemplatePruefkriterium");
        }

        return pruefkriterium;
    }

    private AdminChecklistTemplatePruefkriterium getPruefkriteriumByIdAndLevel(Long id,
                                                                               AdminChecklistTemplateLevel level) {
        AdminChecklistTemplatePruefkriterium pruefkriterium = adminChecklistPruefkriteriumRepo
                .findByIdAndLevel(id, level);

        if (pruefkriterium == null) {
            throw new EntityNotFoundException(id, "AdminChecklistTemplatePruefkriterium");
        }

        return pruefkriterium;
    }

    private PruefkriteriumCategory getCategoryById(Long id) {
        Optional<PruefkriteriumCategory> category = pruefkriteriumCategoryRepo.findById(id);

        if (!category.isPresent()) {
            throw new EntityNotFoundException(id, "AdminChecklistTemplateLevel");
        }

        return category.get();
    }

    private AdminPicto getPictoById(Long id) {
        Optional<AdminPicto> picto = adminPictoRepo.findById(id);

        if (!picto.isPresent()) {
            throw new EntityNotFoundException(id, "AdminPicto");
        }

        return picto.get();
    }
}
