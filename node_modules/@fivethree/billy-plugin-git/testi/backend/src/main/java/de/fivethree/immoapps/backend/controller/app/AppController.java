package de.fivethree.immoapps.backend.controller.app;

import de.fivethree.immoapps.backend.domain.inspection.Inspection;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.model.payload.req.inspection.AttachInspectionResult;
import de.fivethree.immoapps.backend.model.payload.req.inspection.CreateInspectionAppRequest;
import de.fivethree.immoapps.backend.model.payload.res.common.ApiResponse;
import de.fivethree.immoapps.backend.model.payload.res.inspection.app.InspectionsAppHistoryRep;
import de.fivethree.immoapps.backend.model.payload.res.inspection.app.InspectionsAppRep;
import de.fivethree.immoapps.backend.model.payload.res.property.app.GetAppContextResponse;
import de.fivethree.immoapps.backend.model.payload.res.property.app.GetPropertiesWithAllDetailsAndItsUsersResponse;
import de.fivethree.immoapps.backend.model.payload.res.property.app.GetPropertiesWithAllDetailsResponse;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.service.InspectionService;
import de.fivethree.immoapps.backend.service.PropertyService;
import de.fivethree.immoapps.backend.service.UserService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Set;

@RestController
@RequestMapping("/immoapps/appapi")
public class AppController {

    @Autowired
    private PropertyService propertyService;

    @Autowired
    private InspectionService inspectionService;

    @Autowired
    private UserService userService;

    @Autowired
    private SecurityFacade securityFacade;

    @GetMapping("/context")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('USER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getAppContext() {
        User currentHausverwalter = this.userService.getCurrentHausverwalter();
        Set<User> mitarbeiter = currentHausverwalter.getMitarbeiter();

        // In case the caller is a mitarbeiter as well we want to remove him out of the list (so he can't select himself in the app)
        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            mitarbeiter.removeIf( x -> x.getId().equals(securityFacade.getCurrentUser().getId()));
        }

        //remove all deleted mitarbeiter
        mitarbeiter.removeIf(x -> x.getDeleted() != null && x.getDeleted() == true);

        return ResponseEntity.ok(new GetAppContextResponse(ModelMapper.mapAppHausverwalter(currentHausverwalter),
                ModelMapper.mapUsers(mitarbeiter)));
    }


    @GetMapping("/properties")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('USER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getProperties() {
        //either a hausmeister or hausverwalter (we use the hausverwalter for mitarbeiter as well)
        User userWithProperties = userService.getUserWithHisPropertiesAndFetchAllDetails();

        // this will never happen.
        if (userWithProperties == null) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                    new ApiResponse(false, ""));
        }

        if (securityFacade.hasRole(userWithProperties, RoleName.ROLE_USER)) {
            return ResponseEntity.ok(new GetPropertiesWithAllDetailsResponse(ModelMapper.mapPropertiesWithDetails(
                    userWithProperties.getProperties())));
        } else if (securityFacade.hasRole(userWithProperties, RoleName.ROLE_HAUSVERWALTER)) {
            return ResponseEntity.ok(new GetPropertiesWithAllDetailsAndItsUsersResponse(
                    ModelMapper.mapPropertiesWithDetailsAndItsUsers(userWithProperties.getOwnProperties())));
        }

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                new ApiResponse(false, ""));

    }


    @GetMapping("/properties/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('USER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getProperty(@PathVariable Long id) {
        Property prop = propertyService.getPropertyByIdAndFetchAllDetails(id);
        if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            return ResponseEntity.ok(ModelMapper.mapPropertyWithDetails(prop));
        } else if (securityFacade.hasRole(RoleName.ROLE_HAUSVERWALTER)
                    || securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            return ResponseEntity.ok(ModelMapper.mapPropertyWithDetailsAndItsUser(prop));
        }

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                new ApiResponse(false, ""));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @PostMapping("/inspections")
    public ResponseEntity<?> addNewInspection(@Valid @RequestBody CreateInspectionAppRequest createInspectionRequest) {
        Inspection inspection = this.inspectionService.addInspection(createInspectionRequest.getPropertyId(),
                createInspectionRequest.getInspectionCriterias());
        return ResponseEntity.ok(ModelMapper.mapAppInspection(inspection));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @GetMapping("/inspections")
    public ResponseEntity<?> getOpenInspectionsForUser() {
        Set<Inspection> inspections = this.inspectionService.getOpenUserInspections();
        return ResponseEntity.ok(new InspectionsAppRep(ModelMapper.mapAppInspections(inspections)));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @GetMapping("/inspections/history")
    public ResponseEntity<?> getClosedInspectionsForUser() {
        Set<Inspection> inspections = this.inspectionService.getClosedUserInspections();
        return ResponseEntity.ok(new InspectionsAppHistoryRep(ModelMapper.mapAppHistoryInspections(inspections)));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @PostMapping("/inspections/{id}")
    public ResponseEntity<?> attachInspectionResult(@PathVariable Long id,
                                                    @Valid @RequestBody AttachInspectionResult attachInspectionResult) {
        Inspection inspection = this.inspectionService.getInspectionByIdAndOwner(id);

        inspection = this.inspectionService.attachInspectionResult(inspection,
                attachInspectionResult.getPruefkriteriumId(), attachInspectionResult.getResult(),
                attachInspectionResult.getDescription(), attachInspectionResult.getImages(),
                attachInspectionResult.getAssignedUserId());

        return ResponseEntity.ok(ModelMapper.mapAppInspection(inspection));
    }

}
