package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.user.PushMessage;
import de.fivethree.immoapps.backend.domain.user.PushToken;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.model.push.PushNotificationType;
import de.fivethree.immoapps.backend.repository.PushMessageRepository;
import de.fivethree.immoapps.backend.repository.PushTokenRepository;
import de.fivethree.immoapps.backend.repository.UserRepository;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.util.fcm.FCMPushUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Service
@Transactional
public class PushnotificationService {
    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private UserRepository userRepo;

    @Autowired
    private PushTokenRepository pushTokenRepo;

    @Autowired
    private PushMessageRepository pushMessageRepo;

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public void registerPushToken(String token) {
        User currentUser = this.userRepo.getOne(securityFacade.getCurrentUser().getId());

        Set<PushToken> existingTokens = pushTokenRepo.findByTokenAndUser(token, currentUser);

        //only register this token in case it's not registered yet.
        if (existingTokens == null || existingTokens.size() == 0) {
            PushToken pushToken = new PushToken();
            pushToken.setToken(token);
            pushToken.setUser(currentUser);
            this.pushTokenRepo.save(pushToken);
        }
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public void unregisterForPushNotifications() {
        User currentUser = this.userRepo.getOne(securityFacade.getCurrentUser().getId());
        Set<PushToken> tokensToDelete = pushTokenRepo.findByUser(currentUser);
        this.pushTokenRepo.deleteAll(tokensToDelete);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Set<PushMessage> getPushNotifications() {
        User currentUser = this.userRepo.getOne(securityFacade.getCurrentUser().getId());
        return this.pushMessageRepo.getByUser(currentUser);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Set<PushMessage> deletePushNotification(Long id) {
        User currentUser = this.userRepo.getOne(securityFacade.getCurrentUser().getId());
        PushMessage messageToDelete = this.pushMessageRepo.getByIdAndUser(id, currentUser);
        Set<PushMessage> messages = this.pushMessageRepo.getByUser(currentUser);

        if (messageToDelete != null) {
            this.pushMessageRepo.delete(messageToDelete);
            messages.remove(messageToDelete);
        }

        return messages;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public PushMessage readMessage(Long id) {
        User currentUser = this.userRepo.getOne(securityFacade.getCurrentUser().getId());
        PushMessage message = this.pushMessageRepo.getByIdAndUser(id, currentUser);
        message.setReadByUser(true);
        return this.pushMessageRepo.save(message);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public void sendPushToUser(User user, String title, String message, PushNotificationType type, User sender,
                               String targetId) {
        Set<PushToken> tokensOfUser = pushTokenRepo.findByUser(user);
        this.sendMessageToTokens(tokensOfUser, title, message, type, targetId, user, sender);
    }

    private void sendMessageToTokens(Collection<PushToken> tokens, String title, String message,
                                     PushNotificationType pushNotificationType,
                                     String targetId, User receiver, User sender) {
        PushMessage pushMessage = new PushMessage(receiver, title, message, pushNotificationType.getType(), targetId,
                sender);
        pushMessage = this.pushMessageRepo.save(pushMessage);

        Map<String, String> dataMap = new HashMap<>();
        dataMap.put("messageId", "" + pushMessage.getId());
        dataMap.put("type", pushNotificationType.getType());
        dataMap.put("targetId", targetId);

        FCMPushUtil.sendLegacyPushToTokens(getPlainTokensFromPushTokens(tokens),
                title, message, dataMap);

    }

    private List<String> getPlainTokensFromPushTokens(Collection<PushToken> tokens) {
        List<String> ret = new ArrayList<>();
        for (PushToken token : tokens) {
            ret.add(token.getToken());
        }
        return ret;
    }
}
