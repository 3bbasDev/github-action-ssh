package de.fivethree.immoapps.backend.repository;

import de.fivethree.immoapps.backend.domain.user.Role;
import de.fivethree.immoapps.backend.domain.user.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.Set;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.roles " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "WHERE u.email = :email AND (u.deleted IS NULL or u.deleted = false)")
    User findByEmailAndNotDeleted(@Param("email") String email);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.roles roles " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "WHERE :role IN (roles)")
    Set<User> getAllUsersByRoleAndFetchAdditionalInfo(@Param("role") Role role);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.roles roles " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "WHERE u.id = :id AND :role IN (roles)")
    User getUserByIdAndRoleAndFetchAdditionalInfo(@Param("id") Long id, @Param("role") Role role);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.roles roles " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH u.ownProperties props " +
            "WHERE u.id = :id AND :role IN (roles)")
    User getUserByIdAndRoleAndFetchPropertiesAndFetchAdditionalInfo(@Param("id") Long id, @Param("role") Role role);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH u.roles " +
            "WHERE u.id = :id")
    User getUserByIdAndFetchAdditionalInfo(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH u.roles " +
            "WHERE u.id = :id AND (u.deleted IS NULL or u.deleted = false)")
    User getNotDeletedUserByIdAndFetchAdditionalInfo(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.users users " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH u.roles " +
            "LEFT JOIN FETCH u.mitarbeiter mitarbeiter " +
            "LEFT JOIN FETCH users.roles " +
            "LEFT JOIN FETCH users.additionalUserInfo " +
            "LEFT JOIN FETCH mitarbeiter.roles " +
            "LEFT JOIN FETCH mitarbeiter.additionalUserInfo " +
            "WHERE u.id = :id")
    User findByIdAndFetchUsersAndFetchMitarbeiter(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.mitarbeiter ma " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH u.roles " +
            "LEFT JOIN FETCH ma.roles " +
            "LEFT JOIN FETCH ma.additionalUserInfo " +
            "WHERE u.id = :id")
    User findByIdAndFetchMitarbeiterAndFetchAdditionalInfo(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.ownProperties " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH u.roles " +
            "WHERE u.id = :id")
    User findByIdAndFetchOwnProperties(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u LEFT JOIN FETCH u.properties WHERE u.id = :id")
    User findByIdAndFetchProperties(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.ownProperties props " +
            "LEFT JOIN FETCH props.users users " +
            "LEFT JOIN FETCH props.checklists checklists " +
            "LEFT JOIN FETCH checklists.levels levels " +
            "LEFT JOIN FETCH levels.pruefkriterien kriterien " +
            "LEFT JOIN FETCH kriterien.picto picto " +
            "LEFT JOIN FETCH kriterien.category " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH u.roles " +
            "LEFT JOIN FETCH users.roles " +
            "WHERE u.id = :id")
    User findByIdAndFetchOwnPropertiesAndEveryDetail(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.properties props " +
            "LEFT JOIN FETCH props.checklists checklists " +
            "LEFT JOIN FETCH checklists.levels levels " +
            "LEFT JOIN FETCH levels.pruefkriterien kriterien " +
            "LEFT JOIN FETCH kriterien.picto picto " +
            "LEFT JOIN FETCH kriterien.category " +
            "LEFT JOIN FETCH u.roles " +
            "WHERE u.id = :id")
    User findByIdAndFetchPropertiesAndEveryDetail(@Param("id") Long id);

    @Query(value = "SELECT u FROM User u LEFT JOIN FETCH u.properties WHERE u.id = :id " +
            "AND u.hausverwalter.id = :hausverwalterId")
    User findByIdAndHausverwalterAndFetchProperties(@Param("id") Long id,
                                                    @Param("hausverwalterId") Long hausverwalterId);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.properties " +
            "LEFT JOIN FETCH u.vorgesetzter vor " +
            "LEFT JOIN FETCH u.roles " +
            "LEFT JOIN FETCH u.additionalUserInfo " +
            "LEFT JOIN FETCH vor.roles " +
            "LEFT JOIN FETCH vor.additionalUserInfo " +
            "WHERE u.id = :id " +
            "AND (u.hausverwalter.id = :hausverwalterId OR u.vorgesetzter.id = :hausverwalterId)")
    User findByIdAndHausverwalterOrVorgesetzerAndFetchProperties(@Param("id") Long id,
                                                                 @Param("hausverwalterId") Long hausverwalterId);

    @Query(value = "SELECT u FROM User u " +
            "WHERE u.id = :id AND " +
            "(u.hausverwalter.id = :hausverwalterId OR u.vorgesetzter.id = :hausverwalterId)")
    User findByIdAndHausverwalterOrVorgesetzter(@Param("id") Long id, @Param("hausverwalterId") Long hausverwalterId);

    @Query(value = "SELECT u FROM User u " +
            "LEFT JOIN FETCH u.properties props " +
            "LEFT JOIN FETCH props.users " +
            "WHERE u.id = :id AND " +
            "(u.hausverwalter.id = :hausverwalterId OR u.vorgesetzter.id = :hausverwalterId)")
    User findByIdAndHausverwalterOrVorgesetzterAndFetchProperties(@Param("id") Long id,
                                                                  @Param("hausverwalterId") Long hausverwalterId);

    @Query(value = "SELECT COUNT(u) FROM User u " +
            "LEFT JOIN u.roles roles " +
            "LEFT JOIN u.hausverwalter " +
            "LEFT JOIN u.vorgesetzter " +
            "WHERE :role IN (roles) AND " +
            "(u.hausverwalter.id = :hausverwalterId OR u.vorgesetzter.id = :hausverwalterId) AND " +
            "u.createdDate >= :startDateCompare AND u.createdDate < :endDateCompare")
    Long countHausverwalterUserCreationByRoleAndStartAndEnd(@Param("role") Role role,
                                                            @Param("hausverwalterId") Long hausverwalterId,
                                                            @Param("startDateCompare") LocalDateTime startDateCompare,
                                                            @Param("endDateCompare") LocalDateTime endDateCompare);

    Boolean existsByEmail(String email);

    //this method can be used for changing the email address
    Boolean existsByEmailAndIdNot(String email, Long id);
}
