package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.picto.AdminPicto;
import de.fivethree.immoapps.backend.domain.picto.HausverwalterPicto;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.exceptions.EntityNotFoundException;
import de.fivethree.immoapps.backend.exceptions.FileStorageException;
import de.fivethree.immoapps.backend.exceptions.PictoInUseException;
import de.fivethree.immoapps.backend.repository.*;
import de.fivethree.immoapps.backend.repository.checklist.*;
import de.fivethree.immoapps.backend.repository.inspection.InspectionCriteriaPruefkriteriumRepository;
import de.fivethree.immoapps.backend.repository.task.TaskPruefkriteriumRepository;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Set;

@Service
@Transactional
public class PictoService {
    @Autowired
    private AdminPictoRepository adminPictoRepo;

    @Autowired
    private HausverwalterPictoRepository hausverwalterPictoRepo;

    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private TaskPruefkriteriumRepository taskPruefkriteriumRepo;

    @Autowired
    private InspectionCriteriaPruefkriteriumRepository inspectionCriteriaPruefkriteriumRepo;

    @Autowired
    private ChecklistTemplatePruefkriteriumRepository checklistTemplatePruefkriteriumRepo;

    @Autowired
    private ChecklistPruefkriteriumRepository checklistPruefkriteriumRepo;

    @Autowired
    private AdminChecklistPruefkriteriumRepository adminChecklistPruefkriteriumRepository;

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public HausverwalterPicto saveHausverwalterPicto(MultipartFile file) {
        String filename = StringUtils.cleanPath(file.getOriginalFilename());

        try {
            HausverwalterPicto newPicto = new HausverwalterPicto(filename, file.getContentType(),
                    file.getBytes(), userRepository.getOne(getHausverwalterId()));
            return this.hausverwalterPictoRepo.save(newPicto);
        } catch (IOException e) {
            throw new FileStorageException("Beim Speichern der Datei ist ein Fehler augetreten.");
        }
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public HausverwalterPicto getHausverwalterPictoById(Long id) {
        HausverwalterPicto picto = hausverwalterPictoRepo.findByIdAndHausverwalterId(id, getHausverwalterId());

        if (picto == null) {
            throw new EntityNotFoundException(id, "HausverwalterPicto");
        }

        return picto;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Set<HausverwalterPicto> getAllHausverwalterPictos() {
        return hausverwalterPictoRepo.findAllByHausverwalter(getHausverwalterId());
    }

    @PreAuthorize("hasRole('ADMIN')")
    public AdminPicto saveAdminPicto(MultipartFile file) {
        String filename = StringUtils.cleanPath(file.getOriginalFilename());

        try {
            AdminPicto newPicto = new AdminPicto(filename, file.getContentType(), file.getBytes());
            return this.adminPictoRepo.save(newPicto);
        } catch (IOException e) {
            throw new FileStorageException("Beim Speichern der Datei ist ein Fehler augetreten.");
        }
    }

    public AdminPicto getAdminPictoById(Long id) {
        return adminPictoRepo.findById(id).orElseThrow(() ->
                new EntityNotFoundException(id, "AdminPicto"));
    }

    public List<AdminPicto> getAllAdminPictos() {
        return adminPictoRepo.findAll();
    }

    @PreAuthorize("hasRole('ADMIN')")
    public void deleteAdminPicto(Long id) {
        AdminPicto picto = getAdminPictoById(id);

        if (this.adminChecklistPruefkriteriumRepository.countUsageOfPicto(picto) > 0) {
            throw new PictoInUseException("Das Piktogramm: " + picto.getName() + " wird bereits verwendet und " +
                    "kann daher nicht gelöscht werden");
        }

        this.adminPictoRepo.delete(picto);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public void deleteHausverwalterPicto(Long id) {
        HausverwalterPicto picto = getHausverwalterPictoById(id);

        if (this.taskPruefkriteriumRepo.countUsageOfPicto(picto) > 0
                || this.inspectionCriteriaPruefkriteriumRepo.countUsageOfPicto(picto) > 0
                || this.checklistTemplatePruefkriteriumRepo.countUsageOfPicto(picto) > 0
                || this.checklistPruefkriteriumRepo.countUsageOfPicto(picto) > 0) {
            throw new PictoInUseException("Das Piktogramm: " + picto.getName() + " wird bereits verwendet und " +
                    "kann daher nicht gelöscht werden");
        }

        this.hausverwalterPictoRepo.delete(picto);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    private Long getHausverwalterId() {
        Long hausverwalterId = securityFacade.getCurrentUser().getId();

        //in case a mitarbeiter wants to assign an inspection we have to search for this user with the hausverwalterId
        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            User mitarbeiter = userRepository.getOne(securityFacade.getCurrentUser().getId());
            hausverwalterId = mitarbeiter.getVorgesetzter().getId();
        } else if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            User hausmeister = userRepository.getOne(securityFacade.getCurrentUser().getId());
            hausverwalterId = hausmeister.getHausverwalter().getId();
        }

        return hausverwalterId;
    }
}
