package de.fivethree.immoapps.backend.domain.inspection;

import de.fivethree.immoapps.backend.domain.IDomain;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.User;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "inspection")
public class Inspection implements IDomain {
    @Id
    @GeneratedValue(generator = "sequence")
    @SequenceGenerator(name = "sequence", sequenceName = "MY_SEQ", allocationSize = 1, initialValue = 1000)
    private Long id;

    @Column(name = "done")
    private Boolean done = false;

    /**
    * The user who is responsible to do this inspection. It's either the creator himself or a hausverwalter assigned it.
    */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;

    /**
     * The user who created this inspection and assigned this inspection to a different user.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "auftrag_geber_id")
    private User auftragGeber;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "inspection", cascade = {CascadeType.ALL}, orphanRemoval = true)
    private Set<InspectionResult> inspectionResults = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "inspection", cascade = {CascadeType.ALL}, orphanRemoval = true)
    private Set<InspectionCriteria> inspectionCriterias = new HashSet<>();

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "property_id")
    private Property property;

    @Column
    private LocalDateTime createdDate;

    @Column
    private LocalDateTime updatedDate;

    @Column
    private LocalDateTime finishedDate;

    public Inspection() {}

    public Inspection(User user, Property property, User auftragGeber) {
        this.user = user;
        this.property = property;
        this.auftragGeber = auftragGeber;
    }

    public Property getProperty() {
        return property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    public Set<InspectionCriteria> getInspectionCriterias() {
        return inspectionCriterias;
    }

    public void setInspectionCriterias(Set<InspectionCriteria> inspectionCriterias) {
        this.inspectionCriterias = inspectionCriterias;
    }

    public Set<InspectionResult> getInspectionResults() {
        return inspectionResults;
    }

    public void setInspectionResults(Set<InspectionResult> inspectionResults) {
        this.inspectionResults = inspectionResults;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Boolean getDone() {
        return done;
    }

    public void setDone(Boolean done) {
        this.done = done;

        if (done != null && done.equals(true)) {
            this.finishedDate = LocalDateTime.now();
        }
    }

    @Override
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    public LocalDateTime getUpdatedDate() {
        return updatedDate;
    }

    public LocalDateTime getFinishedDate() {
        return finishedDate;
    }

    public User getAuftragGeber() {
        return auftragGeber;
    }

    public void setAuftragGeber(User auftragGeber) {
        this.auftragGeber = auftragGeber;
    }

    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        updatedDate = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedDate = LocalDateTime.now();
    }
}
