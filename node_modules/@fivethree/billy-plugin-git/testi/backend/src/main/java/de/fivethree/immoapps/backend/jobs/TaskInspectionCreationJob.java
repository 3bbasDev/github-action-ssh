package de.fivethree.immoapps.backend.jobs;

import de.fivethree.immoapps.backend.domain.inspection.Inspection;
import de.fivethree.immoapps.backend.domain.inspection.InspectionCriteria;
import de.fivethree.immoapps.backend.domain.task.Task;
import de.fivethree.immoapps.backend.domain.task.TaskPruefkriterium;
import de.fivethree.immoapps.backend.model.mail.NewOpenInspectionMail;
import de.fivethree.immoapps.backend.model.push.PushNotificationType;
import de.fivethree.immoapps.backend.repository.inspection.InspectionRepository;
import de.fivethree.immoapps.backend.repository.task.TaskRepository;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.service.PushnotificationService;
import de.fivethree.immoapps.backend.service.UserMailService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;

@Component
public class TaskInspectionCreationJob {

    @Autowired
    private TaskRepository taskRepository;

    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private InspectionRepository inspectionRepo;

    @Autowired
    private UserMailService userMailService;

    @Autowired
    private PushnotificationService pushnotificationService;

    @Scheduled(fixedRate = 5000)
    public void execute() {
        Set<Task> tasks = taskRepository.findAllActiveByStartDateAndFetchEverything(LocalDate.now());

        if (tasks != null && tasks.size() > 0) {
            for (Task task : tasks) {
                if (task.getLastScheduled() == null) {
                    createInspectionOutOfTask(task);
                } else {
                    long dayDiff = Math.abs(ChronoUnit.DAYS.between(task.getLastScheduled().toLocalDate(),
                            LocalDate.now()));

                    long monthDiff = Math.abs(ChronoUnit.MONTHS.between(task.getLastScheduled().toLocalDate(),
                            LocalDate.now()));

                    DayOfWeek dayOfWeek = LocalDate.now().getDayOfWeek();

                    switch (task.getTaskScheduledOptionEnum()) {
                        case TAEGLICH:
                            if (dayDiff >= 1) {
                                createInspectionOutOfTask(task);
                            }
                            break;
                        case TAEGLICH_SKIP_WEEKENDS:
                            if (dayDiff >= 1 && dayOfWeek != DayOfWeek.SATURDAY
                                    && dayOfWeek != DayOfWeek.SUNDAY) {
                                createInspectionOutOfTask(task);
                            }
                            break;
                        case WOECHENTLICH:
                            if (dayDiff >= 7) {
                                createInspectionOutOfTask(task);
                            }
                            break;
                        case MONATLICH:
                            if (monthDiff >= 1) {
                                createInspectionOutOfTask(task);
                            }
                            break;
                    }
                }
            }
        }
    }

    @Transactional
    void createInspectionOutOfTask(Task task) {
        boolean auftragGeberDeleted = task.getAuftragGeber().getDeleted() != null
                && task.getAuftragGeber().getDeleted() == true;

        boolean auftragNehmerDeleted = task.getUser().getDeleted() != null && task.getUser().getDeleted() == true;

        if (securityFacade.checkUserPropertyAccess(task.getProperty(), task.getUser()) && !auftragGeberDeleted
                && !auftragNehmerDeleted) {
            Inspection newInspection = new Inspection(task.getUser(), task.getProperty(), task.getAuftragGeber());

            List<InspectionCriteria> inspectionCriterias = getInspectionCriteriasFromTaskPruefkriterien(task.getPruefkriterien(), newInspection);
            newInspection.getInspectionCriterias().addAll(inspectionCriterias);
            newInspection = this.inspectionRepo.save(newInspection);
            task.setLastScheduled(LocalDateTime.now());
            this.taskRepository.save(task);

            this.userMailService.sendNewOpenInspectionMail(task.getUser().getEmail(), task.getUser().getFullName(), new NewOpenInspectionMail(
                    newInspection.getProperty().getName(),
                    "" + newInspection.getInspectionCriterias().size(),
                    task.getProperty().getHausverwalter().getAdditionalUserInfo() != null ? task.getProperty().getHausverwalter().getAdditionalUserInfo().getCompanyName() : null,
                    newInspection.getAuftragGeber().getFullName(),
                    newInspection.getAuftragGeber().getEmail()));

            this.pushnotificationService.sendPushToUser(task.getUser(), "Neue offene Inspektion",
                    "FÃ¼r Sie wurde eine neue Inspektion angelegt.", PushNotificationType.INSPECTION_CREATED,
                    task.getAuftragGeber(), "" + newInspection.getId());
        }
    }

    private List<InspectionCriteria> getInspectionCriteriasFromTaskPruefkriterien(
            Collection<TaskPruefkriterium> taskPruefkriterien, Inspection inspection) {
        List<InspectionCriteria> ret = new ArrayList<>();

        for (TaskPruefkriterium taskPruefkriterium : taskPruefkriterien) {
            InspectionCriteria inspectionCriteria = new InspectionCriteria();
            inspectionCriteria.setPruefkriterium(ModelMapper
                    .mapTaskPruefkriteriumToInspectionPruefkriterium(taskPruefkriterium,
                            inspectionCriteria));
            inspectionCriteria.setInspection(inspection);
            ret.add(inspectionCriteria);
        }

        return ret;
    }
}
