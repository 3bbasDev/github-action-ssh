package de.fivethree.immoapps.backend.domain.property;

import de.fivethree.immoapps.backend.domain.task.Task;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.domain.checklist.Checklist;
import de.fivethree.immoapps.backend.domain.inspection.Inspection;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "property")
public class Property {
    @Id
    @GeneratedValue(generator = "sequence")
    @SequenceGenerator(name="sequence", sequenceName="MY_SEQ", allocationSize=1, initialValue = 1000)
    private Long id;

    @NotBlank
    @Column
    private String name;

    @NotBlank
    @Column
    private String city;

    @NotBlank
    @Column
    private String zip;

    @NotBlank
    @Column
    private String streetAndNo;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "hausverwalter_id")
    private User hausverwalter;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "property_has_users",
            joinColumns = @JoinColumn(name = "property_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id"))
    private Set<User> users = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "property", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Checklist> checklists = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "property", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Inspection> inspections = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "property", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Task> tasks = new HashSet<>();

    @Column
    private LocalDateTime createdDate;

    @Column
    private LocalDateTime updatedDate;

    public Property() {}

    public Property(String name, String city, String zip, String streetAndNo) {
        this.name = name;
        this.city = city;
        this.zip = zip;
        this.streetAndNo = streetAndNo;
    }

    public String getFullAddress() {
        return this.streetAndNo + ", " + this.zip + " " + this.city;
    }

    public Set<Inspection> getInspections() {
        return inspections;
    }

    public void setInspections(Set<Inspection> inspections) {
        this.inspections = inspections;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    public String getStreetAndNo() {
        return streetAndNo;
    }

    public void setStreetAndNo(String streetAndNo) {
        this.streetAndNo = streetAndNo;
    }

    public User getHausverwalter() {
        return hausverwalter;
    }

    public void setHausverwalter(User hausverwalter) {
        this.hausverwalter = hausverwalter;
    }

    public Set<User> getUsers() {
        return users;
    }

    public void setUsers(Set<User> users) {
        this.users = users;
    }

    public Set<Checklist> getChecklists() {
        return checklists;
    }

    public void setChecklists(Set<Checklist> checklists) {
        this.checklists = checklists;
    }

    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    public LocalDateTime getUpdatedDate() {
        return updatedDate;
    }

    public Set<Task> getTasks() {
        return tasks;
    }

    public void setTasks(Set<Task> tasks) {
        this.tasks = tasks;
    }

    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        updatedDate = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedDate = LocalDateTime.now();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        if (! (obj instanceof Property)) {
            return false;
        }

        Property other = (Property) obj;
        return this.getId().equals(other.getId());
    }
}
