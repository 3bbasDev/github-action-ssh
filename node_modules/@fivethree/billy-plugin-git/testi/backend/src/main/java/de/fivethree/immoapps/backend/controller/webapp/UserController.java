package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.model.payload.req.user.CreateHausverwalterRequest;
import de.fivethree.immoapps.backend.model.payload.req.user.CreateUserRequest;
import de.fivethree.immoapps.backend.model.payload.req.user.UpdateUserRequest;
import de.fivethree.immoapps.backend.model.payload.res.user.GetHausverwaltersResponse;
import de.fivethree.immoapps.backend.model.payload.res.user.UserIdentityAvailabilityResponse;
import de.fivethree.immoapps.backend.repository.UserRepository;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.service.UserService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Set;

@RestController
@RequestMapping("/immoapps/api/users")
public class UserController {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private UserService userService;

    @GetMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getUsersOfHausverwalter() {
        return ResponseEntity.ok(this.userService.getUsersAndEmployeesForHausverwalter());
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getUserOfHausverwalter(@PathVariable Long id) {
        User user = this.userService.getUserForEmployeeOrForHausverwalter(id);
        return ResponseEntity.ok(ModelMapper.mapUser(user));
    }

    @GetMapping("/checkEmailAvailability")
    public ResponseEntity<UserIdentityAvailabilityResponse> checkEmailAvailability(@RequestParam(value = "email") String email) {
        Boolean isAvailable = !userRepository.existsByEmail(email);
        return ResponseEntity.ok(new UserIdentityAvailabilityResponse(isAvailable));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @PostMapping("/mitarbeiter")
    public ResponseEntity<?> addMitarbeiter(@Valid @NotNull @RequestBody CreateUserRequest createUserRequest) {
        User user = this.userService.createNewEmployee(createUserRequest);
        return ResponseEntity.ok(ModelMapper.mapUser(user));
    }

    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/hausverwalter")
    public ResponseEntity<?> getHausverwalter() {
        Set<User> hausverwalter = this.userService.getAllHausverwalters();
        return ResponseEntity.ok(new GetHausverwaltersResponse(ModelMapper.mapHausverwalters(hausverwalter)));
    }

    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/hausverwalter/{id}")
    public ResponseEntity<?> getHausverwalterById(@PathVariable Long id) {
        User hausverwalter = this.userService.getHausverwalterById(id);
        return ResponseEntity.ok(ModelMapper.mapHausverwalter(hausverwalter));
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/hausverwalter")
    public ResponseEntity<?> addHausverwalter(@Valid @NotNull @RequestBody CreateHausverwalterRequest createHausverwalterReq) {
        User hausverwalter = this.userService.createNewHausverwalter(createHausverwalterReq);
        return ResponseEntity.ok(ModelMapper.mapHausverwalter(hausverwalter));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('ADMIN') or hasRole('USER' or hasRole('MITARBEITER'))")
    @PostMapping("/{id}")
    public ResponseEntity<?> updateUser(@Valid @NotNull @RequestBody UpdateUserRequest updateUserRequest,
                                        @PathVariable Long id) {
        User updatedUser = userService.updateUser(id, updateUserRequest);

        if (securityFacade.hasRole(updatedUser, RoleName.ROLE_HAUSVERWALTER)) {
            return ResponseEntity.ok(ModelMapper.mapHausverwalter(updatedUser));
        }

        return ResponseEntity.ok(ModelMapper.mapUser(updatedUser));
    }

    @PostMapping("/{id}/resetPasswordOfUser")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('ADMIN')")
    public ResponseEntity<?> resetPassword(@PathVariable Long id) {
        this.userService.resetUserPassword(id);
        return ResponseEntity.ok().build();
    }

    @CrossOrigin
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('ADMIN')")
    public ResponseEntity<?> deleteUser(@PathVariable Long id) {
        this.userService.deleteUser(id);
        return ResponseEntity.ok().build();
    }

    @PostMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> addUser(@Valid @RequestBody CreateUserRequest createUserRequest) {
        User user = this.userService.createNewHausmeister(createUserRequest);
        return ResponseEntity.ok(ModelMapper.mapUser(user));
    }
}
