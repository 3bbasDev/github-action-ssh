package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.user.PasswordForget;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.repository.PasswordForgetRepository;
import de.fivethree.immoapps.backend.repository.UserRepository;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.time.LocalDateTime;
import java.util.UUID;

@Service
public class PasswordForgetService {
    @Autowired
    private PasswordForgetRepository passwordForgetRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserMailService userMailService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public void sendPasswordForgetEmail(String email) {
        PasswordForget existingRequest = passwordForgetRepository.findByEmail(email);

        //in case there is already one request for this email we delete this one and create a new one.
        if (existingRequest != null) {
            this.passwordForgetRepository.delete(existingRequest);
        }


        User user = userRepository.findByEmailAndNotDeleted(email);

        //in case the user is not in the system we want to pretend that everything worked out.
        if (user == null) {
            return;
        }

        UUID uuid = UUID.randomUUID();

        PasswordForget newPasswordForget = new PasswordForget();
        newPasswordForget.setEmail(email);
        newPasswordForget.setGuid(uuid.toString());
        passwordForgetRepository.save(newPasswordForget);

        String link = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("/immoapps/api/passwordforget/reset/" + uuid.toString())
                .toUriString();

        this.userMailService.sendPasswordForgetRequestMail(email, user.getFullName(), link);
    }

    public boolean resetPassword(String uuid) {
        LocalDateTime minDate = LocalDateTime.now().minusHours(49);
        PasswordForget passwordForget = passwordForgetRepository.findByGuidAndAndCreatedDateHigherThan(uuid, minDate);
        if (passwordForget == null) {
            return false;
        }

        User user = userRepository.findByEmailAndNotDeleted(passwordForget.getEmail());

        if (user == null) {
            return false;
        }

        String randomPassword = RandomStringUtils.random(8, true, true);

        user.setPassword(passwordEncoder.encode(randomPassword));
        userRepository.save(user);
        userMailService.sendPasswordResetMail(passwordForget.getEmail(), user.getFullName(), randomPassword);
        passwordForgetRepository.delete(passwordForget);
        return true;
    }
}
