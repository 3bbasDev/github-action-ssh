package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.domain.checklist.Checklist;
import de.fivethree.immoapps.backend.domain.checklist.ChecklistPruefkriterium;
import de.fivethree.immoapps.backend.model.payload.req.checklist.*;
import de.fivethree.immoapps.backend.model.payload.res.checklist.GetChecklistsResponse;
import de.fivethree.immoapps.backend.model.payload.res.common.ApiResponse;
import de.fivethree.immoapps.backend.service.ChecklistService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Set;

@RestController
@RequestMapping("/immoapps/api/properties/{propertyId}/checklists")
public class ChecklistController {

    @Autowired
    private ChecklistService checklistService;

    @GetMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getCheckLists(@PathVariable Long propertyId) {
        Set<Checklist> checklists = this.checklistService.getChecklists(propertyId);
        return ResponseEntity.ok(new GetChecklistsResponse(ModelMapper.mapChecklists(checklists)));
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getChecklist(@PathVariable Long propertyId, @PathVariable Long id) {
        Checklist checklist = this.checklistService.getChecklist(propertyId, id);
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }

    @PostMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> updateChecklist(@PathVariable Long propertyId,
                                             @PathVariable Long id,
                                             @Valid @RequestBody UpdateChecklistReq updateChecklistTemplateReq) {
        Checklist checklist = this.checklistService.updateChecklist(propertyId, id,
                updateChecklistTemplateReq.getName());
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @PostMapping
    public ResponseEntity<?> addChecklist(@PathVariable Long propertyId,
                                          @Valid @RequestBody CreateChecklistRequest createChecklistRequest) {
        if (createChecklistRequest.getChecklistTemplateId() == null
                && (createChecklistRequest.getChecklistTemplatesIds() == null
                || createChecklistRequest.getChecklistTemplatesIds().size() == 0)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ApiResponse(false,
                    "es muss mindestens eine Checklist Template Id angegeben werden"));
        }

        if (createChecklistRequest.getChecklistTemplatesIds() != null
                && createChecklistRequest.getChecklistTemplatesIds().size() > 0) {
            return ResponseEntity.ok(new GetChecklistsResponse(ModelMapper.mapChecklists(this.checklistService
                    .addChecklists(createChecklistRequest.getChecklistTemplatesIds(), propertyId))));
        } else {
            return ResponseEntity.ok(new GetChecklistsResponse(ModelMapper.mapChecklists(this.checklistService
                    .addChecklist(createChecklistRequest.getChecklistTemplateId(), propertyId))));
        }
    }

    @CrossOrigin
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteChecklist(@PathVariable Long propertyId, @PathVariable Long id) {
        this.checklistService.deleteChecklist(propertyId, id);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/{id}/levels")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> addLevelChecklist(@PathVariable Long propertyId, @PathVariable Long id,
                                               @Valid @RequestBody AddLevelToChecklistRequest addLevelToChecklistRequest) {
        Checklist checklist = this.checklistService.addLevelToCheckList(propertyId, id, addLevelToChecklistRequest);
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }

    @PostMapping("/{id}/levels/{levelId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> updateChecklistLevel(@PathVariable Long propertyId, @PathVariable Long id,
                                                  @PathVariable Long levelId,
                                                  @Valid @RequestBody UpdateChecklistLevelReq updateChecklistLevelReq) {
        Checklist checklist = this.checklistService.updateChecklistLevel(propertyId, id, levelId, updateChecklistLevelReq.getName());
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }


    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteChecklistLevel(@PathVariable Long propertyId, @PathVariable Long id,
                                                  @PathVariable Long levelId) {
        Checklist checklist = this.checklistService.removeLevelFromChecklist(propertyId, id, levelId);
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }


    @PostMapping("/{id}/levels/{levelId}/pruefkriterien")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> addPruefkriterienToLevel(@PathVariable Long propertyId, @PathVariable Long id,
                                                      @PathVariable Long levelId,
                                                      @Valid @RequestBody AddPruefkriteriumRequest addPruefkriteriumRequest) {
        Checklist checklist = this.checklistService.addKriterium(propertyId, id, levelId, addPruefkriteriumRequest);
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }

    @PostMapping("/{id}/levels/{levelId}/pruefkriterien/{kriteriumId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> updateChecklistKriterium(@PathVariable Long propertyId, @PathVariable Long id,
                                                      @PathVariable Long levelId, @PathVariable Long kriteriumId,
                                                      @Valid @RequestBody UpdateChecklistPruefkriteriumReq updateChecklistPruefkriteriumReq) {
        Checklist checklist = this.checklistService.updateChecklistPruefkriterium(propertyId, id, levelId,
                kriteriumId, updateChecklistPruefkriteriumReq.getName());
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }


    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteKriterium(@PathVariable Long propertyId, @PathVariable Long id,
                                             @PathVariable Long levelId, @PathVariable Long kriterienId) {
        Checklist checklist = this.checklistService.removeKriterium(propertyId, id, levelId, kriterienId);
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklist));
    }

    @PostMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}/pictos")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> addPicto(@PathVariable Long propertyId, @PathVariable Long id, @PathVariable Long levelId,
                                      @PathVariable Long kriterienId,
                                      @Valid @RequestBody AddPictoRequest addPictoRequest) {
        ChecklistPruefkriterium kriterium = this.checklistService.addPicto(propertyId, id, levelId, kriterienId,
                addPictoRequest.getPictoId());
        return ResponseEntity.ok(ModelMapper.mapPruefkriterium(kriterium));
    }

    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}/pictos/{pictoId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> removePicto(@PathVariable Long propertyId, @PathVariable Long id, @PathVariable Long levelId,
                                         @PathVariable Long kriterienId,
                                         @PathVariable Long pictoId) {
        ChecklistPruefkriterium kriterium = this.checklistService.removePicto(propertyId, id, levelId, kriterienId,
                pictoId);
        return ResponseEntity.ok(ModelMapper.mapPruefkriterium(kriterium));
    }
}
