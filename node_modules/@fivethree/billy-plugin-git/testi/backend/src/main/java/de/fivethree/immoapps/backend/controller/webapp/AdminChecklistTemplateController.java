package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.model.payload.req.checklist.*;
import de.fivethree.immoapps.backend.model.payload.res.checklist.GetChecklistsResponse;
import de.fivethree.immoapps.backend.service.AdminChecklistTemplateService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@RestController
@RequestMapping("/immoapps/api/adminchecklisttemplates")
public class AdminChecklistTemplateController {
    @Autowired
    private AdminChecklistTemplateService checklistTemplateService;

    @GetMapping
    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getAdminCheckListTemplates() {
        return ResponseEntity.ok(new GetChecklistsResponse(ModelMapper.mapChecklists(
                checklistTemplateService.getAll())));
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getAdminChecklistTemplate(@NotNull @PathVariable Long id) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.getById(id)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> deleteAdminChecklistTemplate(@PathVariable Long id) {
        this.checklistTemplateService.delete(id);
        return ResponseEntity.ok().build();
    }

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> addAdminChecklistTemplate(
            @NotNull @Valid @RequestBody CreateAdminChecklistTemplateRequest createAdminChecklistTemplateReq) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(this.checklistTemplateService.
                addTemplate(createAdminChecklistTemplateReq)));
    }

    @PostMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> updateAdminChecklistTemplate(@PathVariable Long id,
                                                          @Valid @RequestBody UpdateChecklistReq updateAdminChecklistTemplateReq) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(this.checklistTemplateService.updateTemplate(id,
                updateAdminChecklistTemplateReq)));
    }

    @PostMapping("/{id}/levels")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> addLevelToAdminChecklistTemplate(@PathVariable Long id,
                                                              @NotNull @Valid @RequestBody AddLevelToChecklistRequest addLevelToChecklistRequest) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(this.checklistTemplateService.addLevelToTemplate(id,
                addLevelToChecklistRequest)));
    }

    @PostMapping("/{id}/levels/{levelId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> updateAdminChecklistTemplateLevel(@PathVariable Long id, @PathVariable Long levelId,
                                                               @Valid @RequestBody UpdateChecklistLevelReq updateChecklistLevelReq) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService
                .updateTemplateLevel(id, levelId, updateChecklistLevelReq)));
    }

    @PostMapping("/{id}/levels/{levelId}/pruefkriterien")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> addPruefkriterienToLevel(@PathVariable Long id, @PathVariable Long levelId,
                                                      @Valid @RequestBody AddPruefkriteriumRequest addPruefkriteriumRequest) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService
                .addPruefKriteriumToLevel(id, levelId, addPruefkriteriumRequest)));
    }


    @PostMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> updateAdminChecklistPruefKriterium(@PathVariable Long id, @PathVariable Long levelId,
                                                                @PathVariable Long kriterienId,
                                                                @NotNull @Valid @RequestBody UpdateChecklistPruefkriteriumReq updateChecklistPruefkriterium) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.updatePruefkriterium(id,
                levelId, kriterienId, updateChecklistPruefkriterium)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> deleteKriterium(@PathVariable Long id, @PathVariable Long levelId,
                                             @PathVariable Long kriterienId) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(
                checklistTemplateService.deleteKriterium(id, levelId, kriterienId)));
    }

    @PostMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}/pictos")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> addPicto(@PathVariable Long id, @PathVariable Long levelId,
                                      @PathVariable Long kriterienId,
                                      @Valid @RequestBody AddPictoRequest addPictoRequest) {
        return ResponseEntity.ok(ModelMapper.mapPruefkriterium(checklistTemplateService.addPicto(id, levelId,
                kriterienId, addPictoRequest)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}/pictos/{pictoId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> removePicto(@PathVariable Long id, @PathVariable Long levelId,
                                         @PathVariable Long kriterienId, @PathVariable Long pictoId) {
        return ResponseEntity.ok(ModelMapper.mapPruefkriterium(checklistTemplateService
                .removePicto(id, levelId, kriterienId, pictoId)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> deleteChecklistTemplateLevel(@PathVariable Long id, @PathVariable Long levelId) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService
                .deleteTemplateLevel(id, levelId)));
    }
}
