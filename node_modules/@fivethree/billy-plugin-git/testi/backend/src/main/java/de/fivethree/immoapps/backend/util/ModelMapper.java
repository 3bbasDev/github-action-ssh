package de.fivethree.immoapps.backend.util;

import de.fivethree.immoapps.backend.domain.IBase64AndImageEntity;
import de.fivethree.immoapps.backend.domain.IImageEntity;
import de.fivethree.immoapps.backend.domain.adminchecklist.AdminChecklistTemplate;
import de.fivethree.immoapps.backend.domain.adminchecklist.AdminChecklistTemplateLevel;
import de.fivethree.immoapps.backend.domain.adminchecklist.AdminChecklistTemplatePruefkriterium;
import de.fivethree.immoapps.backend.domain.checklist.*;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplate;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplateLevel;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplatePruefkriterium;
import de.fivethree.immoapps.backend.domain.inspection.Inspection;
import de.fivethree.immoapps.backend.domain.inspection.InspectionCriteria;
import de.fivethree.immoapps.backend.domain.inspection.InspectionCriteriaPruefkriterium;
import de.fivethree.immoapps.backend.domain.inspection.InspectionResult;
import de.fivethree.immoapps.backend.domain.picto.AdminPicto;
import de.fivethree.immoapps.backend.domain.picto.HausverwalterPicto;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.task.Task;
import de.fivethree.immoapps.backend.domain.task.TaskPruefkriterium;
import de.fivethree.immoapps.backend.domain.task.TaskScheduleOption;
import de.fivethree.immoapps.backend.domain.user.AdditionalUserInfo;
import de.fivethree.immoapps.backend.domain.user.PushMessage;
import de.fivethree.immoapps.backend.domain.user.Role;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.model.payload.req.property.UpdatePropertyRequest;
import de.fivethree.immoapps.backend.model.payload.req.user.UpdateUserRequest;
import de.fivethree.immoapps.backend.model.payload.res.checklist.ChecklistLevelRep;
import de.fivethree.immoapps.backend.model.payload.res.checklist.ChecklistPruefKriteriumCategoryRep;
import de.fivethree.immoapps.backend.model.payload.res.checklist.ChecklistPruefkriteriumRep;
import de.fivethree.immoapps.backend.model.payload.res.checklist.ChecklistRep;
import de.fivethree.immoapps.backend.model.payload.res.checklist.app.ChecklistAppRep;
import de.fivethree.immoapps.backend.model.payload.res.checklist.app.ChecklistLevelAppRep;
import de.fivethree.immoapps.backend.model.payload.res.checklist.app.ChecklistPruefkriteriumAppRep;
import de.fivethree.immoapps.backend.model.payload.res.common.Base64ImageRep;
import de.fivethree.immoapps.backend.model.payload.res.common.ImageRep;
import de.fivethree.immoapps.backend.model.payload.res.common.UploadFileResponse;
import de.fivethree.immoapps.backend.model.payload.res.inspection.InspectionCriteriaRep;
import de.fivethree.immoapps.backend.model.payload.res.inspection.InspectionRep;
import de.fivethree.immoapps.backend.model.payload.res.inspection.InspectionResultRep;
import de.fivethree.immoapps.backend.model.payload.res.inspection.app.*;
import de.fivethree.immoapps.backend.model.payload.res.property.GetPropertyResponse;
import de.fivethree.immoapps.backend.model.payload.res.property.app.GetHausverwalterAppResponse;
import de.fivethree.immoapps.backend.model.payload.res.property.app.GetPropertyWithAllDetailsAndItsUsersResponse;
import de.fivethree.immoapps.backend.model.payload.res.property.app.GetPropertyWithAllDetailsResponse;
import de.fivethree.immoapps.backend.model.payload.res.task.TaskRep;
import de.fivethree.immoapps.backend.model.payload.res.task.TaskScheduleOptionRep;
import de.fivethree.immoapps.backend.model.payload.res.user.GetAdditionalUserInfoResponse;
import de.fivethree.immoapps.backend.model.payload.res.user.GetHausverwalterResponse;
import de.fivethree.immoapps.backend.model.payload.res.user.GetUserResponse;
import de.fivethree.immoapps.backend.model.payload.res.user.PushNotificationRep;
import de.fivethree.immoapps.backend.security.SecurityFacade;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class ModelMapper {

    public static List<PushNotificationRep> mapPushnotifications(Collection<PushMessage> pushMessages) {
        List<PushNotificationRep> ret = new ArrayList<>();

        for (PushMessage pushMessage : pushMessages) {
            ret.add(mapPushnotification(pushMessage));
        }

        return ret;
    }

    public static PushNotificationRep mapPushnotification(PushMessage pushMessage) {
        return new PushNotificationRep(pushMessage.getId(), pushMessage.getHeader(), pushMessage.getMessage(),
                mapLocalDateTime(pushMessage.getCreatedDate()), pushMessage.getReadByUser(),
                mapUser(pushMessage.getSender()), pushMessage.getTargetId(), pushMessage.getType());
    }

    public static String mapLocalDateTime(LocalDateTime date) {
        if (date == null) {
            return null;
        }

        return date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
    }

    public static String mapLocalDate(LocalDate date) {
        if (date == null) {
            return null;
        }

        return date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
    }

    public static Set<ChecklistTemplate> mapAdminChecklistTemplatesToChecklistTemplates(
            Collection<AdminChecklistTemplate> adminChecklistTemplates, User hausverwalter) {
        Set<ChecklistTemplate> ret = new HashSet<>();

        for (AdminChecklistTemplate adminChecklistTemplate : adminChecklistTemplates) {
            ret.add(mapAdminChecklistTemplateToChecklistTemplate(adminChecklistTemplate, hausverwalter));
        }

        return ret;
    }

    public static Set<HausverwalterPicto> mapAdminPictosToHausverwalterPictos(
            Collection<AdminPicto> adminPictos, User hausverwalter) {
        Set<HausverwalterPicto> ret = new HashSet<>();

        for (AdminPicto adminPicto : adminPictos) {
            ret.add(mapAdminPictoToHausverwalterPicto(adminPicto, hausverwalter));
        }

        return ret;
    }

    public static HausverwalterPicto mapAdminPictoToHausverwalterPicto(AdminPicto adminPicto, User hausverwalter) {
        if (adminPicto == null) {
            return null;
        }

        return new HausverwalterPicto(adminPicto.getName(), adminPicto.getType(),
                adminPicto.getData(), hausverwalter);
    }

    public static ChecklistTemplate mapAdminChecklistTemplateToChecklistTemplate(
            AdminChecklistTemplate adminChecklistTemplate, User hausverwalter) {
        ChecklistTemplate ret = new ChecklistTemplate(adminChecklistTemplate.getName(),
                adminChecklistTemplate.getDefaultChecklist());
        ret.setHausverwalter(hausverwalter);

        for (AdminChecklistTemplateLevel adminLevel : adminChecklistTemplate.getLevels()) {
            ChecklistTemplateLevel level = new ChecklistTemplateLevel(adminLevel.getName());

            for (AdminChecklistTemplatePruefkriterium adminPruefkriterium : adminLevel.getPruefkriterien()) {
                ChecklistTemplatePruefkriterium pruefkriterium = new ChecklistTemplatePruefkriterium(adminPruefkriterium.getName(),
                        adminPruefkriterium.getCategory(), mapAdminPictoToHausverwalterPicto(adminPruefkriterium.getPicto(), hausverwalter));

                pruefkriterium.setLevel(level);
                level.getPruefkriterien().add(pruefkriterium);
            }

            level.setChecklistTemplate(ret);
            ret.getLevels().add(level);
        }
        return ret;
    }

    public static InspectionCriteriaPruefkriterium mapTaskPruefkriteriumToInspectionPruefkriterium(TaskPruefkriterium pruefkriterium, InspectionCriteria inspectionCriteria) {
        return new InspectionCriteriaPruefkriterium(pruefkriterium.getName(), pruefkriterium.getCategory(), pruefkriterium.getPicto(), inspectionCriteria);
    }

    public static InspectionCriteriaPruefkriterium mapInspectionPruefkriteriumToInspectionPruefkriterium(InspectionCriteriaPruefkriterium pruefkriterium, InspectionCriteria inspectionCriteria) {
        return new InspectionCriteriaPruefkriterium(pruefkriterium.getName(), pruefkriterium.getCategory(), pruefkriterium.getPicto(), inspectionCriteria);
    }

    public static InspectionCriteriaPruefkriterium mapChecklistPruefkriteriumToInspectionPruefkriterium(ChecklistPruefkriterium pruefkriterium, InspectionCriteria inspectionCriteria) {
        return new InspectionCriteriaPruefkriterium(pruefkriterium.getName(), pruefkriterium.getCategory(), pruefkriterium.getPicto(), inspectionCriteria);
    }

    public static TaskPruefkriterium mapChecklistPruefkriteriumToTaskPruefkriterium(ChecklistPruefkriterium pruefkriterium, Task task) {
        return new TaskPruefkriterium(pruefkriterium.getName(), pruefkriterium.getCategory(), pruefkriterium.getPicto(), task);
    }

    public static List<Checklist> mapChecklistTemplatesToChecklists(Collection<ChecklistTemplate> checklistTemplates, Property property) {
        List<Checklist> ret = new ArrayList<>();

        for (ChecklistTemplate checklistTemplate : checklistTemplates) {
            ret.add(mapChecklistTemplateToChecklist(checklistTemplate, property));
        }

        return ret;
    }

    public static Checklist mapChecklistTemplateToChecklist(ChecklistTemplate checklistTemplate, Property property) {
        Checklist ret = new Checklist(checklistTemplate.getName());
        ret.setProperty(property);

        for (ChecklistTemplateLevel templateLevel : checklistTemplate.getLevels()) {
            ChecklistLevel level = new ChecklistLevel(templateLevel.getName());

            for (ChecklistTemplatePruefkriterium templateKriterium : templateLevel.getPruefkriterien()) {
                ChecklistPruefkriterium pruefkriterium = new ChecklistPruefkriterium(templateKriterium.getName(),
                        templateKriterium.getCategory(), templateKriterium.getPicto());

                pruefkriterium.setLevel(level);
                level.getPruefkriterien().add(pruefkriterium);
            }

            level.setChecklist(ret);
            ret.getLevels().add(level);
        }

        return ret;
    }

    public static List<ChecklistPruefKriteriumCategoryRep> mapPruefkriteriumsCategories(Collection<PruefkriteriumCategory> categories) {
        List<ChecklistPruefKriteriumCategoryRep> ret = new ArrayList<>();

        for (PruefkriteriumCategory category : categories) {
            ret.add(mapPruefkriteriumsCategory(category));
        }

        return ret;
    }

    public static ChecklistPruefKriteriumCategoryRep mapPruefkriteriumsCategory(IChecklistPruefKriteriumCategory category) {
        return new ChecklistPruefKriteriumCategoryRep(category.getId(), category.getName());
    }


    public static List<TaskScheduleOptionRep> mapTaskScheduleOptions(Collection<TaskScheduleOption> options) {
        List<TaskScheduleOptionRep> ret = new ArrayList<>();

        for (TaskScheduleOption option : options) {
            ret.add(mapTaskScheduleOption(option));
        }

        return ret;
    }

    public static TaskScheduleOptionRep mapTaskScheduleOption(TaskScheduleOption option) {
        return new TaskScheduleOptionRep(option.getId(), option.getName(), option.getDescription());
    }

    public static List<ChecklistRep> mapChecklists(Collection<? extends IChecklistTemplate> checklists) {
        List<ChecklistRep> ret = new ArrayList<>();

        for (IChecklistTemplate checklist : checklists) {
            ret.add(mapChecklist(checklist));
        }

        return ret;
    }

    public static List<ChecklistAppRep> mapChecklistsWithAllDetails(Collection<? extends IChecklistTemplate> checklists) {
        List<ChecklistAppRep> ret = new ArrayList<>();

        for (IChecklistTemplate checklist : checklists) {
            ret.add(mapChecklistWithAllDetails(checklist));
        }

        return ret;
    }


    public static ChecklistRep mapChecklist(IChecklistTemplate checklist) {
        return new ChecklistRep(checklist.getId(), checklist.getName(), checklist.getDefaultChecklist(),
                mapChecklistLevels(checklist.getLevels()));
    }

    public static ChecklistAppRep mapChecklistWithAllDetails(IChecklistTemplate checklist) {
        return new ChecklistAppRep(checklist.getId(), checklist.getName(), checklist.getDefaultChecklist(),
                mapChecklistLevelsWithAllDetails(checklist.getLevels()));
    }

    public static List<ChecklistLevelRep> mapChecklistLevels(Collection<? extends IChecklistLevel> levels) {
        List<ChecklistLevelRep> ret = new ArrayList<>();

        for (IChecklistLevel level : levels) {
            ret.add(mapChecklistLevel(level));
        }

        return ret;
    }

    public static List<ChecklistLevelAppRep> mapChecklistLevelsWithAllDetails(Collection<? extends IChecklistLevel> levels) {
        List<ChecklistLevelAppRep> ret = new ArrayList<>();

        for (IChecklistLevel level : levels) {
            ret.add(mapChecklistLevelWithAllDetails(level));
        }

        return ret;
    }

    public static ChecklistLevelRep mapChecklistLevel(IChecklistLevel level) {
        return new ChecklistLevelRep(level.getId(), level.getName(), mapPruefkriterien(level.getPruefkriterien()));
    }

    public static ChecklistLevelAppRep mapChecklistLevelWithAllDetails(IChecklistLevel level) {
        return new ChecklistLevelAppRep(level.getId(), level.getName(), mapPruefkriterienWithAllDetails(level.getPruefkriterien()));
    }

    public static List<ChecklistPruefkriteriumRep> mapPruefkriterien(Collection<? extends IChecklistPruefkriterium> kriterien) {
        List<ChecklistPruefkriteriumRep> ret = new ArrayList<>();

        for (IChecklistPruefkriterium adminChecklistPruefkriterium : kriterien) {
            ret.add(mapPruefkriterium(adminChecklistPruefkriterium));
        }

        return ret;
    }

    public static List<ChecklistPruefkriteriumAppRep> mapPruefkriterienWithAllDetails(Collection<? extends IChecklistPruefkriterium> kriterien) {
        List<ChecklistPruefkriteriumAppRep> ret = new ArrayList<>();

        for (IChecklistPruefkriterium adminChecklistPruefkriterium : kriterien) {
            ret.add(mapPruefkriteriumForApp(adminChecklistPruefkriterium));
        }

        return ret;
    }

    public static ChecklistPruefkriteriumRep mapPruefkriterium(IChecklistPruefkriterium kriterium) {
        return new ChecklistPruefkriteriumRep(kriterium.getId(), kriterium.getName(),
                mapPruefkriteriumsCategory(kriterium.getCategory()), mapImage(kriterium.getPicto()));
    }

    public static ChecklistPruefkriteriumAppRep mapPruefkriteriumForApp(IChecklistPruefkriterium kriterium) {
        return new ChecklistPruefkriteriumAppRep(kriterium.getId(), kriterium.getName(),
                mapPruefkriteriumsCategory(kriterium.getCategory()), mapImageToBase64Image(kriterium.getPicto()));
    }


    public static GetPropertyResponse mapProperty(Property property) {
        return new GetPropertyResponse(property.getId(), property.getName(), property.getCity(),
                property.getZip(), property.getStreetAndNo());
    }

    public static GetPropertyWithAllDetailsResponse mapPropertyWithDetails(Property property) {
        return new GetPropertyWithAllDetailsResponse(property.getId(), property.getName(), property.getCity(),
                property.getZip(), property.getStreetAndNo(), mapChecklistsWithAllDetails(property.getChecklists()));
    }

    public static GetPropertyWithAllDetailsAndItsUsersResponse mapPropertyWithDetailsAndItsUser(Property property) {
        return new GetPropertyWithAllDetailsAndItsUsersResponse(property.getId(), property.getName(), property.getCity(),
                property.getZip(), property.getStreetAndNo(), mapChecklistsWithAllDetails(property.getChecklists()),
                mapUsers(property.getUsers()));
    }

    public static List<GetPropertyResponse> mapProperties(Collection<Property> properties) {
        List<GetPropertyResponse> ret = new ArrayList<>();

        for (Property property : properties) {
            ret.add(mapProperty(property));
        }

        return ret;
    }

    public static List<GetPropertyWithAllDetailsAndItsUsersResponse> mapPropertiesWithDetailsAndItsUsers(Collection<Property> properties) {
        List<GetPropertyWithAllDetailsAndItsUsersResponse> ret = new ArrayList<>();

        for (Property property : properties) {
            ret.add(mapPropertyWithDetailsAndItsUser(property));
        }

        return ret;
    }

    public static List<GetPropertyWithAllDetailsResponse> mapPropertiesWithDetails(Collection<Property> properties) {
        List<GetPropertyWithAllDetailsResponse> ret = new ArrayList<>();

        for (Property property : properties) {
            ret.add(mapPropertyWithDetails(property));
        }

        return ret;
    }

    public static List<GetHausverwalterResponse> mapHausverwalters(Collection<User> users) {
        List<GetHausverwalterResponse> ret = new ArrayList<>();

        for (User user : users) {
            ret.add(mapHausverwalter(user));
        }

        return ret;
    }

    public static GetHausverwalterAppResponse mapAppHausverwalter(User user) {
        return new GetHausverwalterAppResponse(user.getId(), user.getFirstname(), user.getLastname(), user.getEmail(),
                mapAdditionalUserInfo(user.getAdditionalUserInfo()));

    }

    public static GetHausverwalterResponse mapHausverwalter(User user) {
        String currentRole = null;

        for (Role role : user.getRoles()) {
            currentRole = role.getName().name();
        }

        return new GetHausverwalterResponse(user.getId(), user.getFirstname(), user.getLastname(), user.getEmail(),
                currentRole, mapAdditionalUserInfo(user.getAdditionalUserInfo()));

    }

    private static GetAdditionalUserInfoResponse mapAdditionalUserInfo(AdditionalUserInfo additionalUserInfo) {
        if (additionalUserInfo == null) {
            return null;
        }

        return new GetAdditionalUserInfoResponse(
                additionalUserInfo.getId(),
                additionalUserInfo.getCompanyName(),
                additionalUserInfo.getCity(),
                additionalUserInfo.getZip(),
                additionalUserInfo.getStreetAndNo(),
                additionalUserInfo.getTelephone(),
                additionalUserInfo.getWebsite(),
                additionalUserInfo.getFax());
    }

    public static GetUserResponse mapUser(User user) {
        if (user == null) {
            return null;
        }

        String currentRole = null;

        for (Role role : user.getRoles()) {
            currentRole = role.getName().name();
        }

        return new GetUserResponse(user.getId(), user.getFirstname(), user.getLastname(), user.getEmail(),
                currentRole, user.getDeleted());
    }

    public static List<GetUserResponse> mapUsers(Collection<User> users) {
        List<GetUserResponse> ret = new ArrayList<>();

        for (User user : users) {
            ret.add(mapUser(user));
        }

        return ret;
    }

    public static UploadFileResponse mapFileUpload(IImageEntity picto, long fileSize) {
        return new UploadFileResponse(picto.getId(), picto.getName(), picto.getUrl(), picto.getType(), fileSize);
    }

    public static void fillPropertyInfo(Property propertyToFill, UpdatePropertyRequest updatePropertyRequest) {
        propertyToFill.setName(updatePropertyRequest.getName());
        propertyToFill.setCity(updatePropertyRequest.getCity());
        propertyToFill.setStreetAndNo(updatePropertyRequest.getStreetAndNo());
        propertyToFill.setZip(updatePropertyRequest.getZip());
    }

    public static void fillUserInfo(User usertoEdit, UpdateUserRequest updateUserRequest) {
        usertoEdit.setEmail(updateUserRequest.getEmail());
        usertoEdit.setFirstname(updateUserRequest.getFirstname());
        usertoEdit.setLastname(updateUserRequest.getLastname());
    }

    public static void fillHausverwalterInfo(User usertoEdit, UpdateUserRequest updateUserRequest) {
        usertoEdit.setEmail(updateUserRequest.getEmail());
        usertoEdit.setFirstname(updateUserRequest.getFirstname());
        usertoEdit.setLastname(updateUserRequest.getLastname());

        if (updateUserRequest.getUpdateAdditionalInfo() != null) {
            if (usertoEdit.getAdditionalUserInfo() == null) {
                //there is no additional info available yet
                AdditionalUserInfo additionalUserInfo = new AdditionalUserInfo(
                        usertoEdit,
                        updateUserRequest.getUpdateAdditionalInfo().getCompanyName(),
                        updateUserRequest.getUpdateAdditionalInfo().getCity(),
                        updateUserRequest.getUpdateAdditionalInfo().getZip(),
                        updateUserRequest.getUpdateAdditionalInfo().getStreetAndNo(),
                        updateUserRequest.getUpdateAdditionalInfo().getTelephone(),
                        updateUserRequest.getUpdateAdditionalInfo().getWebsite(),
                        updateUserRequest.getUpdateAdditionalInfo().getFax()
                );

                usertoEdit.setAdditionalUserInfo(additionalUserInfo);
            } else {
                //change the existing information
                AdditionalUserInfo additionalUserInfo = usertoEdit.getAdditionalUserInfo();
                additionalUserInfo.setCompanyName(updateUserRequest.getUpdateAdditionalInfo().getCompanyName());
                additionalUserInfo.setCity(updateUserRequest.getUpdateAdditionalInfo().getCity());
                additionalUserInfo.setZip(updateUserRequest.getUpdateAdditionalInfo().getZip());
                additionalUserInfo.setStreetAndNo(updateUserRequest.getUpdateAdditionalInfo().getStreetAndNo());
                additionalUserInfo.setTelephone(updateUserRequest.getUpdateAdditionalInfo().getTelephone());
                additionalUserInfo.setWebsite(updateUserRequest.getUpdateAdditionalInfo().getWebsite());
                additionalUserInfo.setFax(updateUserRequest.getUpdateAdditionalInfo().getFax());
            }
        }

    }

    public static List<TaskRep> mapTasks(Collection<Task> tasks, SecurityFacade securityFacade) {
        List<TaskRep> ret = new ArrayList<>();

        for (Task task : tasks) {
            ret.add(mapTask(task, securityFacade));
        }

        return ret;
    }

    public static TaskRep mapTask(Task task, SecurityFacade securityFacade) {
        boolean valid = true;
        String reason = null;

        if (task.getAuftragGeber().getDeleted() != null
                && task.getAuftragGeber().getDeleted() == true) {
            valid = false;
            reason = "Der Ersteller / Die Erstellering der Aufgabe ist gelöscht.";
        } else if (task.getUser().getDeleted() != null && task.getUser().getDeleted() == true) {
            valid = false;
            reason = "Die Zielperson der Aufgabe ist gelöscht.";
        } else if (!securityFacade.checkUserPropertyAccess(task.getProperty(), task.getUser())) {
            valid = false;
            reason = "Die Zielperson der Aufgabe hat keine Berechtigung, um aus diese Immobilie zuzugreifen.";
        }

        return new TaskRep(task.getId(), task.getName(), task.getActive(),
                mapTaskScheduleOption(task.getScheduleOption()), mapPruefkriterien(task.getPruefkriterien()),
                task.getProperty().getId(), task.getUser().getId(), task.getAuftragGeber().getId(),
                mapLocalDate(task.getStartDate()), mapLocalDateTime(task.getLastScheduled()), valid, reason);
    }

    public static List<InspectionRep> mapInspections(Collection<Inspection> inspections) {
        List<InspectionRep> ret = new ArrayList<>();

        for (Inspection inspection : inspections) {
            ret.add(mapInspection(inspection));
        }

        return ret;
    }

    public static List<InspectionAppHistoryRep> mapAppHistoryInspections(Collection<Inspection> inspections) {
        List<InspectionAppHistoryRep> ret = new ArrayList<>();

        for (Inspection inspection : inspections) {
            ret.add(mapAppHistoryInspection(inspection));
        }

        return ret;
    }

    public static List<InspectionAppRep> mapAppInspections(Collection<Inspection> inspections) {
        List<InspectionAppRep> ret = new ArrayList<>();

        for (Inspection inspection : inspections) {
            ret.add(mapAppInspection(inspection));
        }

        return ret;
    }

    public static InspectionRep mapInspection(Inspection inspection) {
        return new InspectionRep(inspection.getId(), inspection.getDone(), inspection.getUser().getId(),
                mapInspectionCriterias(inspection.getInspectionCriterias()),
                mapInspectionResults(inspection.getInspectionResults()),
                inspection.getProperty().getId(),
                inspection.getAuftragGeber().getId());
    }

    public static InspectionAppHistoryRep mapAppHistoryInspection(Inspection inspection) {
        return new InspectionAppHistoryRep(inspection.getId(), inspection.getDone() == null ? false : inspection.getDone().booleanValue(), inspection.getUser().getId(),
                mapInspectionAppCriterias(inspection.getInspectionCriterias()),
                mapInspectionAppHistoryResults(inspection.getInspectionResults()),
                inspection.getProperty().getId());
    }

    public static InspectionAppRep mapAppInspection(Inspection inspection) {
        return new InspectionAppRep(inspection.getId(), inspection.getDone() == null ? false : inspection.getDone().booleanValue(), inspection.getUser().getId(),
                mapInspectionAppCriterias(inspection.getInspectionCriterias()),
                mapInspectionAppResults(inspection.getInspectionResults()),
                inspection.getProperty().getId());
    }

    public static List<InspectionCriteriaRep> mapInspectionCriterias(Collection<InspectionCriteria> inspectionCriterias) {
        List<InspectionCriteriaRep> ret = new ArrayList<>();
        for (InspectionCriteria inspectionCriteria : inspectionCriterias) {
            ret.add(mapInspectionCriteria(inspectionCriteria));
        }
        return ret;
    }

    public static List<InspectionCriteriaAppRep> mapInspectionAppCriterias(Collection<InspectionCriteria> inspectionCriterias) {
        List<InspectionCriteriaAppRep> ret = new ArrayList<>();
        for (InspectionCriteria inspectionCriteria : inspectionCriterias) {
            ret.add(mapInspectionAppCriteria(inspectionCriteria));
        }
        return ret;
    }

    public static List<InspectionResultRep> mapInspectionResults(Collection<InspectionResult> inspectionResults) {
        List<InspectionResultRep> ret = new ArrayList<>();
        for (InspectionResult inspectionResult : inspectionResults) {
            ret.add(mapInspectionResult(inspectionResult));
        }
        return ret;
    }

    public static List<InspectionResultAppRep> mapInspectionAppResults(Collection<InspectionResult> inspectionResults) {
        List<InspectionResultAppRep> ret = new ArrayList<>();
        for (InspectionResult inspectionResult : inspectionResults) {
            ret.add(mapInspectionAppResult(inspectionResult));
        }
        return ret;
    }

    public static List<InspectionResultAppHistoryRep> mapInspectionAppHistoryResults(Collection<InspectionResult> inspectionResults) {
        List<InspectionResultAppHistoryRep> ret = new ArrayList<>();
        for (InspectionResult inspectionResult : inspectionResults) {
            ret.add(mapInspectionAppHistoryResult(inspectionResult));
        }
        return ret;
    }

    public static InspectionCriteriaRep mapInspectionCriteria(InspectionCriteria inspectionCriteria) {
        return new InspectionCriteriaRep(inspectionCriteria.getId(),
                mapPruefkriterium(inspectionCriteria.getPruefkriterium()));
    }

    public static InspectionCriteriaAppRep mapInspectionAppCriteria(InspectionCriteria inspectionCriteria) {
        return new InspectionCriteriaAppRep(inspectionCriteria.getId(),
                mapPruefkriteriumForApp(inspectionCriteria.getPruefkriterium()));
    }

    public static InspectionResultRep mapInspectionResult(InspectionResult inspectionResult) {
        return new InspectionResultRep(inspectionResult.getId(), inspectionResult.getResult(),
                mapPruefkriterium(inspectionResult.getPruefkriterium()),
                inspectionResult.getDescription(),
                mapImages(inspectionResult.getImages()));
    }

    public static InspectionResultAppHistoryRep mapInspectionAppHistoryResult(InspectionResult inspectionResult) {
        return new InspectionResultAppHistoryRep(inspectionResult.getId(), inspectionResult.getResult(),
                mapPruefkriteriumForApp(inspectionResult.getPruefkriterium()),
                inspectionResult.getDescription(),
                mapBase64ImagesLinks(inspectionResult.getImages()),
                mapUser(inspectionResult.getAssignedUser()));
    }

    public static InspectionResultAppRep mapInspectionAppResult(InspectionResult inspectionResult) {
        return new InspectionResultAppRep(inspectionResult.getId(), inspectionResult.getResult(),
                mapPruefkriteriumForApp(inspectionResult.getPruefkriterium()),
                inspectionResult.getDescription(),
                mapImagesToBase64Images(inspectionResult.getImages()),
                mapUser(inspectionResult.getAssignedUser()));
    }

    public static List<Base64ImageRep> mapImagesToBase64Images(Collection<? extends IImageEntity> images) {
        if (images == null || images.size() == 0) {
            return null;
        }

        List<Base64ImageRep> ret = new ArrayList<>();

        for (IImageEntity image : images) {
            ret.add(mapImageToBase64Image(image));
        }

        return ret;
    }

    public static Base64ImageRep mapImageToBase64Image(IImageEntity image) {
        if (image == null) {
            return null;
        }

        return new Base64ImageRep(image.getId(), image.getName(), image.getType(),
                Base64.getEncoder().encodeToString(image.getData()));
    }

    public static List<ImageRep> mapImages(Collection<? extends IImageEntity> images) {
        if (images == null || images.size() == 0) {
            return null;
        }

        List<ImageRep> ret = new ArrayList<>();

        for (IImageEntity image : images) {
            ret.add(mapImage(image));
        }

        return ret;
    }

    public static ImageRep mapImage(IImageEntity image) {
        if (image == null) {
            return null;
        }

        return new ImageRep(image.getId(), image.getName(), image.getType(), image.getUrl());
    }

    public static List<ImageRep> mapBase64ImagesLinks(Collection<? extends IBase64AndImageEntity> images) {
        if (images == null || images.size() == 0) {
            return null;
        }

        List<ImageRep> ret = new ArrayList<>();

        for (IBase64AndImageEntity image : images) {
            ret.add(mapBase64ImageLink(image));
        }

        return ret;
    }

    public static ImageRep mapBase64ImageLink(IBase64AndImageEntity image) {
        if (image == null) {
            return null;
        }

        return new ImageRep(image.getId(), image.getName(), image.getType(), image.getBase64Url());
    }
}
