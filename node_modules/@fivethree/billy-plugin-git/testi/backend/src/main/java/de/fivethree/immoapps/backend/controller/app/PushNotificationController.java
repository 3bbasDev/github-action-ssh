package de.fivethree.immoapps.backend.controller.app;

import de.fivethree.immoapps.backend.domain.user.PushMessage;
import de.fivethree.immoapps.backend.model.payload.req.user.RegisterPushTokenReq;
import de.fivethree.immoapps.backend.model.payload.res.user.GetPushNotificationsRes;
import de.fivethree.immoapps.backend.service.PushnotificationService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Set;

@RestController
@RequestMapping("/immoapps/appapi/push")
public class PushNotificationController {
    @Autowired
    private PushnotificationService pushnotificationService;

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @PostMapping("/register")
    public ResponseEntity<?> registerPushToken(@RequestBody @Valid @NotNull RegisterPushTokenReq registerPushTokenReq) {
        this.pushnotificationService.registerPushToken(registerPushTokenReq.getToken());
        return ResponseEntity.ok().build();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @PostMapping("/unregister")
    public ResponseEntity<?> unregisterPushTokens() {
        this.pushnotificationService.unregisterForPushNotifications();
        return ResponseEntity.ok().build();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @GetMapping("/messages")
    public ResponseEntity<?> getMessages() {
        Set<PushMessage> messages = this.pushnotificationService.getPushNotifications();
        return ResponseEntity.ok(new GetPushNotificationsRes(ModelMapper.mapPushnotifications(messages)));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @GetMapping("/messages/{id}")
    public ResponseEntity<?> markMessageAsRead(@PathVariable("id") Long id) {
        return ResponseEntity.ok(ModelMapper.mapPushnotification(this.pushnotificationService.readMessage(id)));
    }

    @CrossOrigin
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    @DeleteMapping("/messages/{id}")
    public ResponseEntity<?> deleteMessage(@PathVariable("id") Long id) {
        Set<PushMessage> messages = this.pushnotificationService.deletePushNotification(id);
        return ResponseEntity.ok(new GetPushNotificationsRes(ModelMapper.mapPushnotifications(messages)));
    }
}
