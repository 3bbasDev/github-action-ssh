import { Store } from '@services/store/store.service';
import { DataService } from '@services/data.service';
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { Observable, zip } from 'rxjs';
import { Inspection, User, Property } from 'shared';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { NavigationExtras, Router } from '@angular/router';
import { map } from 'rxjs/operators';

@Component({
  selector: 'app-checks',
  templateUrl: './checks.page.html',
  styleUrls: ['./checks.page.scss'],
})
export class ChecksPage implements OnInit, AfterViewInit {

  public inspections: Observable<Inspection[]>;
  public searchInput = '';
  dataSource = new MatTableDataSource<Inspection>();
  displayedColumns: string[] = ['property', 'userId', 'criterias', 'results', 'done'];
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;
  users: Observable<User[]>;
  properties: Observable<Property[]>;


  onRowClicked(event) {
    this.navigateToInspection(event.id);
  }

  applySearchFilter(event) {
    this.dataSource.filter = event.detail.value.trim().toLowerCase();
  }

  onSearchbarClose() {
    this.dataSource.filter = '';
  }

  constructor(private router: Router, private data: DataService, private store: Store) { }

  ngOnInit() {
    const users = this.store.select('users');
    const mitarbeiter = this.store.select('mitarbeiter');
    this.users = zip(users, mitarbeiter)
      .pipe(
        map(data => [...data[0] || [], ...data[1] || []])
      );

    this.properties = this.store.select('properties');
  }

  ngAfterViewInit(): void {
    this.paginator._intl.itemsPerPageLabel = 'Immobilien pro Seite';
    this.paginator._intl.firstPageLabel = 'Erste Seite';
    this.paginator._intl.nextPageLabel = 'NÃ¤chste Seite';
    this.paginator._intl.previousPageLabel = 'Vorherige Seite';
    this.paginator._intl.lastPageLabel = 'Letzte Seite';
    this.paginator._intl.getRangeLabel = (page: number, pageSize: number, length: number) => {
      const startIndex = page * pageSize;
      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
      return `${startIndex + 1} - ${endIndex} von ${length}`;
    };
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }


  ionViewWillEnter() {
    this.inspections = this.data.loadInspections();
    this.inspections.subscribe(inspections => this.dataSource.data = inspections);
  }

  navigateToInspection(id) {
    this.router.navigate(['inspections', id]);
  }

  createInspection() {
    this.router.navigate(['inspections/create']);
  }

}
