import { FivLoadingProgressBar } from '@fivethree/core';
import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { User, Checklist, CreateChecklistPayload } from 'shared';
import { Router } from '@angular/router';
import { ApiService } from '../../services/api.service';
import { Store } from '../../services/store/store.service';
import { DataService } from '../../services/data.service';
import { NavController } from '@ionic/angular';
import { ToastService } from '../../services/toast.service';
import { Observable } from 'rxjs';
import { flatMap } from 'rxjs/operators';

@Component({
  selector: 'app-checklist-create',
  templateUrl: './checklist-create.page.html',
  styleUrls: ['./checklist-create.page.scss'],
})
export class ChecklistCreatePage implements OnInit {
  checklist: FormGroup;
  currentUser: User;

  templates: Observable<Checklist[]>;

  constructor(public formBuilder: FormBuilder,
    public api: ApiService,
    public router: Router,
    public data: DataService,
    public store: Store,
    public navCtrl: NavController,
    public toast: ToastService) {
    this.setupForm();
  }

  ionViewWillEnter() {
    this.templates = this.data.loadAdminChecklists();
    this.store.select('user').subscribe(user => {
      this.currentUser = user;
      if (!user) {
        this.onError();
      }
    });
  }

  ngOnInit() {

  }

  setupForm() {
    this.checklist = this.formBuilder.group({
      name: ['', [Validators.minLength(4), Validators.required]],
      template: [''],
      default: [false],
    });
  }

  checklistCreateComplete(param: any) {
    this.router.navigate(['checklists', param.id]);
  }


  createChecklist(bar: FivLoadingProgressBar) {
    console.log('create checklist', this.currentUser, this.currentUser.role);
    const hasTemplate = !!this.checklist.value.template;
    if (!hasTemplate) {
      bar.load();
      const checklist: CreateChecklistPayload = {
        name: this.checklist.value.name,
        defaultChecklist: this.checklist.value.default
      };
      if (this.currentUser.role === 'ROLE_ADMIN') {
        this.api.createAdminChecklist(checklist).subscribe(res => {
          this.data.reloadAdminChecklists();
          bar.complete(res);
        }, err => {
          this.onCreateError();
          bar.unload();
        });
      } else {
        this.api.createChecklist(checklist).subscribe(res => {
          this.data.reloadChecklists();
          bar.complete(res);
        }, err => {
          this.onCreateError();
          bar.unload();
        });
      }
    } else {
      bar.load();
      const payload: CreateChecklistPayload = {
        name: this.checklist.value.name,
        defaultChecklist: this.checklist.value.default
      };
      this.api.createChecklistFromTemplate(this.checklist.value.template.id)
        .pipe(
          flatMap(checklist => this.api.updateChecklistTemplate(checklist.id, payload))
        )
        .subscribe(res => {
          this.data.reloadChecklists();
          bar.complete(res);
        }, err => {
          console.log(err);
          this.onCreateError();
          bar.unload();
        });
    }
  }

  abort() {
    this.navCtrl.back();
  }

  onError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Zurück zur Übersicht').then(toast => {
      if (toast.role === 'cancel') {
        if (this.currentUser.role === 'ROLE_ADMIN') {
          this.navCtrl.navigateBack('admin-checklists');
        } else {
          this.navCtrl.navigateBack('checklists');
        }
      }
    });
  }
  onCreateError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Erneut versuchen').then(toast => {
      if (toast.role === 'cancel') {
      }
    });
  }

}
