import { FivLoadingProgressBar } from '@fivethree/core';
import { ActivatedRoute, NavigationExtras, Router } from '@angular/router';
import { Component, OnInit, ViewChild } from '@angular/core';
import { map, tap, first, catchError, repeat } from 'rxjs/operators';
import { Observable, of, zip } from 'rxjs';
import { User, Property } from 'shared';
import { PopoverController, NavController, IonSelect, AlertController } from '@ionic/angular';
import { DataService } from '../../services/data.service';
import { UserService } from '../../services/user.service';
import { ApiService } from '../../services/api.service';
import { UserPropertyActionsComponent } from '../../components/user-property-actions/user-property-actions.component';
import { UserPropertyAddComponent } from '../../components/user-property-add/user-property-add.component';
import { ToastService } from '../../services/toast.service';

@Component({
  selector: 'app-user',
  templateUrl: './user.page.html',
  styleUrls: ['./user.page.scss'],
})
export class UserPage {

  user: Observable<User>;
  properties: Observable<Property[]>;
  selectedProperties: number[] = [];
  allProperties: Observable<Property[]>;

  @ViewChild('bar') bar: FivLoadingProgressBar;
  @ViewChild('bar2') bar2: FivLoadingProgressBar;

  @ViewChild('select') select: IonSelect;

  constructor(public route: ActivatedRoute,
    public dataService: DataService,
    public userService: UserService,
    public router: Router,
    public popoverCtrl: PopoverController,
    private alertController: AlertController,
    public api: ApiService,
    public toast: ToastService,
    public navCtrl: NavController) {

  }

  ionViewWillEnter() {

    const id = this.route.snapshot.paramMap.get('id');
    this.user = this.api.getUser(id);

  }

  ionViewDidLeave() {
  }

  navigateToProperty(id) {
    this.router.navigate(['properties', id]);
  }

  async presentUserPropertyActions(ev: any, prop: Property, user: User) {
    const popover = await this.popoverCtrl.create({
      component: UserPropertyActionsComponent,
      event: ev,
      translucent: false,
      showBackdrop: false,
    });

    popover.componentProps = { controller: popover };

    popover.onDidDismiss().then(event => {
      if (event.role == 'property') {
        this.navigateToProperty(prop.id);
      }
      if (event.role == 'delete') {
        this.deletePropertyFromUser(prop, user);
      }
    });


    return await popover.present();
  }

  async addPropertyToUser(ev: any, user: User) {
    const popover = await this.popoverCtrl.create({
      component: UserPropertyAddComponent,
      event: ev,
      translucent: false,
      showBackdrop: false,
    });
    const properties = await this.properties.toPromise();
    popover.componentProps = { controller: popover, userProperties: properties };
    popover.present();
    const event = await popover.onDidDismiss();
    if (event.role === 'add') {
      this.link(user, event.data);
    }
  }

  link(user: User, property: Property) {
    console.log('link', user, property);
    return this.api.linkUserToProperty(user, property)
      .pipe(catchError(err => {
        this.onLinkError(user, property);
        return of([]);
      }));
  }

  deletePropertyFromUser(property: Property, user: User) {
    console.log('unlink', user, property);
    return this.api.unlinkUserFromProperty(user, property)
      .pipe(
        catchError(err => {
          this.onUnLinkError(user, property);
          return of([]);
        })
      );
  }


  editUser(user) {
    this.router.navigate(['users/edit'], {
      queryParams: {
        user: user.id
      }
    });
  }

  onError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Zurück zu Übersicht').then(toast => {
      if (toast.role === 'cancel') {
        this.navCtrl.navigateBack('users');
      }
    });
  }


  onLinkError(user: User, property: Property) {
    this.toast.presentToast(8000, `Die Immobilie ${property.name} konnte ${user.firstname} ${user.lastname} nicht zugeordnet werden. Sollte der Fehler weiterhin auftreten benchrichtigen Sie bitte inen Administrator.`, 'Erneut versuchen').then(toast => {
      if (toast.role === 'cancel') {
        this.link(user, property);
      }
    });
  }
  onUnLinkError(user: User, property: Property) {
    this.toast.presentToast(8000, `Die Immobilie ${property.name} konnte nicht entfernt werden. Sollte der Fehler weiterhin auftreten benchrichtigen Sie bitte inen Administrator.`, 'Erneut versuchen').then(toast => {
      if (toast.role === 'cancel') {
        this.deletePropertyFromUser(property, user);
      }
    });
  }

  resetPassword(u: User) {
    this.bar2.load();
    this.api.resetPassword(u.id)
      .subscribe(() => {
        this.bar2.complete({});
        this.toast.presentToast(6000, `Das Passwort von ${u.firstname} ${u.lastname} wurde erfolgreich zurückgesetzt.`, 'OK');
      }, err => {
        this.onPasswordResetError(u);
      });
  }

  onPasswordResetError(user: User) {
    this.bar2.unload();
    this.toast.presentToast(8000, `Das Passwort von ${user.firstname} ${user.lastname} konnte nicht zurückgesetzt werden. Sollte der Fehler weiterhin auftreten benchrichtigen Sie bitte inen Administrator.`, 'OK');
  }

  async presentAlertConfirm(u: User) {
    const alert = await this.alertController.create({
      header: 'Passwort von ' + u.firstname + ' ' + u.lastname + ' zurücksetzen?',
      buttons: [
        {
          text: 'Abbrechen',
          role: 'cancel',
          cssClass: 'secondary'
        }, {
          text: 'zurücksetzen',
          handler: () => {
            this.resetPassword(u);
          }
        }
      ]
    });

    await alert.present();
  }

  async confirmDeletion(user: User) {
    const alert = await this.alertController.create({
      header: 'Löschung bestätigen',
      message: `Möchten Sie ${user.firstname} ${user.lastname} wirklich löschen?`,
      buttons: [
        {
          text: 'Abbrechen',
          role: 'cancel',
          cssClass: 'secondary',
          handler: () => {

          }
        }, {
          text: 'Löschen',
          handler: () => {
            this.deleteUser(user);
          }
        }
      ]
    });

    await alert.present();
  }

  deleteUser(user: User) {
    this.api.deleteUser(user.id)
      .subscribe((data) => {
        console.log('delete',data);
        this.router.navigate(['users']);
        this.toast.success(4000, `${user.firstname} ${user.lastname} erfolgreich gelöscht.`, 'OK');
      }, err => {
        this.onError();
      });
  }

}
