import { FivLoadingProgressBar } from '@fivethree/core';
import { NavController } from '@ionic/angular';
import { Router, ActivatedRoute } from '@angular/router';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User, CreateUserPayload, CreateHausverwalterPayload, UpdateHausverwalterPayload } from 'shared';
import { ApiService } from '../../services/api.service';
import { DataService } from '../../services/data.service';
import { Store } from '../../services/store/store.service';
import { map } from 'rxjs/operators';
import { ToastService } from '../../services/toast.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-user-create',
  templateUrl: './user-create.page.html',
  styleUrls: ['./user-create.page.scss'],
})
export class UserCreatePage {

  user: FormGroup;
  currentUser: User;

  edit: User;

  mode: 'EDIT_USER' | 'EDIT_VERWALTER' | 'CREATE_USER' | 'CREATE_VERWALTER';

  constructor(public formBuilder: FormBuilder, public api: ApiService, public router: Router,
    public data: DataService, public store: Store, public route: ActivatedRoute, public toast: ToastService, public navCtrl: NavController) {
    this.setupForm();
  }

  ionViewWillEnter() {
    this.store.select('user').subscribe(user => {
      this.currentUser = user;
      this.mode = user.role === 'ROLE_ADMIN' ? 'CREATE_VERWALTER' : 'CREATE_USER';
      if (this.mode === 'CREATE_VERWALTER') {
        this.setupHausverwalterForm();
        this.user.setValue(
          {
            email: '',
            firstname: '',
            lastname: '',
            role: 'ROLE_HAUSVERWALTER',
            companyName: '',
            city: '',
            zip: '',
            streetAndNo: '',
            telephone: '',
            website: '',
            fax: '',
          });
      } else {
        this.setupForm();
      }

      const u = this.route.snapshot.queryParamMap.get('user');
      if (u) {
        this.api.getUser(u).subscribe(_u => {
          this.edit = _u;
          this.mode = 'EDIT_USER';
          this.setupForm();
          this.user.setValue({ email: _u.email, firstname: _u.firstname, lastname: _u.lastname, role: _u.role });
        });
      }
      const verwalter = this.route.snapshot.queryParamMap.get('verwalter');

      if (verwalter && verwalter !== this.currentUser.id.toString()) {
        this.api.getHausverwalter(verwalter)
          .subscribe(_u => {
            this.edit = _u;
            this.mode = 'EDIT_VERWALTER';
            this.setupHausverwalterForm();
            this.user.setValue(
              {
                email: _u.email,
                firstname: _u.firstname,
                lastname: _u.lastname,
                role: 'ROLE_HAUSVERWALTER',
                companyName: _u.additionalInfo ? _u.additionalInfo.companyName : '',
                city: _u.additionalInfo ? _u.additionalInfo.city : '',
                zip: _u.additionalInfo ? _u.additionalInfo.zip : '',
                streetAndNo: _u.additionalInfo ? _u.additionalInfo.streetAndNo : '',
                telephone: _u.additionalInfo ? _u.additionalInfo.telephone : '',
                website: _u.additionalInfo ? _u.additionalInfo.website : '',
                fax: _u.additionalInfo ? _u.additionalInfo.fax : '',
              });
          });
      } else if (verwalter && verwalter == this.currentUser.id.toString()) {
        this.edit = this.currentUser;
        this.mode = 'EDIT_VERWALTER';
        this.setupHausverwalterForm();
        this.user.setValue(
          {
            email: this.edit.email,
            firstname: this.edit.firstname,
            lastname: this.edit.lastname,
            role: 'ROLE_HAUSVERWALTER',
            companyName: this.edit.additionalInfo ? this.edit.additionalInfo.companyName : '',
            city: this.edit.additionalInfo ? this.edit.additionalInfo.city : '',
            zip: this.edit.additionalInfo ? this.edit.additionalInfo.zip : '',
            streetAndNo: this.edit.additionalInfo ? this.edit.additionalInfo.streetAndNo : '',
            telephone: this.edit.additionalInfo ? this.edit.additionalInfo.telephone : '',
            website: this.edit.additionalInfo ? this.edit.additionalInfo.website : '',
            fax: this.edit.additionalInfo ? this.edit.additionalInfo.fax : '',
          });
      }
    });

  }

  ionViewDidLeave() {
  }

  setupForm() {
    this.user = this.formBuilder.group({
      email: ['', [Validators.email, Validators.required]],
      firstname: ['', [Validators.minLength(2), Validators.required]],
      lastname: ['', [Validators.minLength(2), Validators.required]],
      role: ['', [Validators.required]],
    });
  }
  setupHausverwalterForm() {
    this.user = this.formBuilder.group({
      email: ['', [Validators.email, Validators.required]],
      firstname: ['', [Validators.minLength(2), Validators.required]],
      lastname: ['', [Validators.minLength(2), Validators.required]],
      role: ['', [Validators.required]],
      companyName: [''],
      city: [''],
      zip: [''],
      streetAndNo: [''],
      telephone: [''],
      website: [''],
      fax: [''],
    });
  }

  userCreateComplete() {
    if (this.mode === 'CREATE_USER' || this.mode === 'EDIT_USER') {
      this.router.navigate(['users']);
    }
    if (this.mode === 'CREATE_VERWALTER' || this.mode === 'EDIT_VERWALTER') {
      this.router.navigate(['hausverwalter']);
    }
  }

  createUser(loading: FivLoadingProgressBar) {
    loading.load();

    if (this.mode === 'CREATE_USER') {
      const user: CreateUserPayload = {
        firstname: this.user.value.firstname,
        lastname: this.user.value.lastname,
        email: this.user.value.email,
      };
      this.api.createUser(user, this.user.value.role).subscribe(res => {
        console.log('created user', res);
        loading.complete({});
        this.data.reloadUsers();
      }, err => {
        this.onCreateError(user);
        loading.unload();
      });
      return;
    }
    if (this.mode === 'CREATE_VERWALTER') {
      const user: CreateHausverwalterPayload = {
        firstname: this.user.value.firstname,
        lastname: this.user.value.lastname,
        email: this.user.value.email,
        additionalInfo: {
          companyName: this.user.value.companyName,
          city: this.user.value.city,
          zip: this.user.value.zip,
          streetAndNo: this.user.value.streetAndNo,
          telephone: this.user.value.telephone,
          website: this.user.value.website,
          fax: this.user.value.fax,
        }
      };
      console.log('create hausverwalter', user);
      this.api.createHausverwalter(user).subscribe(res => {
        console.log('created hausverwalter', res);
        loading.complete({});
        this.data.reloadHausverwalter();
      }, err => {
        this.onCreateError(user);
        loading.unload();
      });
      return;
    }

  }

  editUser(loading: FivLoadingProgressBar) {
    loading.load();

    if (this.mode === 'EDIT_USER') {
      const user: CreateUserPayload = {
        firstname: this.user.value.firstname,
        lastname: this.user.value.lastname,
        email: this.user.value.email,
      };
      this.api.updateUser(user, this.edit.id).subscribe(res => {
        console.log('updated user', res);
        this.data.reloadUsers();
        loading.complete({});
      }, err => {
        this.onUpdateError(user);
        loading.unload();
      });
      return;
    }
    if (this.mode === 'EDIT_VERWALTER') {
      const user: UpdateHausverwalterPayload = {
        firstname: this.user.value.firstname,
        lastname: this.user.value.lastname,
        email: this.user.value.email,
        updateAdditionalInfo: {
          companyName: this.user.value.companyName,
          city: this.user.value.city,
          zip: this.user.value.zip,
          streetAndNo: this.user.value.streetAndNo,
          telephone: this.user.value.telephone,
          website: this.user.value.website,
          fax: this.user.value.fax,
        }
      };
      this.api.updateHausverwalter(user, this.edit.id).subscribe(res => {
        console.log('updated hausverwalter', res);
        this.data.reloadHausverwalter();
        loading.complete({});
      }, err => {
        this.onUpdateError(user);
        loading.unload();
      });
      return;
    }

  }

  abort() {
    switch (this.mode) {
      case 'CREATE_USER':
        this.router.navigate(['users']);
        break;
      case 'CREATE_VERWALTER':
        this.router.navigate(['hausverwalter']);
        break;
      case 'EDIT_USER':
        this.router.navigate(['users', this.edit.id]); break;
      case 'EDIT_VERWALTER': {
        if (this.currentUser.id == this.edit.id) {
          this.router.navigate(['settings']); break;
        } else {
          this.router.navigate(['hausverwalter', this.edit.id]); break;
        }
        break;
      }
      default:
        this.navCtrl.back();
    }
  }

  onError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Zurück zu Übersicht').then(toast => {
      if (toast.role === 'cancel') {
        if (this.mode === 'CREATE_USER' || this.mode === 'EDIT_USER') {
          this.navCtrl.navigateBack('users');
        } else {
          this.navCtrl.navigateBack('hausverwalter');
        }
      }
    });
  }

  onCreateError(user: CreateUserPayload) {
    this.toast.presentToast(8000, `${user.firstname} ${user.lastname} konnte nicht erstellt werden. Bitte überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.`, 'OK').then(toast => {
      if (toast.role === 'cancel') {
      }
    });
  }

  onUpdateError(user: CreateUserPayload) {
    this.toast.presentToast(8000, `${user.firstname} ${user.lastname} konnte nicht bearbeitet werden. Bitte überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.`, 'OK').then(toast => {
      if (toast.role === 'cancel') {
      }
    });
  }

}
