import { GetVerwalterReportPayload } from './../../../../../shared/types/types';
import { Component, OnInit, ViewChild } from '@angular/core';
import { Observable, of, zip, Subscription } from 'rxjs';
import { User, Property, VerwalterReport } from 'shared';
import { FivLoadingProgressBar } from '@fivethree/core';
import { IonSelect, PopoverController, NavController, AlertController } from '@ionic/angular';
import { ActivatedRoute, Router, NavigationExtras } from '@angular/router';
import { DataService } from '@services/data.service';
import { UserService } from '@services/user.service';
import { ApiService } from '@services/api.service';
import { ToastService } from '@services/toast.service';
import { FormGroup, FormBuilder, Validators, FormControl, AbstractControl } from '@angular/forms';
import { saveAs as importedSaveAs } from 'file-saver';


import { MAT_DATE_FORMATS, DateAdapter, MAT_DATE_LOCALE } from '@angular/material/core';
import * as moment from 'moment';
import { MomentDateAdapter } from '@angular/material-moment-adapter';
export const MY_FORMATS = {
  parse: {
    dateInput: 'DD.MM.YYYY',
  },
  display: {
    dateInput: 'DD.MM.YYYY',
    monthYearLabel: 'DD.MM.YYYY',
    dateA11yLabel: 'DD.MM.YYYY',
    monthYearA11yLabel: 'DD.MM.YYYY',
  },
};



@Component({
  selector: 'app-verwalter',
  templateUrl: './verwalter.page.html',
  styleUrls: ['./verwalter.page.scss'],
  providers: [
    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
    { provide: MAT_DATE_LOCALE, useValue: 'de-DE' },
    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
  ]
})
export class VerwalterPage {

  user: Observable<User>;
  properties: Observable<Property[]>;
  selectedProperties: number[] = [];
  allProperties: Observable<Property[]>;
  stats: Observable<VerwalterReport>;

  period: FormGroup;

  @ViewChild('bar') bar: FivLoadingProgressBar;

  @ViewChild('select') select: IonSelect;

  constructor(public route: ActivatedRoute,
    public dataService: DataService,
    public userService: UserService,
    public router: Router,
    public popoverCtrl: PopoverController,
    private alertController: AlertController,
    public api: ApiService,
    public toast: ToastService,
    public formBuilder: FormBuilder,
    public navCtrl: NavController) {
    this.setupForm();
  }

  setupForm() {
    this.period = this.formBuilder.group({
      from: [new FormControl(moment()), [Validators.required]],
      to: [new FormControl(moment()), [Validators.required]],
    });
  }

  get from(): AbstractControl {
    return this.period.get('from');
  }

  get to(): AbstractControl {
    return this.period.get('to');
  }

  ionViewWillEnter() {

    const id = this.route.snapshot.paramMap.get('id');
    this.user = this.api.getHausverwalter(id);

  }

  ionViewDidLeave() {

  }



  editUser(user) {
    this.router.navigate(['users/edit'], {
      queryParams: {
        verwalter: user.id
      }
    });
  }

  onError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Zurück zu Übersicht').then(toast => {
      if (toast.role === 'cancel') {
        this.navCtrl.navigateBack('hausverwalter');
      }
    });
  }

  resetPassword(u: User) {
    this.bar.load();
    this.api.resetPassword(u.id)
      .subscribe(() => {
        this.toast.presentToast(6000, `Das Passwort von ${u.firstname} ${u.lastname} wurde erfolgreich zurückgesetzt.`, 'OK');
        this.bar.complete({});
      }, err => {
        this.onPasswordResetError(u);
      });
  }

  onPasswordResetError(user: User) {
    this.toast.presentToast(8000, `Das Passwort von ${user.firstname} ${user.lastname} konnte nicht zurückgesetzt werden. Sollte der Fehler weiterhin auftreten benchrichtigen Sie bitte inen Administrator.`, 'OK');
  }

  async presentAlertConfirm(u: User) {
    const alert = await this.alertController.create({
      header: 'Passwort von ' + u.firstname + ' ' + u.lastname + ' zurücksetzen?',
      buttons: [
        {
          text: 'Abbrechen',
          role: 'cancel',
          cssClass: 'secondary'
        }, {
          text: 'zurücksetzen',
          handler: () => {
            this.resetPassword(u);
          }
        }
      ]
    });

    await alert.present();
  }

  async confirmDeletion(user: User) {
    const verwaltung = user.additionalInfo ? user.additionalInfo.companyName || `${user.firstname} ${user.lastname}` : `${user.firstname} ${user.lastname}`;
    const alert = await this.alertController.create({
      header: 'Löschung bestätigen',
      message: `Möchten Sie die Hausverwaltung ${verwaltung} wirklich löschen?`,
      buttons: [
        {
          text: 'Abbrechen',
          role: 'cancel',
          cssClass: 'secondary',
          handler: () => {

          }
        }, {
          text: 'Löschen',
          handler: () => {
            this.deleteUser(user);
          }
        }
      ]
    });

    await alert.present();
  }

  deleteUser(user: User) {
    this.api.deleteUser(user.id)
      .subscribe((data) => {
        console.log('delete', data);
        this.router.navigate(['hausverwalter']);
        this.toast.success(4000, `${user.firstname} ${user.lastname} erfolgreich gelöscht.`, 'OK');
      }, err => {
        this.onError();
      });
  }

  getReport(user: User) {
    const payload: GetVerwalterReportPayload = {
      startDate: this.from.value.format('DD.MM.YYYY'),
      endDate: this.to.value.format('DD.MM.YYYY')
    };
    this.stats = this.api.getCreationReport(user.id, payload);
  }

  exportCSV(user: User, loading: FivLoadingProgressBar) {
    loading.load();
    this.api.downloadPropertyAsCSV(user.id)
      .subscribe((res: any) => {
        loading.complete({ result: res, user: user });
      }, (err) => {
        loading.unload();
      });
  }

  exportComplete(data: { result: any, user: User }) {
    const name = data.user.firstname + '-' + data.user.lastname;
    const fileName = `Immobilen-${data.user.additionalInfo ? data.user.additionalInfo.companyName || name : name}.csv`;

    const blobFile = new Blob([
      new Uint8Array([0xEF, 0xBB, 0xBF]), // UTF-8 BOM
      new Uint8Array(data.result)
    ],
      { type: 'application/octet;charset=utf-8' });

    importedSaveAs(blobFile, fileName);
  }

  importCSV(file: any, user: User, loading: FivLoadingProgressBar) {
    loading.load();
    this.api.uploadPropertyAsCSV(user.id, file.target.files[0])
      .subscribe((res: any) => {
        loading.complete({});
      }, (err) => {
        this.onError();
        loading.unload();
      });
  }

  importComplete() {
    this.toast.success(6000, 'Die Immobilien wurden erfolgreich importiert.', 'OK');
  }
}
