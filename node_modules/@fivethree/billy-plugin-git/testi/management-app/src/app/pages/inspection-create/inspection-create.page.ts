import { CreateTaskPayload } from './../../../../../shared/types/types';
import { FivLoadingProgressBar, FivStepper } from '@fivethree/core';
import { Component, OnInit, ViewChild, ViewChildren, QueryList } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';
import { Store, select } from '@services/store/store.service';
import { Observable, of } from 'rxjs';
import { Property, User, Kriterien, Level, Checklist } from 'shared';
import { first, map, filter, tap } from 'rxjs/operators';
import { ApiService } from '@services/api.service';
import { KriteriumSelectComponent } from '@components/kriterium-select/kriterium-select.component';
import { Router } from '@angular/router';
import { ChecklistComponent } from '@components/checklist/checklist.component';
import { TaskCreateComponent } from '@components/task-create/task-create.component';
import { ToastService } from '@services/toast.service';

@Component({
  selector: 'app-inspection-create',
  templateUrl: './inspection-create.page.html',
  styleUrls: ['./inspection-create.page.scss'],
})
export class InspectionCreatePage implements OnInit {

  inspectionForm: FormGroup;

  properties: Observable<Property[]>;
  users: Observable<User[]>;
  checklists: Observable<Checklist[]>;

  @ViewChild(FivStepper) stepper: FivStepper;
  @ViewChild(TaskCreateComponent) taskComponent: TaskCreateComponent;
  @ViewChildren(KriteriumSelectComponent) kriteriumComponents: QueryList<KriteriumSelectComponent>;
  @ViewChildren(ChecklistComponent) checklistComponents: QueryList<ChecklistComponent>;
  levels: Observable<Level[]>;
  criterias: Observable<Kriterien[]>;

  taskRule: 'ONCE' | 'SCHEDULED' = 'ONCE';



  constructor(public formBuilder: FormBuilder,
    private api: ApiService,
    private router: Router,
    private toast: ToastService,
    private store: Store
  ) { this.setupForm(); }

  ngOnInit() {
    this.properties = this.store.select('properties');
  }

  setupForm() {
    this.inspectionForm = this.formBuilder.group({
      propertyId: ['', [Validators.required]],
      userId: ['', [Validators.required]],
      criteriaIds: [[], [Validators.required]],
    });
  }

  get property(): AbstractControl {
    return this.inspectionForm.get('propertyId');
  }

  get user(): AbstractControl {
    return this.inspectionForm.get('userId');
  }

  get kriterien(): AbstractControl {
    return this.inspectionForm.get('criteriaIds');
  }

  loadUsers(bar: FivLoadingProgressBar) {
    bar.load();
    this.users = this.api.getPropertyUsers(this.property.value);
    this.users.pipe(first())
      .subscribe(() => {
        bar.complete({});
      }, err => {
        bar.unload();
        console.log('Die Benutzer der Immobilie konnten nicht geladen werden', err);
      });
  }

  usersLoaded() {
    this.stepper.close(0);
    this.stepper.open(1);
  }

  loadCriterias(bar: FivLoadingProgressBar) {
    bar.load();
    this.checklists = this.api.getChecklistsOfProperty(this.property.value);

    this.checklists.pipe(
      first(),
    )
      .subscribe(() => {
        bar.complete({});
      }, err => {
        bar.unload();
        console.log('Die Checklisten der Immobilie konnten nicht geladen werden', err);
      });

    this.levels = this.checklists
      .pipe(
        filter(checklists => !!checklists),
        map(checklists =>
          checklists.map(checklist => checklist.levels).reduce((prev, curr) => prev.concat(curr))
        )
      );

    this.criterias = this.levels
      .pipe(
        map(levels =>
          levels.map(level => level.kriterien).reduce((prev, curr) => prev.concat(curr))
        ));
  }

  criteriasLoaded() {
    this.stepper.close(1);
    this.stepper.open(2);
    this.kriteriumComponents.changes.subscribe(changes => console.log('COMPONENTS', changes));

  }

  addKriterien(krit: Kriterien[]) {
    this.select(...krit);
  }
  removeKriterien(krit: Kriterien[]) {
    this.disselect(...krit);
  }


  kriteriumChanged(checked: boolean, krit: Kriterien) {
    console.log('before change', this.kriterien.value);
    if (checked) {
      this.select(krit);
    } else {
      this.disselect(krit);
    }
    console.log('after change', this.kriterien.value);
  }
  select(...krit: Kriterien[]) {
    console.log('select', krit);
    const current: number[] = this.kriterien.value || [];
    krit.forEach(k => {
      if (!current.some(c => c === k.id)) {
        current.push(k.id);
        this.kriterien.setValue(current);
      }
    });
  }

  disselect(...krit: Kriterien[]) {
    console.log('disselect', krit, 'from', this.kriterien.value);
    const current: number[] = this.kriterien.value;
    this.kriterien.setValue(current.filter(c => !krit.some(k => k.id === c)));
  }

  submit(bar: FivLoadingProgressBar) {
    bar.load();
    if (this.taskRule === 'ONCE') {
      this.api.createInspection(this.property.value, { assignedUserId: this.user.value, inspectionCriterias: this.kriterien.value })
        .subscribe((inspection) => {
          bar.complete({});
        }, err => {
          bar.unload();
          this.toast.error(8000, 'Die Inspektion konnte nicht angelegt werden. Bitte versuchen Sie es später erneut.', 'OK');
          console.log('error creating inspection', err);
        });
    } else {
      const payload: CreateTaskPayload = {
        assignedUserId: this.user.value,
        taskCriterias: this.kriterien.value,
        scheduleOptionId: this.taskComponent.schedule.value.optionID,
        name: this.taskComponent.schedule.value.name,
        startDate: this.taskComponent.schedule.value.from.format('DD.MM.YYYY'),
        active: true,

      };
      this.api.createTask(this.property.value, payload)
        .subscribe((task) => {
          bar.complete({});
        }, err => {
          bar.unload();
          this.toast.error(8000, 'Die Inspektion konnte nicht angelegt werden. Bitte versuchen Sie es später erneut.', 'OK');
          console.log('error creating inspection', err);
        });
    }

  }

  onDone() {
    this.router.navigate(['inspections']);
  }

  tabChange() {
    this.kriterien.setValue([]);
    this.kriteriumComponents
      .forEach(comp => comp.checkbox.checked = false);
    this.checklistComponents
      .forEach(comp => {
        comp.checkboxes
          .forEach(c => c.checked = false);
      });

  }

  onStepClicked(index: number) {
    this.stepper.open(index);
  }

  taskRuleChanged(event) {
    this.taskRule = event.detail.value;
  }

}
