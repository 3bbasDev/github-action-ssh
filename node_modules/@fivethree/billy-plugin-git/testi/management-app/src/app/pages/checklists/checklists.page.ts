import { Store } from '@services/store/store.service';
import { Component, OnInit, ViewChild, OnDestroy, AfterViewInit } from '@angular/core';
import { Observable } from 'rxjs';
import { NavigationExtras, Router } from '@angular/router';
import { Checklist, User } from 'shared';
import { DataService } from '../../services/data.service';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-checklists',
  templateUrl: './checklists.page.html',
  styleUrls: ['./checklists.page.scss'],
})
export class ChecklistsPage implements OnDestroy, AfterViewInit {

  public checklists: Observable<Checklist[]>;
  searchInput: String = '';

  dataSource = new MatTableDataSource<Checklist>();
  displayedColumns: string[] = ['name', 'levels'];
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  onRowClicked(event) {
    console.log('row clicked', event);
    this.navigateToChecklist(event.id);
  }

  applySearchFilter(event) {
    this.dataSource.filter = event.detail.value.trim().toLowerCase();
  }

  onSearchbarClose() {
    this.dataSource.filter = '';
  }


  constructor(public data: DataService,
    public store: Store,
    public router: Router) {

  }

  ngAfterViewInit(): void {
    this.paginator._intl.itemsPerPageLabel = 'Checklisten pro Seite';
    this.paginator._intl.firstPageLabel = 'Erste Seite';
    this.paginator._intl.nextPageLabel = 'NÃ¤chste Seite';
    this.paginator._intl.previousPageLabel = 'Vorherige Seite';
    this.paginator._intl.lastPageLabel = 'Letzte Seite';
    this.paginator._intl.getRangeLabel = (page: number, pageSize: number, length: number) => {
      const startIndex = page * pageSize;
      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
      return `${startIndex + 1} - ${endIndex} von ${length}`;
    };
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }


  ionViewWillEnter() {
    
    this.checklists = this.data.loadChecklists();
    this.checklists.subscribe((checklists => this.dataSource.data = checklists));
  }

  rowSelected(event) {
    if (event.type === 'click') {
      this.navigateToChecklist(event.row.id);
    }
  }

  navigateToChecklist(id) {
    this.router.navigate(['checklists',id]);
  }

  search(event) {
    this.searchInput = event.detail.value;
  }

  addChecklist() {

    this.router.navigate(['checklists/create']);
  }

  ngOnDestroy(): void {
  }



}
