import { Router, NavigationExtras, ActivatedRoute, NavigationEnd } from '@angular/router';
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { Observable } from 'rxjs';
import { User } from 'shared';
import { DataService } from '../../services/data.service';
import { filter, first } from 'rxjs/operators';
import { ToastService } from '../../services/toast.service';
import { NavController } from '@ionic/angular';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'app-users',
  templateUrl: './users.page.html',
  styleUrls: ['./users.page.scss'],
})
export class UsersPage implements AfterViewInit {

  public users: Observable<User[]>;
  searchInput = '';

  dataSource = new MatTableDataSource<User>();
  displayedColumns: string[] = ['email', 'firstname', 'lastname', 'role'];
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  onRowClicked(event) {
    console.log('row clicked', event);
    this.navigateToUser(event.id);
  }

  applySearchFilter(event) {
    this.dataSource.filter = event.detail.value.trim().toLowerCase();
  }

  onSearchbarClose() {
    this.dataSource.filter = '';
  }


  constructor(public data: DataService,
    public router: Router, public route: ActivatedRoute, public toast: ToastService, public navCtrl: NavController) {
  }

  ngAfterViewInit(): void {
    this.paginator._intl.itemsPerPageLabel = 'Benutzer pro Seite';
    this.paginator._intl.firstPageLabel = 'Erste Seite';
    this.paginator._intl.nextPageLabel = 'Nächste Seite';
    this.paginator._intl.previousPageLabel = 'Vorherige Seite';
    this.paginator._intl.lastPageLabel = 'Letzte Seite';
    this.paginator._intl.getRangeLabel = (page: number, pageSize: number, length: number) => {
      const startIndex = page * pageSize;
      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
      return `${startIndex + 1} - ${endIndex} von ${length}`;
    };
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  ionViewWillEnter() {
    this.users = this.data.loadUsers();
    this.users
      .pipe(first())
      .subscribe(users => {
        this.dataSource.data = users;
      });
  }

  navigateToUser(id) {
    this.router.navigate(['users',id]);
  }


  addUser() {
    this.router.navigate(['users/edit']);
  }

  onError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Zurück zu Übersicht').then(toast => {
      if (toast.role === 'cancel') {
        this.navCtrl.navigateBack('users');
      }
    });
  }
}
