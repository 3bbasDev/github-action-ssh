import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, pipe, of } from 'rxjs';
import { scan, map, distinctUntilChanged, shareReplay, debounceTime } from 'rxjs/operators';
import { omit, get, isEqual } from 'lodash';
import { Storage } from '@ionic/storage';
import { Platform } from '@ionic/angular';
import { User } from 'shared';
import { environment } from '@environments/environment';

const win = window as any;

export interface StoreModel {
  users: User[];

}

export class Action {
  constructor(public type: string, public payload?: any) { }
}

@Injectable({
  providedIn: 'root'
})
export class Store {
  state: Observable<any>;

  actions: BehaviorSubject<Action> = new BehaviorSubject(new Action('SET', {}));

  constructor(public storage: Storage, public platform: Platform) {

    this.state = this.actions.pipe(
      reducer(),
      shareReplay(1)
    );

    if (!environment.production
      && !this.platform.is('cordova')
      && win.__REDUX_DEVTOOLS_EXTENSION__) {
      win.devTools = win.__REDUX_DEVTOOLS_EXTENSION__.connect();
    }

    this.persist();
  }

  persist() {
    this.storage.get('STATE').then(state => {
      this.dispatch(new Action('SET', state ? state : {}));
    });

    this.state.pipe(
      debounceTime(1000),
      distinctUntilChanged(isEqual)
    )
      .subscribe(state => {
        this.storage.set('STATE', state);
      });
  }

  dispatch(action: Action) {
    this.actions.next(action);
  }

  select(path: string) {
    return this.state.pipe(select(path));
  }
}

export const reducer = () =>
  scan<any>((state, action) => {
    let next;
    switch (action.type) {
      case 'SET':
        next = action.payload;
        break;
      case 'UPDATE':
        next = { ...state, ...action.payload };
        break;
      case 'DELETE':
        next = omit(state, action.payload);
        break;
      default:
        next = state;
        break;
    }

    if (win.devTools) {
      win.devTools.send(action.type, next);
    }

    return next;
  }, {});

export const select = path =>
  pipe(
    map(state => get(state, path, null)),
    distinctUntilChanged(isEqual)
  );
