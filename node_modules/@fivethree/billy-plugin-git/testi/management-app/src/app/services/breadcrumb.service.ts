import { Injectable } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

export interface Breadcrumb {
  text: string;
  value?: string;
  url: string;
}

export interface RoutePattern {
  pattern: RegExp;
  text: string;
  value?: (route: string) => string;
}

@Injectable({
  providedIn: 'root'
})
export class BreadcrumbService {

  private breadCrumbs$ = new BehaviorSubject<Breadcrumb[]>([]);

  breadCrumbs = this.breadCrumbs$.asObservable();

  constructor(private router: Router) {
    this.breadCrumbs$.next(this.getBreadcrumbsWithStartPage(router.url));

    router.events
      .pipe(filter(event => event instanceof NavigationEnd))
      .subscribe((event: NavigationEnd) => {
        const breadcrumbs = this.getBreadcrumbsWithStartPage(router.url);
        this.breadCrumbs$.next(breadcrumbs);
      });
  }

  private getBreadcrumbsWithStartPage(root: string) {
    const breadcrumbs = this.getBreadcrumbs(root);
    breadcrumbs.unshift({
      text: 'Startseite',
      url: '/'
    });
    return breadcrumbs;
  }

  private getBreadcrumbs(root: string, url: string = '', breadcrumbs: Breadcrumb[] = []): Breadcrumb[] {
    root = root.substring(root.indexOf('/') + 1);
    const routes = root.split('/');

    for (const route of routes) {

      url += `/${route}`;

      if (this.getMachtingRoute(url)) {
        const breadcrumb: Breadcrumb = {
          text: this.getTextForMatchingRoute(url, route),
          value: this.getValueForMatchingRoute(url, route),
          url: url
        };
        breadcrumbs.push(breadcrumb);
      }

      if (root.indexOf('/') === -1) {
        return breadcrumbs;
      }

      return this.getBreadcrumbs(root, url, breadcrumbs);
    }

    return breadcrumbs;
  }

  private getMachtingRoute(url): RoutePattern {
    return this.routePatterns().find(routePattern => !!routePattern.pattern.test(url));
  }

  private getTextForMatchingRoute(url: string, route: string): string {
    const rP = this.getMachtingRoute(url);
    return rP ? rP.text : null;
  }

  private getValueForMatchingRoute(url: string, route: string): string {
    const rP = this.getMachtingRoute(url);
    return rP ? rP.value(route) : null;
  }

  private routePatterns(): RoutePattern[] {
    return [
      {
        pattern: /\/properties$/,
        text: 'Objektverwaltung',
        value: () => null
      },
      {
        pattern: /\/properties\/edit$/,
        text: 'Immobilie anlegen',
        value: () => null
      },
      {
        pattern: /\/properties\/edit\?property=[0-9]+$/,
        text: 'Immobilie bearbeiten',
        value: () => null
      },
      {
        pattern: /\/properties\/[0-9]+$/,
        text: 'Immobilie',
        value: (route) => route
      },
      {
        pattern: /\/checklists$/,
        text: 'Checklistenvorlagen',
        value: () => null
      },
      {
        pattern: /\/checklists\/create$/,
        text: 'Checkliste anlegen',
        value: () => null
      },
      {
        pattern: /\/checklists\/[0-9]+$/,
        text: 'Checkliste',
        value: (route) => route
      },
      {
        pattern: /\/inspections$/,
        text: 'Begehungen',
        value: () => null
      },
      {
        pattern: /\/inspections\/create$/,
        text: 'Inspektion anlegen',
        value: () => null
      },
      {
        pattern: /\/inspections\/[0-9]+$/,
        text: 'Inspektion',
        value: (route) => route
      },
      {
        pattern: /\/users$/,
        text: 'Benutzerverwaltung',
        value: () => null
      },
      {
        pattern: /\/users\/edit$/,
        text: 'Benutzer anlegen',
        value: () => null
      },
      {
        pattern: /\/users\/edit\?user=[0-9]+$/,
        text: 'Benutzer bearbeiten',
        value: () => null
      },
      {
        pattern: /\/users\/edit\?verwalter=[0-9]+$/,
        text: 'Verwalter bearbeiten',
        value: () => null
      },
      {
        pattern: /\/users\/[0-9]+$/,
        text: 'Benutzer',
        value: (route) => route
      },
      {
        pattern: /\/settings$/,
        text: 'Profileinstellungen',
        value: () => null
      },
      {
        pattern: /\/settings\/password$/,
        text: 'Password Ã¤ndern',
        value: () => null
      },
      {
        pattern: /\/hausverwalter$/,
        text: 'Hausverwalter',
        value: () => null
      },
      {
        pattern: /\/admin-checklists$/,
        text: 'Checklistenvorlagen',
        value: () => null
      },
      {
        pattern: /\/hausverwalter\/[0-9]+$/,
        text: 'Hausverwalter',
        value: (route) => route
      },
    ];
  }
}
