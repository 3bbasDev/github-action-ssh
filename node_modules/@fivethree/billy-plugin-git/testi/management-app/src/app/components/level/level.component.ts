import { EditableComponent } from './../editable/editable.component';
import { FivExpandable, FivLoadingProgressBar } from '@fivethree/core';
import { KriteriumComponent } from './../kriterium/kriterium.component';
import { PopoverController, AlertController } from '@ionic/angular';
import { ApiService } from './../../services/api.service';
import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ViewChildren, QueryList } from '@angular/core';
import { Checklist, Category, Property } from 'shared';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { DataService } from '@services/data.service';
import { ToastService } from '@services/toast.service';

@Component({
  selector: 'level',
  templateUrl: './level.component.html',
  styleUrls: ['./level.component.scss']
})
export class LevelComponent implements OnInit {

  @Input() checklist: Checklist;
  @Input() property: Property;
  @Input() level: number;
  @Input() categories: Category[];
  @Input() isAdmin: boolean;
  @Output() checklistChanged: EventEmitter<Checklist> = new EventEmitter();
  @Output() kriteriumAdded: EventEmitter<{ checklist: Checklist, name: string }> = new EventEmitter();
  @Output() kriteriumDeleted: EventEmitter<{ checklist: Checklist, name: string }> = new EventEmitter();
  @Output() kriteriumChanged = new EventEmitter<Checklist>();
  @ViewChild('ex') ex: FivExpandable;
  @ViewChildren(KriteriumComponent) kriteriums: QueryList<KriteriumComponent> = new QueryList();


  addKriteriumForm: FormGroup;


  constructor(public formBuilder: FormBuilder,
    public api: ApiService,
    private popoverCtrl: PopoverController,
    private alertController: AlertController,
    public data: DataService,
    public toast: ToastService) { }

  ngOnInit() {
    this.setupForm();
  }

  setupForm() {
    this.addKriteriumForm = this.formBuilder.group({
      category: ['', [Validators.required]],
      name: ['', [Validators.minLength(3), Validators.required]],
    });
  }

  delete() {
    this.presentAlertConfirm();

  }

  deleteLevel() {
    if (this.isAdmin) {
      this.deleteLevelAdminTemplate();
    } else if (this.property) {
      this.deleteLevelPropertyChecklist();
    } else {
      this.deleteLevelChecklistTemplate();
    }

  }

  private deleteLevelAdminTemplate() {
    this.api.deleteLevelAdminTemplate(this.checklist.levels[this.level].id, this.checklist).subscribe(checklist => {
      this.toast.presentToast(4000, 'Prüfbereich erfolgreich gelöscht.', 'OK');
      this.checklistChanged.emit(checklist);
    });
  }
  private deleteLevelChecklistTemplate() {
    this.api.deleteLevelChecklistTemplate(this.checklist.levels[this.level].id, this.checklist).subscribe(checklist => {
      this.toast.presentToast(4000, 'Prüfbereich erfolgreich gelöscht.', 'OK');
      this.checklistChanged.emit(checklist);
    });
  }

  private deleteLevelPropertyChecklist() {
    this.api.deleteLevelPropertyChecklist(this.checklist.levels[this.level].id, this.checklist, this.property).subscribe(checklist => {
      this.toast.presentToast(4000, 'Prüfbereich erfolgreich gelöscht.', 'OK');
      this.checklistChanged.emit(checklist);
    });
  }

  async presentAlertConfirm() {
    const alert = await this.alertController.create({
      header: `Löschen bestätigen`,
      message: `Soll der Prüfbereich <strong>${this.checklist.levels[this.level].name} </strong> wirklich gelöscht werden?`,
      buttons: [
        {
          text: 'Abbrechen',
          role: 'cancel',
          cssClass: 'secondary'
        }, {
          text: 'Löschen',
          handler: () => {
            this.deleteLevel();
          }
        }
      ]
    });

    await alert.present();
  }

  addKriterium(bar: FivLoadingProgressBar) {
    let sub;
    if (this.isAdmin) {
      sub = this.addKriteriumAdminTemplate();
    } else if (this.property) {
      sub = this.addKriteriumPropertyChecklist();
    } else {
      sub = this.addKriteriumChecklistTemplate();
    }

    bar.load();
    sub.subscribe(checklist => {
      bar.complete({ checklist: checklist, name: this.checklist.levels[this.level].name });
    }, err => {
      bar.unload();
      this.toast.presentToast(8000, 'Das Kriterium konnte nicht hinzugefügt werden.', 'Erneut versuchen')
        .then(toast => {
          if (toast.role === 'cancel') {
            this.addKriterium(bar);
          }
        });
    });
  }

  addKriteriumAdminTemplate() {
    return this.api.addKriteriumAdminTemplate({
      name: this.addKriteriumForm.value.name,
      categoryId: this.addKriteriumForm.value.category
    }, this.checklist, this.checklist.levels[this.level]);

  }

  addKriteriumChecklistTemplate() {
    return this.api.addKriteriumChecklistTemplate({
      name: this.addKriteriumForm.value.name,
      categoryId: this.addKriteriumForm.value.category
    }, this.checklist, this.checklist.levels[this.level]);
  }

  addKriteriumPropertyChecklist() {
    return this.api.addKriteriumPropertyChecklist({
      name: this.addKriteriumForm.value.name,
      categoryId: this.addKriteriumForm.value.category
    }, this.checklist, this.checklist.levels[this.level], this.property);
  }

  onComplete(param: { checklist: Checklist, name: string }, ex: FivExpandable) {
    ex.close(param);
  }

  onDidClose(event: { expandable: FivExpandable, param: { checklist: Checklist, name: string } }) {
    if (event.param) {
      this.kriteriumAdded.emit(event.param);
    }
  }

  onKriteriumDeleted(checklist: Checklist) {
    this.toast.presentToast(8000, 'Kriterium erfolgreich gelöscht.', 'OK');
    this.kriteriumDeleted.emit({ checklist: checklist, name: this.checklist.levels[this.level].name });
  }

  onChange(checklist: Checklist) {
    this.kriteriumChanged.emit(checklist);
  }

  changeTitle(editable: EditableComponent, bar: FivLoadingProgressBar) {
    console.log('change title here', editable.getValue());
    let sub;
    if (this.isAdmin && !this.property) {
      sub = this.updateAdminTemplateLevel(editable);
    } else if (!this.isAdmin && !this.property) {
      sub = this.updateChecklisteTemplateLevel(editable);
    } else if (!this.isAdmin && this.property) {
      sub = this.updateChecklistLevelFromProperty(editable);
    }
    bar.load();
    sub.subscribe(checklist => this.onTitleChanged(checklist, editable, bar), err => {
      this.onTitleChangeError(err, editable, bar);
    });
  }
  updateChecklistLevelFromProperty(editable: EditableComponent): any {
    return this.api.updatePropertyChecklistLevel(this.checklist.id, this.property.id, this.checklist.levels[this.level].id, editable.getValue());

  }

  updateChecklisteTemplateLevel(editable: EditableComponent): any {
    return this.api.updateChecklistTemplateLevel(this.checklist.id, this.checklist.levels[this.level].id, editable.getValue());
  }
  updateAdminTemplateLevel(editable: EditableComponent): any {
    return this.api.updateAdminTemplateLevel(this.checklist.id, this.checklist.levels[this.level].id, editable.getValue());
  }

  onTitleChangeError(err: any, editable: EditableComponent, bar: FivLoadingProgressBar) {
    this.toast.presentToast(8000, 'Der Name der Checkliste konnte nicht geändert werden.', 'OK');
    editable.reset();
    bar.unload();
  }

  onTitleChanged(checklist: Checklist, editable: EditableComponent, bar: FivLoadingProgressBar) {
    bar.complete({ checklist: checklist, editable: editable });
  }

  onTitleChangeComplete(data: { checklist: Checklist, editable: EditableComponent }) {
    data.editable.reset();
    this.onChange(data.checklist);
  }

}
