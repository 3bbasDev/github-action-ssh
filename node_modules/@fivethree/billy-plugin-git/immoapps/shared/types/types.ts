export interface SignUpPayload {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
}

export interface LoginPayload {
    email: string;
    password: string;
}

export interface LoginResult {
    accessToken: string;
    tokenType: string;
    user: User;
    fullAuthString: string;
}

export interface ChangePasswordPayload {
    newPassword: string;
}

export interface User {
    id: number;
    firstname: string;
    lastname: string;
    email: string;
    role: 'ROLE_ADMIN' | 'ROLE_HAUSVERWALTER' | 'ROLE_MITARBEITER' | 'ROLE_USER';
    additionalInfo?: AdditionalInfo;
    deleted: boolean;
}

export interface AdditionalInfo {
    id?: number;
    companyName?: string;
    city?: string;
    zip?: string;
    streetAndNo?: string;
    telephone?: string;
    website?: string;
    fax?: string;
}

//     role: string;
// }
export interface Property {
    id: number;
    name: string;
    city: string;
    zip: string;
    streetAndNo: string;
    address: string;
    checklists: Checklist[];
    hausmeister?: User[];
    users?: User[];
}

export interface LoadChecklistPayload {
    checklistTemplates: ChecklistTemplate[];
}

export interface ChecklistTemplate {
    id: number;
    name: string;
}

export interface GetChecklistsResult {
    checklists: Checklist[];
}

export interface Checklist {
    id: number;
    name: string;
    defaultChecklist: boolean;
    levels: Level[];
}

export interface Level {
    id: number;
    name: string;
    kriterien: Kriterien[];
}

export interface Kriterien {
    id: number;
    name: string;
    category: Category;
    picto: KriteriumPicto;
}

export interface KriteriumPicto {
    contentType: string;
    downloadUri: string;
    fileName: string;
    id: number
}

export interface Category {
    id: number;
    name: string;
}

export interface GetUserProperties {
    properties: Property[];
}

export interface CreateUserPayload {
    firstname: string;
    lastname: string;
    email: string;
}
export interface CreateHausverwalterPayload {
    firstname: string;
    lastname: string;
    email: string;
    additionalInfo?: AdditionalInfo;
}
export interface UpdateHausverwalterPayload {
    firstname: string;
    lastname: string;
    email: string;
    updateAdditionalInfo?: AdditionalInfo;
}
export interface CreatePropertyPayload {
    name: string;
    city: string;
    zip: string;
    streetAndNo: string;
}

export interface CreateChecklistPayload {
    name: string;
    defaultChecklist?: boolean;
}

export interface AddLevelPayload {
    name: string;
}

export interface addKriteriumPayload {
    name: string;
    categoryId: number;
}

export interface ChangePasswordPayload {
    newPassword: string;
}

export class UploadPictoResult {
    id: number;
    downloadUri: string;
    contentType: string;
    fileSize: number;
    fileName: string;
}

export interface GetPictoBase64Result {
    id: number;
    name: string;
    data: string;
    type: string;
}

export interface AddInspectionPayload {
    propertyId: number;
    inspectionCriterias: number[];
}

export interface GetInspectionsResult {
    inspections: Inspection[];
}

export interface Inspection {
    done: boolean;
    id: number;
    userId: number;
    results: Result[];
    criterias: Criteria[];
    propertyId: number;
    auftragGeberId: number;
}

export interface Criteria {
    id: number;
    pruefkriterium: Kriterien;
}


export interface GetInspectionsResult {
    inspections: Inspection[];
}


export interface AddInspectionResultPayload {
    pruefkriteriumId: number;
    result: boolean;
    description?: string;
    images?: Image[];
    assignedUserId?: number;
}

export interface Image {
    name: string;
    type: string;
    data: string;
}

export interface Result {
    id: number;
    result: boolean;
    pruefkriterium: Kriterien;
    description: string;
    images: ResultImage[];
}

export interface ResultImage {
    name: string;
    type: string;
    id: number;
    url: string;

}

export interface CreateInspectionPayload {
    assignedUserId: number;
    inspectionCriterias: number[];
}

export interface MessageResponse {
    notifications: Message[];
}

export interface Message {
    id: number;
    title: string;
    message: string;
    date: string;
    readByUser: boolean;
    sender?: User;
    /**
     * targetId is set and a number if `type === inspection_created`. 
     */
    targetId?: string;
    type: MessageType;
}

export type MessageType = 'general' | 'inspection_created';

export interface VerwalterReport {
    mitarbeiterCreationCount: number;
    userCreationCount: number;
    propertyCreationCount: number;
    inspectionsFinishedCount: number;
}

export interface GetVerwalterReportPayload {
    startDate: string;
    endDate: string;
}

export interface GetPictosResult {
    images: GetPictoBase64Result[];
}

export interface CreateTaskPayload {
    taskCriterias: number[];
    assignedUserId: number;
    scheduleOptionId: number;
    name: string;
    startDate: string;
    active: boolean;
}
export interface UpdateTaskPayload {
    taskCriterias?: number[];
    assignedUserId?: number;
    scheduleOptionId?: number;
    name?: string;
    startDate?: string;
    active?: boolean;
}
export interface CreateTaskResult {
    id: number;
    name: string;
    active: boolean;
    scheduleOption: ScheduleOption;
    pruefkriterien: Kriterien[];
    propertyId: number;
    userId: number;
    auftragGeberId: number;
    startDate: string;
    valid: boolean;
    notValidReason?: string;
}

export interface ScheduleOption {
    id: number;
    name: string;
    description: string;
}


export interface GetScheduleOptions {
    options: Option[];
}

export interface Option {
    id: number;
    name: string;
    description: string;
}


export interface GetTasksResult {
    tasks: CreateTaskResult[];
}

export interface PushPayload {
    token: string;
}

export interface PushData {
    /**
     * Determines whether the notification was pressed or not.
     * 
     * if true app was in background, false app was in foreground.
     */
    wasTapped: boolean;
    title: string;
    message: string;
    jsonData: string;
}

export interface PushExtraData {
    /**
     * targetId is set and a number if `type === inspection_created`. 
     */
    targetId?: string;
    messageId: string;
    type: MessageType;
}


export interface GetContextResult {
    hausverwalter: User;
    mitarbeiter: User[];
}
