import { FivLoadingProgressBar } from '@fivethree/core';
import { Subscription, Observable, zip } from 'rxjs';
import { DataService } from '@services/data.service';
import { ActivatedRoute } from '@angular/router';
import { Component, OnInit } from '@angular/core';
import { find, map, tap } from 'rxjs/operators';
import { Inspection, Property, User } from 'shared';
import { ApiService } from '@services/api.service';
import { saveAs as importedSaveAs } from 'file-saver';
import { Store } from '@services/store/store.service';
import { NavController, ToastController, AlertController } from '@ionic/angular';
import { ToastService } from '@services/toast.service';

@Component({
  selector: 'app-inspection',
  templateUrl: './inspection.page.html',
  styleUrls: ['./inspection.page.scss'],
})
export class InspectionPage implements OnInit {

  inspection: Observable<Inspection>;
  property: Observable<Property>;
  users: Observable<User[]>;


  constructor(private route: ActivatedRoute,
    private api: ApiService,
    private store: Store,
    private navCtrl: NavController,
    private toast: ToastService,
    private alertController: AlertController,
    private data: DataService) { }

  ngOnInit() {
    const users = this.store.select('users');
    const mitarbeiter = this.store.select('mitarbeiter');
    this.users = zip(users, mitarbeiter)
      .pipe(
        map(data => [...data[0] || [], ...data[1] || []])
      );
  }

  ionViewWillEnter() {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.inspection = this.data.loadInspections()
        .pipe(
          map(inspections => inspections.find(i => i.id.toString() == id)),
          tap(inspection => this.property = this.data.loadProperties()
            .pipe(map(properties => properties.find(p => inspection.propertyId === p.id))))
        );
    }
  }

  ionViewWillLeave() {
  }

  downloadPDF(inspection: Inspection, bar: FivLoadingProgressBar) {
    bar.load();
    this.api.downloadPDF(inspection.id)
      .subscribe(res => {
        bar.complete(res);
      });
  }

  fivComplete(res) {
    const fileName = 'report.pdf';

    const blobFile = new Blob([
      new Uint8Array([0xEF, 0xBB, 0xBF]), // UTF-8 BOM
      new Uint8Array(res)
    ],
      { type: 'application/octet;charset=utf-8' });
    importedSaveAs(blobFile, fileName);
  }

  deleteComplete(res) {
    this.toast.success(6000, 'Die Inspektion wurde erfolgreich gelöscht.', 'OK');
    this.navCtrl.navigateBack(['inspections']);
  }

  async promptDeletion(inspection: Inspection, bar: FivLoadingProgressBar) {
    const alert = await this.alertController.create({
      header: 'Löschen bestätigen',
      message: 'Wollen Sie die offene Begehung wirklich löschen?',
      buttons: [
        {
          text: 'Abbrechen',
          role: 'cancel',
          cssClass: 'secondary'
        }, {
          text: 'Löschen',
          handler: () => {
            this.deleteOpen(inspection, bar);
          }
        }
      ]
    });

    await alert.present();
  }

  deleteOpen(inspection: Inspection, bar: FivLoadingProgressBar) {
    bar.load();
    this.api.deleteOpenInspection(inspection.id)
      .subscribe(() => {
        bar.complete({});
      }, err => {
        bar.unload();
        this.toast.error(8000, 'Die Inpsektion konnte nicht gelöscht werden. Bitte versuchen sie es später erneut.', 'OK');
      });
  }

}
