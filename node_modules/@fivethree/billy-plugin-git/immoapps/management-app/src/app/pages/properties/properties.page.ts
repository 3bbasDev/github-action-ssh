import { ApiService } from './../../services/api.service';
import { NavController } from '@ionic/angular';
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { Observable } from 'rxjs';
import { Property, User } from 'shared';
import { NavigationExtras, Router, ActivatedRoute } from '@angular/router';
import { tap, map, first } from 'rxjs/operators';
import { DataService } from '../../services/data.service';
import { UserService } from '../../services/user.service';
import { ToastService } from '../../services/toast.service';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-properties',
  templateUrl: './properties.page.html',
  styleUrls: ['./properties.page.scss'],
})
export class PropertiesPage implements AfterViewInit {

  public properties: Observable<Property[]>;
  public searchInput = '';
  dataSource = new MatTableDataSource<Property>();
  displayedColumns: string[] = ['name', 'streetAndNo', 'zip', 'city'];
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  onRowClicked(event) {
    console.log('row clicked', event);
    this.navigateToProperty(event.id);
  }

  applySearchFilter(event) {
    this.dataSource.filter = event.detail.value.trim().toLowerCase();
  }

  onSearchbarClose() {
    this.dataSource.filter = '';
  }

  constructor(public data: DataService,
    public router: Router, public route: ActivatedRoute,
    public userService: UserService, public navCtrl: NavController, public api: ApiService, public toast: ToastService) {

  }

  ngAfterViewInit(): void {
    this.paginator._intl.itemsPerPageLabel = 'Immobilien pro Seite';
    this.paginator._intl.firstPageLabel = 'Erste Seite';
    this.paginator._intl.nextPageLabel = 'NÃ¤chste Seite';
    this.paginator._intl.previousPageLabel = 'Vorherige Seite';
    this.paginator._intl.lastPageLabel = 'Letzte Seite';
    this.paginator._intl.getRangeLabel = (page: number, pageSize: number, length: number) => {
      const startIndex = page * pageSize;
      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
      return `${startIndex + 1} - ${endIndex} von ${length}`;
    };
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }



  ionViewWillEnter() {
    this.properties = this.data.loadProperties();
    this.properties.subscribe(properties => this.dataSource.data = properties);

  }

  rowSelected(event) {
    if (event.type === 'click') {
      this.navigateToProperty(event.row.id);
    }
  }

  navigateToProperty(id) {
    this.router.navigate(['properties', id]);
  }

  search(event) {
    this.searchInput = event.detail.value;
  }


  addProperty() {
    this.router.navigate(['properties/edit']);
  }

  selectProperties() {
    throw new Error('list editing not yet implemented');
  }

  onError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Erneut versuchen').then(toast => {
      if (toast.role === 'cancel') {
        this.navCtrl.navigateBack('properties');
      }
    });
  }





}
