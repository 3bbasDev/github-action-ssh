import { FivLoadingProgressBar } from '@fivethree/core';
import { NavController } from '@ionic/angular';
import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { User, Property, CreatePropertyPayload } from 'shared';
import { ApiService } from '../../services/api.service';
import { Router, ActivatedRoute } from '@angular/router';
import { DataService } from '../../services/data.service';
import { Store } from '../../services/store/store.service';
import { map, first } from 'rxjs/operators';
import { ToastService } from '../../services/toast.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-property-create',
  templateUrl: './property-create.page.html',
  styleUrls: ['./property-create.page.scss'],
})
export class PropertyCreatePage {

  property: FormGroup;
  currentUser: User;

  edit: Property;

  constructor(public formBuilder: FormBuilder, public api: ApiService, public router: Router,
    public data: DataService, public store: Store, public route: ActivatedRoute, public toast: ToastService, public navCtrl: NavController) {
    this.setupForm();

  }

  ionViewWillEnter() {
    this.store.select('user').subscribe(user => {
      this.currentUser = user;
    });

    const id = this.route.snapshot.queryParamMap.get('property');
    if (id) {
      this.api.getProperty(id)
        .pipe(first())
        .subscribe(prop => {
          this.edit = prop;
          this.property.setValue({
            name: prop.name,
            city: prop.city,
            zip: prop.zip,
            streetAndNo: prop.streetAndNo,
          });
        });
    }

  }

  ionViewDidLeave() {
  }

  setupForm() {
    this.property = this.formBuilder.group({
      name: ['', [Validators.minLength(2), , Validators.required]],
      city: ['', [Validators.minLength(2), Validators.required]],
      zip: ['', [Validators.minLength(2), Validators.required]],
      streetAndNo: ['', [Validators.minLength(2), Validators.required]]
    });
  }

  propertyCreateComplete() {
    this.router.navigate(['properties']);
  }

  createProperty(loading: FivLoadingProgressBar) {
    loading.load();
    const prop: CreatePropertyPayload = {
      name: this.property.value.name,
      city: this.property.value.city,
      zip: this.property.value.zip,
      streetAndNo: this.property.value.streetAndNo,
    };
    this.api.createProperty(prop).subscribe(res => {
      this.data.reloadProperties();
      loading.complete({});
    }, err => {
      this.onCreateError(prop);
      loading.unload();
    });
  }

  editProperty(loading: FivLoadingProgressBar) {
    loading.load();
    const prop: CreatePropertyPayload = {
      name: this.property.value.name,
      city: this.property.value.city,
      zip: this.property.value.zip,
      streetAndNo: this.property.value.streetAndNo,
    };
    this.api.updateProperty(prop, this.edit.id).subscribe(res => {
      this.data.reloadProperties();
      loading.complete({});
    }, err => {
      this.onUpdateError(prop);
      loading.unload();
    });
  }

  abort() {
    if (this.edit) {
      this.router.navigate(['properties', this.edit.id]);

    } else {
      this.navCtrl.back();
    }
  }

  onError() {
    this.toast.presentToast(8000, 'Ein unbekannter Fehler ist aufgetreten. Sollte der Fehler weiterhin auftreten, benachrichtigen Sie bitte einen Administrator.', 'Zurück zu Übersicht').then(toast => {
      if (toast.role === 'cancel') {
        this.navCtrl.navigateBack('properties');
      }
    });
  }

  onCreateError(prop: CreatePropertyPayload) {
    this.toast.presentToast(8000, `Die Immobilie ${prop.name} konnte nicht erstellt werden. Bitte überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.`, 'OK').then(toast => {
      if (toast.role === 'cancel') {
      }
    });
  }

  onUpdateError(prop: CreatePropertyPayload) {
    this.toast.presentToast(8000, `Die Immobilie ${prop.name} konnte nicht bearbeitet werden. Bitte überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.`, 'OK').then(toast => {
      if (toast.role === 'cancel') {
      }
    });
  }

}
