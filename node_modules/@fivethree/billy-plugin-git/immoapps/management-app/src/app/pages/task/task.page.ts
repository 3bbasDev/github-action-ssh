import { ToastService } from './../../services/toast.service';
import { AlertController } from '@ionic/angular';
import { DataService } from './../../services/data.service';
import { ApiService } from './../../services/api.service';
import { CreateTaskResult, Property, User, CreateTaskPayload, UpdateTaskPayload } from 'shared';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';
import { map, catchError } from 'rxjs/operators';
import { Observable, of } from 'rxjs';

@Component({
  selector: 'app-task',
  templateUrl: './task.page.html',
  styleUrls: ['./task.page.scss'],
})
export class TaskPage implements OnInit {

  task: Observable<CreateTaskResult>;
  property: Observable<Property>;
  users: Observable<User[]>;

  constructor(private route: ActivatedRoute,
    private api: ApiService,
    private alertController: AlertController,
    private toast: ToastService,
    private router: Router,
    private data: DataService) { }

  ngOnInit() {
  }

  ionViewWillEnter() {
    const id = this.route.snapshot.paramMap.get('id');
    this.users = this.data.loadUsers();

    const propertyId = this.route.snapshot.queryParamMap.get('propertyId');
    this.task = this.api.getTasksOfProperty(+propertyId)
      .pipe(
        map(result => result.tasks),
        map(task => task.find(t => t.id === +id))
      );

    this.property = this.api.getProperty(+propertyId);
  }

  statusChange(event, property: Property, task: CreateTaskResult) {
    const payload: UpdateTaskPayload = {
      active: event.detail.value === 'on'
    };
    this.task = this.api.updateTask(property.id, task.id, payload);
  }

  async confirmDeletion(property: Property, task: CreateTaskResult) {
    const alert = await this.alertController.create({
      header: 'Löschen bestätigen',
      message: 'Soll die wiederkehrende Begehung wirklich gelöscht werden?',
      buttons: [
        {
          text: 'Abbrechen',
          role: 'cancel',
          cssClass: 'secondary'
        }, {
          text: 'OK',
          handler: () => {
            this.deleteTask(property, task);
          }
        }
      ]
    });

    await alert.present();
  }

  deleteTask(property: Property, task: CreateTaskResult) {
    this.api.deleteTask(property.id, task.id)
      .subscribe(() => {
        this.router.navigate(['properties', property.id]);
      }, err => {
        this.toast.error(8000, 'Die Begehung konnte nicht gelöscht werden. Bitte versuchen Sie es später erneut.', 'OK');
      });
  }

}
