// tslint:disable-next-line:max-line-length
import {
  User, CreateUserPayload, Property, GetChecklistsResult, CreateChecklistPayload,
  Checklist, AddLevelPayload, addKriteriumPayload, Level, CreatePropertyPayload,
  UploadPictoResult, GetPictoBase64Result, CreateHausverwalterPayload, CreateInspectionPayload,
  Inspection, GetVerwalterReportPayload, VerwalterReport, GetInspectionsResult, GetPictosResult, CreateTaskPayload, CreateTaskResult, GetScheduleOptions, UpdateTaskPayload, GetTasksResult
} from 'shared';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map, tap } from 'rxjs/operators';
import { ChangePasswordPayload } from 'shared';
import { Observable, defer, of, zip } from 'rxjs';
import { environment } from '@environments/environment';




@Injectable({
  providedIn: 'root'
})
export class ApiService {

  baseURL = environment.baseURL;

  constructor(public http: HttpClient) { }

  createUser(user: CreateUserPayload, role: string) {
    return this.http.post<User>(`${environment.baseURL}/users/${role !== 'Hausmeister' ? role.toLowerCase() : ''}`, user);
  }

  updateUser(user: CreateUserPayload, userId) {
    return this.http.post<User>(`${this.baseURL}/users/${userId}`, user);
  }

  deleteUser(userId) {
    return this.http.delete<User>(`${this.baseURL}/users/${userId}`);
  }

  getUser(userId) {
    return this.http.get<User>(`${this.baseURL}/users/${userId}`);
  }

  createHausverwalter(user: CreateHausverwalterPayload) {
    console.log('createHausverwalter', user);
    return this.http.post<User>(`${environment.baseURL}/users/hausverwalter`, user);
  }

  updateHausverwalter(user: CreateHausverwalterPayload, userId) {
    console.log('updateHausverwalter', user);
    return this.http.post<User>(`${this.baseURL}/users/${userId}`, user);
  }

  getHausverwalter(userId) {
    return this.http.get<User>(`${this.baseURL}/users/hausverwalter/${userId}`);
  }

  createProperty(prop: CreatePropertyPayload) {
    return this.http.post<Property>(`${this.baseURL}/properties`, prop);
  }

  updateProperty(prop: CreatePropertyPayload, propertyId) {
    return this.http.post<Property>(`${this.baseURL}/properties/${propertyId}`, prop);
  }

  deleteProperty(propertyId: number) {
    return this.http.delete<Property>(`${this.baseURL}/properties/${propertyId}`);

  }

  getProperty(propertyId) {
    return this.http.get<Property>(`${this.baseURL}/properties/${propertyId}`);
  }

  getPropertyUsers(propertyId): Observable<User[]> {
    return this.http.get<Property>(`${this.baseURL}/properties/${propertyId}/users`)
      .pipe(map((res: Property) => res.users));
  }


  getChecklistsOfProperty(propertyId: number) {
    return this.http.get<GetChecklistsResult>(`${environment.baseURL}/properties/${propertyId}/checklists`)
      .pipe(
        map(data => data.checklists),
        sortChecklists()
      );
  }

  linkUserToProperty(user: User, property: Property) {
    return this.http.post(`${environment.baseURL}/properties/${property.id}/${user.id}`, {});
  }
  linkMultipleUsersToProperty(users: User[], property: Property): Observable<User[]> {
    console.log('link multiple');
    return this.http.post(`${environment.baseURL}/properties/${property.id}/users`, {
      userIds: users.map(user => user.id)
    }).pipe(
      map((res: any) => res.users)
    );
  }
  unlinkUserFromProperty(user: User, property: Property) {
    return this.http.delete(`${environment.baseURL}/properties/${property.id}/${user.id}`);
  }

  linkChecklistToProperty(checklist: Checklist, property: Property) {
    return this.http.post(`${environment.baseURL}/properties/${property.id}/checklists`, {
      checklistTemplateId: checklist.id
    });
  }
  unlinkChecklistFromProperty(checklist: Checklist, property: Property) {
    return this.http.delete(`${environment.baseURL}/properties/${property.id}/checklists/${checklist.id}`);
  }

  createChecklist(checklist: CreateChecklistPayload) {
    return this.http.post<Checklist>(`${environment.baseURL}/checklisttemplates`, checklist)
      .pipe(sortChecklist());
  }

  createChecklistFromTemplate(templateId: number) {
    console.log('create checklist from template', templateId);
    return this.http.put<Checklist>(`${environment.baseURL}/checklisttemplates/${templateId}`, {})
      .pipe(sortChecklist());

  }
  deleteChecklist(checklist: Checklist) {
    return this.http.delete<Checklist>(`${environment.baseURL}/checklisttemplates/${checklist.id}`);
  }
  getChecklist(checklistId) {
    return this.http.get<Checklist>(`${this.baseURL}/checklisttemplates/${checklistId}`)
      .pipe(sortChecklist());
  }

  getChecklistOfProperty(propertyID, checklistId) {
    return this.http.get<Checklist>(`${this.baseURL}/properties/${propertyID}/checklists/${checklistId}`)
      .pipe(sortChecklist());

  }

  createAdminChecklist(checklist: CreateChecklistPayload) {
    return this.http.post<Checklist>(`${environment.baseURL}/adminchecklisttemplates`, checklist)
      .pipe(sortChecklist());

  }
  deleteAdminChecklist(checklist: Checklist) {
    return this.http.delete<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${checklist.id}`);
  }
  getAdminChecklist(checklistId) {
    return this.http.get<Checklist>(`${this.baseURL}/adminchecklisttemplates/${checklistId}`)
      .pipe(sortChecklist());

  }

  addLevelAdminTemplate(level: AddLevelPayload, checklist: Checklist) {
    return this.http.post<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${checklist.id}/levels`, level)
      .pipe(sortChecklist());

  }

  addLevelChecklistTemplate(level: AddLevelPayload, checklist: Checklist) {
    return this.http.post<Checklist>(`${environment.baseURL}/checklisttemplates/${checklist.id}/levels`, level)
      .pipe(sortChecklist());

  }

  addLevelPropertyChecklist(level: AddLevelPayload, checklist: Checklist, property: Property) {
    return this.http.post<Checklist>(`${environment.baseURL}/properties/${property.id}/checklists/${checklist.id}/levels`, level)
      .pipe(sortChecklist());

  }

  deleteLevelAdminTemplate(level: number, checklist: Checklist) {
    return this.http.delete<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${checklist.id}/levels/${level}`)
      .pipe(sortChecklist());

  }

  deleteLevelChecklistTemplate(level: number, checklist: Checklist) {
    return this.http.delete<Checklist>(`${environment.baseURL}/checklisttemplates/${checklist.id}/levels/${level}`)
      .pipe(sortChecklist());

  }

  deleteLevelPropertyChecklist(level: number, checklist: Checklist, property: Property) {
    return this.http.delete<Checklist>(`${environment.baseURL}/properties/${property.id}/checklists/${checklist.id}/levels/${level}`)
      .pipe(sortChecklist());

  }


  addKriteriumAdminTemplate(kriterium: addKriteriumPayload, checklist: Checklist, level: Level) {
    return this.http
      .post<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${checklist.id}/levels/${level.id}/pruefkriterien`, kriterium)
      .pipe(sortChecklist());

  }

  addKriteriumChecklistTemplate(kriterium: addKriteriumPayload, checklist: Checklist, level: Level) {
    return this.http
      .post<Checklist>(`${environment.baseURL}/checklisttemplates/${checklist.id}/levels/${level.id}/pruefkriterien`, kriterium)
      .pipe(sortChecklist());

  }

  addKriteriumPropertyChecklist(kriterium: addKriteriumPayload, checklist: Checklist, level: Level, property: Property) {
    return this.http
      .post<Checklist>(`${environment.baseURL}/properties/${property.id}/checklists/${checklist.id}/levels/${level.id}/pruefkriterien`, kriterium)
      .pipe(sortChecklist());

  }

  deleteKriteriumAdminTemplate(kriterium: number, checklist: Checklist, level: Level) {
    return this.http
      .delete<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${checklist.id}/levels/${level.id}/pruefkriterien/${kriterium}`)
      .pipe(sortChecklist());

  }
  deleteKriteriumChecklistTemplate(kriterium: number, checklist: Checklist, level: Level) {
    return this.http
      .delete<Checklist>(`${environment.baseURL}/checklisttemplates/${checklist.id}/levels/${level.id}/pruefkriterien/${kriterium}`)
      .pipe(sortChecklist());

  }
  deleteKriteriumPropertyChecklist(kriterium: number, checklist: Checklist, level: Level, property: Property) {
    return this.http
      .delete<Checklist>(`${environment.baseURL}/properties/${property.id}/checklists/${checklist.id}/levels/${level.id}/pruefkriterien/${kriterium}`)
      .pipe(sortChecklist());
  }

  changePassword(payload: ChangePasswordPayload) {
    return this.http.post<any>(`${environment.baseURL}/auth/changepassword`, payload);
  }
  resetPassword(userId: number) {
    return this.http.post<any>(`${environment.baseURL}/users/${userId}/resetPasswordOfUser`, {});
  }

  resetOwnPassword(email: string) {
    return this.http.post<any>(`${environment.baseURL}/passwordforget`, { email: email });
  }

  uploadPicto(uploadData: FormData, isAdmin?) {
    const url = isAdmin ? 'adminpicto' : 'hausverwalterpicto';
    return this.http.post<UploadPictoResult>(`${environment.baseURL}/${url}`, uploadData);
  }

  uploadPictos(uploadData: FormData, isAdmin?) {
    const url = isAdmin ? 'adminpicto' : 'hausverwalterpicto';
    return this.http.post<UploadPictoResult>(`${environment.baseURL}/${url}/multiple`, uploadData);
  }

  getPicto(id, isAdmin?) {
    const url = isAdmin ? 'adminpicto' : 'hausverwalterpicto';
    return this.http.get<any>(`${environment.baseURL}/${url}/${id}`);
  }

  getPictoBase64(id, isAdmin?) {
    const url = isAdmin ? 'adminpicto' : 'hausverwalterpicto';
    return this.http.get<GetPictoBase64Result>(`${environment.baseURL}/${url}/base64/${id}`);
  }

  deletePicto(id, isAdmin?) {
    const url = isAdmin ? 'adminpicto' : 'hausverwalterpicto';
    return this.http.delete<any>(`${environment.baseURL}/${url}/${id}`);
  }

  addPictoToKriterium(checklistID, levelId, kriteriumId, pictoId, isAdmin?) {
    let url = isAdmin ? 'adminchecklisttemplates' : 'checklisttemplates';
    url += `/${checklistID}/levels/${levelId}/pruefkriterien/${kriteriumId}/pictos`;
    return this.http.post<any>(`${environment.baseURL}/${url}`, { pictoId: pictoId });
  }

  addPictoPropertyChecklist(pictoId: number, property: Property, checklist: Checklist, level: number, kriterium: number) {

    return this.http.post<UploadPictoResult>(`${environment.baseURL}/properties/${property.id}/checklists/${checklist.id}/levels/${level}/pruefkriterien/${kriterium}/pictos`, { pictoId: pictoId });
  }

  deletePictoFromKriterium(checklistID, levelId, kriteriumId, pictoId, isAdmin?) {
    let url = isAdmin ? 'adminchecklisttemplates' : 'checklisttemplates';
    url += `/${checklistID}/levels/${levelId}/pruefkriterien/${kriteriumId}/pictos/${pictoId}`;
    return this.http.delete<any>(`${environment.baseURL}/${url}`);
  }

  getPictos(isAdmin: boolean) {
    const url = isAdmin ? 'adminpicto' : 'hausverwalterpicto';

    return this.http.get<GetPictosResult>(`${environment.baseURL}/${url}/base64`);
  }

  updateChecklistTemplate(id: number, payload: CreateChecklistPayload) {
    return this.http.post<Checklist>(`${environment.baseURL}/checklisttemplates/${id}`, payload)
      .pipe(sortChecklist());

  }

  updateChecklistTemplateLevel(id: number, levelid: number, name: string) {
    return this.http.post<Checklist>(`${environment.baseURL}/checklisttemplates/${id}/levels/${levelid}`, { name: name })
      .pipe(sortChecklist());

  }

  updateChecklistTemplateKriterium(id: number, levelid: number, kritid: number, name: string) {
    return this.http.post<Checklist>(`${environment.baseURL}/checklisttemplates/${id}/levels/${levelid}/pruefkriterien/${kritid}`, { name: name })
      .pipe(sortChecklist());

  }

  updateAdminTemplate(id: number, payload: CreateChecklistPayload) {
    return this.http.post<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${id}`, payload)
      .pipe(sortChecklist());

  }

  updateAdminTemplateLevel(id: number, levelid: number, name: string) {
    return this.http.post<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${id}/levels/${levelid}`, { name: name })
      .pipe(sortChecklist());

  }

  updateAdminTemplateKriterium(id: number, levelid: number, kritid: number, name: string) {
    return this.http.post<Checklist>(`${environment.baseURL}/adminchecklisttemplates/${id}/levels/${levelid}/pruefkriterien/${kritid}`, { name: name })
      .pipe(sortChecklist());

  }

  updatePropertyChecklist(id: number, propertyid: number, name: string) {
    return this.http.post<Checklist>(`${environment.baseURL}/properties/${propertyid}/checklists/${id}`, { name: name })
      .pipe(sortChecklist());

  }

  updatePropertyChecklistLevel(id: number, propertyid: number, levelid: number, name: string) {
    return this.http.post<Checklist>(`${environment.baseURL}/properties/${propertyid}/checklists/${id}/levels/${levelid}`, { name: name })
      .pipe(sortChecklist());

  }

  updatePropertyChecklistKriterium(id: number, propertyid: number, levelid: number, kritid: number, name: string) {
    return this.http.post(`${environment.baseURL}/properties/${propertyid}/checklists/${id}/levels/${levelid}/pruefkriterien/${kritid}`, { name: name })
      .pipe(sortChecklist());

  }

  downloadPDF(id: number) {
    const options = { responseType: 'arraybuffer' as 'arraybuffer' };
    return this.http.get(`${environment.baseURL}/inspections/${id}/report`, options);
  }

  createInspection(propertyID: number, payload: CreateInspectionPayload) {
    return this.http.post<Inspection>(`${environment.baseURL}/properties/${propertyID}/inspections`, payload);
  }

  createTask(propertyID: number, payload: CreateTaskPayload) {
    return this.http.post<CreateTaskResult>(`${environment.baseURL}/properties/${propertyID}/tasks`, payload);
  }

  updateTask(propertyID: number, taskID: number, payload: UpdateTaskPayload) {
    return this.http.post<CreateTaskResult>(`${environment.baseURL}/properties/${propertyID}/tasks/${taskID}`, payload);
  }

  deleteTask(propertyID: number, taskID: number) {
    return this.http.delete<CreateTaskResult>(`${environment.baseURL}/properties/${propertyID}/tasks/${taskID}`);
  }

  getTasksOfProperty(propertyID: number) {
    return this.http.get<GetTasksResult>(`${environment.baseURL}/properties/${propertyID}/tasks`);
  }

  getScheduleOptions() {
    return this.http.get<GetScheduleOptions>(`${environment.baseURL}/taskscheduleoptions`);
  }

  getCreationReport(hausverwalterId: number, payload: GetVerwalterReportPayload) {
    return this.http.post<VerwalterReport>(`${environment.baseURL}/adminactions/hausverwalter/${hausverwalterId}/entitycreation/report`, payload);
  }

  downloadPropertyAsCSV(hausverwalterId: number, name = 'export') {
    return this.http.get(`${environment.baseURL}/adminactions/hausverwalter/${hausverwalterId}/properties/csv`, { responseType: 'arraybuffer' });
  }

  uploadPropertyAsCSV(hausverwalterId: number, file) {
    const formData = new FormData();
    formData.append('file', file, file.name);
    return this.http.post(`${environment.baseURL}/adminactions/hausverwalter/${hausverwalterId}/properties/csv`, formData);
  }

  deleteOpenInspection(id: number) {
    return this.http.delete(`${environment.baseURL}/openinspections/${id}`);
  }

  getClosedInspectionsOfProperty(propertyID: number) {
    return this.http.get<GetInspectionsResult>(`${environment.baseURL}/properties/${propertyID}/inspections`);
  }

  getOpenInspectionsOfProperty(propertyID: number) {
    return this.http.get<GetInspectionsResult>(`${environment.baseURL}/properties/${propertyID}/openinspections`);
  }

  getInspectionsOfProperty(propertyID: number) {
    const closed = this.getClosedInspectionsOfProperty(propertyID)
      .pipe(
        map((data: GetInspectionsResult) => data.inspections),
      );

    const open = this.getOpenInspectionsOfProperty(propertyID)
      .pipe(
        map((data: GetInspectionsResult) => data.inspections),
      );

    return zip(closed, open)
      .pipe(
        map(data => [...data[0] || [], ...data[1] || []])
      );
  }

}

// operators

export const sortChecklist = () => {
  return (source: Observable<Checklist>) => defer(() => {
    return source.pipe(
      map((c: Checklist) => {
        c.levels = c.levels.sort(sortByID);
        return c;
      }),
      map((c: Checklist) => {
        c.levels = c.levels.map(level => {
          level.kriterien = level.kriterien.sort(sortByID);
          return level;
        });
        return c;
      }));
  });
};

export const sortChecklists = () => {
  console.log('sort checklists');
  return (source: Observable<Checklist[]>) => defer(() => {
    return source.pipe(
      tap(checklists => checklists.map(checklist => {
        return of(checklist)
          .pipe(sortChecklist());
      }))
    );
  });
};


// helpers
const sortByID = (a, b) => {
  if (a.id < b.id) {
    return -1;
  } else if (a.id > b.id) {
    return 1;
  }
  return 0;
};

