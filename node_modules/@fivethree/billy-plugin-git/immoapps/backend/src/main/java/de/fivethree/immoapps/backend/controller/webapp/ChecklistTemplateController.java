package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.model.payload.req.checklist.*;
import de.fivethree.immoapps.backend.model.payload.res.checklist.GetChecklistsResponse;
import de.fivethree.immoapps.backend.service.ChecklistTemplateService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@RestController
@RequestMapping("/immoapps/api/checklisttemplates")
public class ChecklistTemplateController {
    @Autowired
    private ChecklistTemplateService checklistTemplateService;

    @GetMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getCheckListTemplates() {
        return ResponseEntity.ok(new GetChecklistsResponse(ModelMapper
                .mapChecklists(checklistTemplateService.getAll())));
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getChecklistTemplate(@PathVariable Long id) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.getById(id)));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @PostMapping
    public ResponseEntity<?> addChecklistTemplate(
            @Valid @RequestBody CreateChecklistTemplateRequest createChecklistTemplateRequest) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.
                addTemplate(createChecklistTemplateRequest)));
    }

    @PostMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> updateChecklistTemplate(@PathVariable Long id,
                                                     @Valid @RequestBody UpdateChecklistReq updateChecklistTemplateReq) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.
                updateTemplate(id, updateChecklistTemplateReq)));
    }

    @CrossOrigin
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @PutMapping("/{adminChecklistId}")
    public ResponseEntity<?> addChecklistTemplateOutOfAdminTemplate(@PathVariable Long adminChecklistId) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.
                addTemplateFromAdminTemplate(adminChecklistId)));
    }

    @PostMapping("/{id}/levels")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> addLevelChecklistTemplate(@PathVariable Long id,
                                                       @Valid @RequestBody AddLevelToChecklistRequest addLevelToChecklistRequest) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.addLevel(id,
                addLevelToChecklistRequest)));
    }

    @PostMapping("/{id}/levels/{levelId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> updateChecklistTemplateLevel(@PathVariable Long id, @PathVariable Long levelId,
                                                          @Valid @RequestBody UpdateChecklistLevelReq updateChecklistLevelReq) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.
                updateLevel(id, levelId, updateChecklistLevelReq)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteChecklistTemplate(@PathVariable Long id) {
        checklistTemplateService.delete(id);
        return ResponseEntity.ok().build();
    }

    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteChecklistTemplateLevel(@PathVariable Long id, @PathVariable Long levelId) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.deleteLevel(id, levelId)));
    }

    @PostMapping("/{id}/levels/{levelId}/pruefkriterien")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> addPruefkriterienToLevel(@PathVariable Long id, @PathVariable Long levelId,
                                                      @Valid @RequestBody AddPruefkriteriumRequest addPruefkriteriumRequest) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.
                addPruefkriterium(id, levelId, addPruefkriteriumRequest)));
    }

    @PostMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> updateChecklistPruefkriterium(@PathVariable Long id, @PathVariable Long levelId,
                                                           @PathVariable Long kriterienId,
                                                           @Valid @RequestBody UpdateChecklistPruefkriteriumReq updateChecklistPruefkriteriumReq) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.
                updatePruefkriterium(id, levelId, kriterienId, updateChecklistPruefkriteriumReq)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteKriterium(@PathVariable Long id, @PathVariable Long levelId,
                                             @PathVariable Long kriterienId) {
        return ResponseEntity.ok(ModelMapper.mapChecklist(checklistTemplateService.
                deletePruefkriterium(id, levelId, kriterienId)));
    }

    @PostMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}/pictos")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> addPicto(@PathVariable Long id, @PathVariable Long levelId,
                                      @PathVariable Long kriterienId,
                                      @Valid @RequestBody AddPictoRequest addPictoRequest) {
        return ResponseEntity.ok(ModelMapper.mapPruefkriterium(checklistTemplateService.
                addPicto(id, levelId, kriterienId, addPictoRequest)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}/levels/{levelId}/pruefkriterien/{kriterienId}/pictos/{pictoId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> removePicto(@PathVariable Long id, @PathVariable Long levelId,
                                         @PathVariable Long kriterienId, @PathVariable Long pictoId) {
        return ResponseEntity.ok(ModelMapper.mapPruefkriterium(checklistTemplateService.
                removePicto(id, levelId, kriterienId, pictoId)));
    }
}
