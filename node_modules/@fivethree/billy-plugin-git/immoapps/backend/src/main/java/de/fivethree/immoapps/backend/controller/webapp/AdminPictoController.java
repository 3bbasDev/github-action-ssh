package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.domain.picto.AdminPicto;
import de.fivethree.immoapps.backend.model.payload.res.common.Base64ImagesRep;
import de.fivethree.immoapps.backend.model.payload.res.common.ImagesRep;
import de.fivethree.immoapps.backend.model.payload.res.common.UploadFileResponse;
import de.fivethree.immoapps.backend.model.payload.res.common.UploadFilesResponse;
import de.fivethree.immoapps.backend.service.PictoService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/immoapps/api/adminpicto")
public class AdminPictoController {
    @Autowired
    private PictoService pictoService;

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> uploadPicto(@RequestParam("file") MultipartFile file) {
        AdminPicto picto = this.pictoService.saveAdminPicto(file);

        return ResponseEntity.created(URI.create(picto.getUrl()))
                .body(ModelMapper.mapFileUpload(picto, file.getSize()));
    }

    @PostMapping("/multiple")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> uploadPictos(@RequestParam("files") MultipartFile[] files) {
        List<UploadFileResponse> uploades = new ArrayList<>();

        for (MultipartFile file : files) {
            AdminPicto picto = this.pictoService.saveAdminPicto(file);
            uploades.add(ModelMapper.mapFileUpload(picto, file.getSize()));
        }

        return ResponseEntity.ok(new UploadFilesResponse(uploades));
    }

    @CrossOrigin
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> deletePicto(@PathVariable Long id) {
        this.pictoService.deleteAdminPicto(id);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPicto(@PathVariable Long id) {
        AdminPicto picto = this.pictoService.getAdminPictoById(id);
        return ResponseEntity.ok().contentType(MediaType.parseMediaType(picto.getType()))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + picto.getName() + "\"")
                .body(new ByteArrayResource(picto.getData()));
    }

    @GetMapping
    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPictos() {
        List<AdminPicto> pictos = this.pictoService.getAllAdminPictos();
        return ResponseEntity.ok(new ImagesRep(ModelMapper.mapImages(pictos)));
    }

    @GetMapping("/base64")
    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPictoBase64() {
        List<AdminPicto> all = this.pictoService.getAllAdminPictos();
        return ResponseEntity.ok(new Base64ImagesRep(ModelMapper.mapImagesToBase64Images(all)));
    }

    @GetMapping("/base64/{id}")
    @PreAuthorize("hasRole('ADMIN') or hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPictoBase64(@PathVariable Long id) {
        AdminPicto picto = this.pictoService.getAdminPictoById(id);
        return ResponseEntity.ok(ModelMapper.mapImageToBase64Image(picto));
    }
}
