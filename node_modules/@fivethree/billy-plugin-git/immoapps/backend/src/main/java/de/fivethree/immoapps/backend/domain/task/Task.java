package de.fivethree.immoapps.backend.domain.task;

import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.User;

import javax.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "task")
public class Task {
    @Id
    @GeneratedValue(generator = "sequence")
    @SequenceGenerator(name = "sequence", sequenceName = "MY_SEQ", allocationSize = 1, initialValue = 1000)
    private Long id;

    @Column
    private String name;

    @Column
    private Boolean active = true;

    @Column
    private LocalDateTime lastScheduled;

    @Column
    private LocalDate startDate;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "task", cascade = {CascadeType.ALL}, orphanRemoval = true)
    private Set<TaskPruefkriterium> pruefkriterien = new HashSet<>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "schedule_option_id")
    private TaskScheduleOption scheduleOption;

    /**
     * The target user of this task who has to do it in the end.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;

    /**
     * The user who created this task.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "auftrag_geber_id")
    private User auftragGeber;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "property_id")
    private Property property;

    @Column
    private LocalDateTime createdDate;

    @Column
    private LocalDateTime updatedDate;

    public Task() {}

    public Task(Property property, String name, Boolean active, TaskScheduleOption scheduleOption,
                User targetUser, User auftragGeber, LocalDate startDate) {
        this.property = property;
        this.name = name;
        this.active = active;
        this.scheduleOption = scheduleOption;
        this.user = targetUser;
        this.auftragGeber = auftragGeber;
        this.startDate = startDate;
    }

    public Property getProperty() {
        return property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public LocalDateTime getLastScheduled() {
        return lastScheduled;
    }

    public void setLastScheduled(LocalDateTime lastScheduled) {
        this.lastScheduled = lastScheduled;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    public Set<TaskPruefkriterium> getPruefkriterien() {
        return pruefkriterien;
    }

    public void setPruefkriterien(Set<TaskPruefkriterium> pruefkriterien) {
        this.pruefkriterien = pruefkriterien;
    }

    public TaskScheduleOption getScheduleOption() {
        return scheduleOption;
    }

    public void setScheduleOption(TaskScheduleOption scheduleOption) {
        this.scheduleOption = scheduleOption;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public User getAuftragGeber() {
        return auftragGeber;
    }

    public void setAuftragGeber(User auftragGeber) {
        this.auftragGeber = auftragGeber;
    }

    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    public LocalDateTime getUpdatedDate() {
        return updatedDate;
    }

    public TaskScheduleOptionEnum getTaskScheduledOptionEnum() {
        return TaskScheduleOptionEnum.getById(this.getScheduleOption().getId());
    }

    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        updatedDate = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedDate = LocalDateTime.now();
    }
}
