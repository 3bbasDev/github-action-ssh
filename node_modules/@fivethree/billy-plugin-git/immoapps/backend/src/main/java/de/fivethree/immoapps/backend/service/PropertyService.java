package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.checklist.Checklist;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplate;
import de.fivethree.immoapps.backend.domain.inspection.Inspection;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.task.Task;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.exceptions.EntityNotFoundException;
import de.fivethree.immoapps.backend.model.payload.req.property.UpdatePropertyRequest;
import de.fivethree.immoapps.backend.repository.*;
import de.fivethree.immoapps.backend.repository.checklist.ChecklistTemplateRepository;
import de.fivethree.immoapps.backend.repository.inspection.InspectionRepository;
import de.fivethree.immoapps.backend.repository.task.TaskRepository;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Service
@Transactional
public class PropertyService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PropertyRepository propertyRepository;

    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private ChecklistTemplateRepository checklistTemplateRepo;

    @Autowired
    private InspectionRepository inspectionRepo;

    @Autowired
    private TaskRepository taskRepo;

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Property> getProperties() {
        User hausverwalter = userRepository.findByIdAndFetchOwnProperties(getHausverwalterId());
        return hausverwalter.getOwnProperties();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Property getPropertyAndBoundUsers(final Long propertyId) {
        Property property = propertyRepository.findByIdAndHausverwalterAndFetchUsers(propertyId, getHausverwalterId());

        if (property == null) {
            throw new EntityNotFoundException(propertyId, "Objekt");
        }

        return property;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Property getPropertyByIdAndFetchTasks(final Long propertyId) {
        Property property = propertyRepository.findByIdAndHausverwalterAndFetchTasks(propertyId,
                getHausverwalterId());

        if (property == null) {
            throw new EntityNotFoundException(propertyId, "Objekt");
        }

        return property;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('USER') or hasRole('MITARBEITER')")
    public Property getPropertyById(final Long propertyId) {
        Property property = null;

        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER) || securityFacade.hasRole(RoleName.ROLE_HAUSVERWALTER)) {
            property = propertyRepository.findByIdAndHausverwalter(propertyId, getHausverwalterId());
        } else if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            User currentUser = userRepository.getOne(securityFacade.getCurrentUser().getId());
            property = propertyRepository.findByIdAndUsersContains(propertyId, currentUser);
        }

        if (property == null) {
            throw new EntityNotFoundException(propertyId, "Objekt");
        }

        return property;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('USER') or hasRole('MITARBEITER')")
    public Property getPropertyByIdAndFetchAllDetails(final Long propertyId) {
        Property property = null;

        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER) || securityFacade.hasRole(RoleName.ROLE_HAUSVERWALTER)) {
            property = propertyRepository.findByIdAndHausverwalterAndFetchAllDetails(propertyId, getHausverwalterId());
        } else if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            User currentUser = userRepository.getOne(securityFacade.getCurrentUser().getId());
            property = this.propertyRepository.findByIdAndUsersContainsAndFetchAllDetails(propertyId, currentUser);
        }

        if (property == null) {
            throw new EntityNotFoundException(propertyId, "Objekt");
        }

        return property;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<User> linkUserAndProperty(final Long userId, final Long propertyId) {
        Property property = this.getPropertyAndBoundUsers(propertyId);
        User user = getUserByIdAndHausverwalter(userId);
        property.getUsers().add(user);
        property = propertyRepository.save(property);
        return property.getUsers();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<User> linkUsersToProperty(final Long propertyId, List<Long> userIds) {
        Property property = this.getPropertyAndBoundUsers(propertyId);
        Set<User> usersBefore = new HashSet<>();
        usersBefore.addAll(property.getUsers());

        if (userIds == null || userIds.size() == 0) {
            property.setUsers(new HashSet<>());
        } else {
            Set<User> usersToAdd = new HashSet<>();

            for (Long userId : userIds) {
                User user = getUserByIdAndHausverwalter(userId);
                usersToAdd.add(user);
            }

            property.setUsers(usersToAdd);
        }

        Set<User> removedUsers = new HashSet<>();

        for (User userBefore : usersBefore) {
            if (!property.getUsers().contains(userBefore)) {
                removedUsers.add(userBefore);
            }
        }

        if (removedUsers.size() > 0) {
            this.cleanUpRemovedUsers(removedUsers, property);
        }

        property = propertyRepository.save(property);
        return property.getUsers();
    }

    /**
     * When ever users are removed from a property there are some entities which belongs to the users and to the property.
     * We want to clean up those entities. Otherwise they would become nirvana entries.
     * @param users who are removed from the property.
     * @param property the property which doesn't contain the users anymore.
     */
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private void cleanUpRemovedUsers(Collection<User> users, Property property) {
        Set<Inspection> openInspections = this.inspectionRepo.findAllOpenByUsersAndProperty(users, property);
        if (openInspections != null && openInspections.size() > 0) {
            this.inspectionRepo.deleteAll(openInspections);
        }

        Set<Task> tasks = this.taskRepo.findAllByUsersAndProperty(users, property);

        if (tasks != null && tasks.size() > 0) {
            this.taskRepo.deleteAll(tasks);
        }
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<User> unlinkUserAndProperty(final Long userId, final Long propertyId) {
        Property property = this.getPropertyAndBoundUsers(propertyId);
        User user = getUserByIdAndHausverwalter(userId);
        property.getUsers().remove(user);
        this.cleanUpRemovedUsers(Collections.singletonList(user), property);
        property = propertyRepository.save(property);
        return property.getUsers();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Property updateProperty(Long id, UpdatePropertyRequest updatePropertyRequest) {
        Property property = this.getPropertyById(id);
        ModelMapper.fillPropertyInfo(property, updatePropertyRequest);
        return this.propertyRepository.save(property);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private User getUserByIdAndHausverwalter(final Long userId) {
        User user = userRepository.findByIdAndHausverwalterAndFetchProperties(userId, getHausverwalterId());

        if (user == null) {
            throw new EntityNotFoundException(userId, "User");
        }

        return user;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Property createProperty(String name, String city, String zip, String streetAndNo) {
        Long hausverwalterId = getHausverwalterId();
        User hausverwalter = userRepository.getOne(hausverwalterId);

        Property property = new Property(name, city, zip, streetAndNo);
        property.setHausverwalter(hausverwalter);

        //get all default checklists and add them to the new property.
        Set<ChecklistTemplate> templatesToAdd = checklistTemplateRepo
                .getAllDefaultByHausverwalterAndFetchLevelsAndFetchKriterien(hausverwalterId);

        List<Checklist> checklists = ModelMapper.mapChecklistTemplatesToChecklists(templatesToAdd, property);
        property.getChecklists().addAll(checklists);

        return propertyRepository.save(property);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public void deleteProperty(Long id) {
        Property property = this.getPropertyById(id);
        this.propertyRepository.delete(property);
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    private Long getHausverwalterId() {
        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            User mitarbeiter = userRepository.getOne(securityFacade.getCurrentUser().getId());
            return mitarbeiter.getVorgesetzter().getId();
        }

        return securityFacade.getCurrentUser().getId();
    }
}
