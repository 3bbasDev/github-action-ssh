package de.fivethree.immoapps.backend.service;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.Pipeline;
import com.itextpdf.tool.xml.XMLWorker;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.html.Tags;
import com.itextpdf.tool.xml.net.FileRetrieve;
import com.itextpdf.tool.xml.net.FileRetrieveImpl;
import com.itextpdf.tool.xml.parser.XMLParser;
import com.itextpdf.tool.xml.pipeline.css.CSSResolver;
import com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline;
import com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline;
import com.itextpdf.tool.xml.pipeline.html.AbstractImageProvider;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext;
import de.fivethree.immoapps.backend.exceptions.PDFReportCreationException;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Base64;

@Service
public class PDFReportService {
    public byte[] generatePDFReportFromHTMLContent(String htmlContent, String cssLocation, String imageLocation) {
        try {
            Document document = new Document();
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            XMLParser p = new XMLParser(getXMLWorker(document, byteArrayOutputStream, cssLocation, imageLocation));
            p.parse(new ByteArrayInputStream(htmlContent.getBytes()));
            document.close();

            return byteArrayOutputStream.toByteArray();
        } catch (DocumentException | IOException e) {
            throw new PDFReportCreationException("Der Report konnte nicht erstellt werden. " +
                    "Es gab ein Problem bei der HTML zu PDF Konvertierung");
        }
    }

    public byte[] generatePDFReportFromHTMLFile(String htmlFileLocation, String cssLocation, String imageLocation) {
        try {
            Document document = new Document();
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            XMLParser p = new XMLParser(getXMLWorker(document, byteArrayOutputStream, cssLocation, imageLocation));
            p.parse(new FileInputStream(htmlFileLocation));
            document.close();

            return byteArrayOutputStream.toByteArray();
        } catch (DocumentException | IOException e) {
            throw new PDFReportCreationException("Der Report konnte nicht erstellt werden. " +
                    "Es gab ein Problem bei der HTML zu PDF Konvertierung");
        }
    }

    private XMLWorker getXMLWorker(Document document, ByteArrayOutputStream byteArrayOutputStream,
                                   String cssLocation, String imageLocation) throws DocumentException {
        PdfWriter writer = PdfWriter.getInstance(document, byteArrayOutputStream);
        document.open();

        HtmlPipelineContext htmlContext = new HtmlPipelineContext(null);
        htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());
        htmlContext.setImageProvider(new AbstractImageProvider() {
            @Override
            public Image retrieve(String src) {
                int pos = src.indexOf("base64,");
                try {
                    if (src.startsWith("data") && pos > 0) {
                        String base64Data = (src.substring(pos + 7)).trim();
                        byte[] img = Base64.getDecoder().decode(base64Data);
                        Image image = Image.getInstance(img);
                        return image;
                    }
                    else {
                        return Image.getInstance(src);
                    }
                } catch (BadElementException ex) {
                    return null;
                } catch (IOException ex) {
                    return null;
                }
            }

            @Override
            public String getImageRootPath() {
                return imageLocation;
            }

        });
        CSSResolver cssResolver =
                XMLWorkerHelper.getInstance().getDefaultCssResolver(true);
        /*

        FileRetrieve retrieve = new FileRetrieveImpl(cssLocation);
        cssResolver.setFileRetrieve(retrieve); */

        htmlContext.autoBookmark(true);
        htmlContext.setAcceptUnknown(true);


        Pipeline<?> pipeline =
                new CssResolverPipeline(cssResolver,
                        new HtmlPipeline(htmlContext,
                                new PdfWriterPipeline(document, writer)));
        return new XMLWorker(pipeline, true);
    }
}
