package de.fivethree.immoapps.backend.exceptions;

import de.fivethree.immoapps.backend.model.payload.res.common.ApiResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
@RestController
public class ExceptionHandlerController extends ResponseEntityExceptionHandler {
    @ExceptionHandler(CriteriaNotAllowedException.class)
    public final ResponseEntity<?> handleException(CriteriaNotAllowedException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(DataIntegrityException.class)
    public final ResponseEntity<?> handleException(DataIntegrityException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(EmailAlreadyExistingException.class)
    public final ResponseEntity<?> handleException(EmailAlreadyExistingException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(new ApiResponse(false, "Die Emailadresse: " + ex.getEmail() + " wird bereits verwendet"));
    }

    @ExceptionHandler(EntityNotFoundException.class)
    public final ResponseEntity<?> handleException(EntityNotFoundException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse(false,
                ex.getEntityName() + " mit der id: " + ex.getEntityId() + " nicht gefunden"));
    }

    @ExceptionHandler(EmailNotFoundException.class)
    public final ResponseEntity<?> handleException(EmailNotFoundException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(FileStorageException.class)
    public final ResponseEntity<?> handleException(FileStorageException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                new ApiResponse(false, ex.getMessage()));
    }

    @ExceptionHandler(FTLReplacementException.class)
    public final ResponseEntity<?> handleException(FTLReplacementException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                new ApiResponse(false, ex.getMessage()));
    }

    @ExceptionHandler(PDFReportCreationException.class)
    public final ResponseEntity<?> handleException(PDFReportCreationException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                new ApiResponse(false, ex.getMessage()));
    }

    @ExceptionHandler(NotAuthorizedException.class)
    public final ResponseEntity<?> handleException(NotAuthorizedException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(new ApiResponse(false, ex.getMessage()));
    }

    @ExceptionHandler(SendMailException.class)
    public final ResponseEntity<?> handleException(SendMailException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                new ApiResponse(false, ex.getMessage()));
    }

    @ExceptionHandler(InspectionAlreadyFinishedException.class)
    public final ResponseEntity<?> handleException(InspectionAlreadyFinishedException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(KriteriumNotPresentException.class)
    public final ResponseEntity<?> handleException(KriteriumNotPresentException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(KriteriumAlreadyInspectedException.class)
    public final ResponseEntity<?> handleException(KriteriumAlreadyInspectedException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(UserPropertyException.class)
    public final ResponseEntity<?> handleException(UserPropertyException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(PictoInUseException.class)
    public final ResponseEntity<?> handleException(PictoInUseException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(new ApiResponse(false,
                ex.getMessage()));
    }

    @ExceptionHandler(NotImplementedException.class)
    public final ResponseEntity<?> handleException(NotImplementedException ex, WebRequest request) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ApiResponse(false,
                ex.getMessage()));
    }


}
