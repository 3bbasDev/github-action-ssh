package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.annotations.CurrentUser;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.model.payload.req.user.ChangePasswordRequest;
import de.fivethree.immoapps.backend.model.payload.req.user.LoginRequest;
import de.fivethree.immoapps.backend.model.payload.res.user.JwtAuthenticationHausverwalterResponse;
import de.fivethree.immoapps.backend.model.payload.res.user.JwtAuthenticationUserResponse;
import de.fivethree.immoapps.backend.repository.UserRepository;
import de.fivethree.immoapps.backend.security.JwtTokenProvider;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.security.UserPrincipal;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;

@RestController
@RequestMapping("/immoapps/api/auth")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtTokenProvider tokenProvider;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private SecurityFacade securityFacade;

    @PreAuthorize("hasRole('ADMIN') or hasRole('MITARBEITER') or hasRole('HAUSVERWALTER')" +
            "or hasRole('USER')")
    @PostMapping("/changepassword")
    public ResponseEntity<?> changePassword(@CurrentUser UserPrincipal currentUser,
                                            @Valid @RequestBody ChangePasswordRequest changePasswordRequest) {
        User currentUserEntity = this.userRepository.getOne(currentUser.getId());

        currentUserEntity.setPassword(passwordEncoder.encode(changePasswordRequest.getNewPassword()));

        this.userRepository.save(currentUserEntity);

        return ResponseEntity.ok().build();
    }

    @PostMapping("/signin")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getEmail(),
                        loginRequest.getPassword()
                )
        );

        SecurityContextHolder.getContext().setAuthentication(authentication);

        UserPrincipal userPrincipal = (UserPrincipal) authentication.getPrincipal();
        User user = this.userRepository.getUserByIdAndFetchAdditionalInfo(userPrincipal.getId());

        String jwt = tokenProvider.generateToken(authentication);

        if (securityFacade.hasRole(user, RoleName.ROLE_HAUSVERWALTER)) {
            return ResponseEntity.ok(new JwtAuthenticationHausverwalterResponse(jwt, ModelMapper.mapHausverwalter(user)));
        } else {
            return ResponseEntity.ok(new JwtAuthenticationUserResponse(jwt, ModelMapper.mapUser(user)));
        }
    }
}
