package de.fivethree.immoapps.backend;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.Pipeline;
import com.itextpdf.tool.xml.XMLWorker;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.html.Tags;
import com.itextpdf.tool.xml.net.FileRetrieve;
import com.itextpdf.tool.xml.net.FileRetrieveImpl;
import com.itextpdf.tool.xml.parser.XMLParser;
import com.itextpdf.tool.xml.pipeline.css.CSSResolver;
import com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline;
import com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline;
import com.itextpdf.tool.xml.pipeline.html.AbstractImageProvider;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext;

import java.io.*;

public class PdfTest {
    public static void main(String[] args) throws DocumentException, IOException {
        byte[] pdfBytes = generatePDFFromHTMLfile("src/main/resources/pdflayouts/testlayout/index.html",
                "src/main/resources/pdflayouts/testlayout",
                "src/main/resources/pdflayouts/testlayout");

        FileOutputStream fos = new FileOutputStream("/Users/frank/Desktop/test.pdf");
        fos.write(pdfBytes);
        fos.close();
    }


    private static byte[] generatePDFFromHTMLfile(String htmlFileLocation, String cssLocation, String imageLocation) throws IOException, DocumentException {
        Document document = new Document();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

        PdfWriter writer = PdfWriter.getInstance(document, byteArrayOutputStream);
        document.open();

        HtmlPipelineContext htmlContext = new HtmlPipelineContext(null);
        htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());
        htmlContext.setImageProvider(new AbstractImageProvider() {
            public String getImageRootPath() {
                return imageLocation;
            }
        });
        CSSResolver cssResolver =
                XMLWorkerHelper.getInstance().getDefaultCssResolver(false);

        FileRetrieve retrieve = new FileRetrieveImpl(cssLocation);
        cssResolver.setFileRetrieve(retrieve);


        Pipeline<?> pipeline =
                new CssResolverPipeline(cssResolver,
                        new HtmlPipeline(htmlContext,
                                new PdfWriterPipeline(document, writer)));
        XMLWorker worker = new XMLWorker(pipeline, true);
        XMLParser p = new XMLParser(worker);
        p.parse(new FileInputStream(htmlFileLocation));
        document.close();

        return byteArrayOutputStream.toByteArray();
    }

    private static byte[] generatePDFFromHTML(String htmlContent, String cssLocation, String imageLocation) throws IOException, DocumentException {
        Document document = new Document();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

        PdfWriter writer = PdfWriter.getInstance(document, byteArrayOutputStream);
        document.open();

        HtmlPipelineContext htmlContext = new HtmlPipelineContext(null);
        htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());
        htmlContext.setImageProvider(new AbstractImageProvider() {
            public String getImageRootPath() {
                return imageLocation;
            }
        });
        CSSResolver cssResolver =
                XMLWorkerHelper.getInstance().getDefaultCssResolver(false);

        FileRetrieve retrieve = new FileRetrieveImpl(cssLocation);
        cssResolver.setFileRetrieve(retrieve);


        Pipeline<?> pipeline =
                new CssResolverPipeline(cssResolver,
                        new HtmlPipeline(htmlContext,
                                new PdfWriterPipeline(document, writer)));
        XMLWorker worker = new XMLWorker(pipeline, true);
        XMLParser p = new XMLParser(worker);
        p.parse(new ByteArrayInputStream(htmlContent.getBytes()));
        document.close();

        return byteArrayOutputStream.toByteArray();
    }
}
