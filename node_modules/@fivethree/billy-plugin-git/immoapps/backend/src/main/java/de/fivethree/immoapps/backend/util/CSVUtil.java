package de.fivethree.immoapps.backend.util;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;

public class CSVUtil {
    public static List<Map<String, String>> filterByKeyAndItsValue(String key, String value, List<Map<String, String>> csv) {
        List<Map<String, String>> ret = new ArrayList<>();

        for (Map<String, String> csvEntry : csv) {
            String csvValue = csvEntry.get(key);
            if (value != null && !value.isEmpty() && !value.trim().isEmpty() &&
                    csvValue != null && !csvValue.isEmpty() && !csvValue.trim().isEmpty() &&
                    csvValue.trim().equals(value)) {
                ret.add(csvEntry);
            }
        }

        return ret;
    }

    public static List<Map<String, String>> filterWhereValueIsNullOrEmpty(String key, List<Map<String, String>> csv) {
        List<Map<String, String>> ret = new ArrayList<>();

        for (Map<String, String> csvEntry : csv) {
            String csvValue = csvEntry.get(key);

            if (csvValue == null || csvValue.isEmpty() || csvValue.trim().isEmpty()) {
                ret.add(csvEntry);
            }
        }

        return ret;
    }


    public static List<Map<String, String>> getCSVValuesForHeaders(Collection<String> headerValues, InputStream csvInput) {
        List<Map<String, String>> csv = getAllCsvValues(csvInput);
        List<Map<String, String>> ret = new ArrayList<>();

        for (Map<String, String> csvEntry : csv) {
            Map<String, String> matches = new HashMap<>();
            for (String headerValue : headerValues) {
                String value = csvEntry.get(headerValue);
                matches.put(headerValue, value);
            }
            ret.add(matches);
        }

        return ret;
    }

    public static List<Map<String, String>> getAllCsvValues(InputStream csvInput) {
        try {
            CsvSchema bootstrapSchema = CsvSchema.emptySchema().withHeader().withColumnSeparator(';');
            CsvMapper mapper = new CsvMapper();
            MappingIterator<Map<String, String>> it = mapper.readerFor(Map.class).with(bootstrapSchema).readValues(csvInput);
            return it.readAll();
        } catch (Exception e) {
            return Collections.emptyList();
        }
    }

    public static byte[] writeCsvFile(Collection<String> headers, Collection<Map<String, String>> csvLines) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            CsvMapper mapper = new CsvMapper();
            CsvSchema schema = CsvSchema.builder().addColumns(headers, CsvSchema.ColumnType.STRING).build()
                    .withHeader().withColumnSeparator(';');
            mapper.writer(schema).writeValues(baos).writeAll(csvLines);
            return baos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
