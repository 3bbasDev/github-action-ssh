package de.fivethree.immoapps.backend.domain.checklist;

import de.fivethree.immoapps.backend.domain.property.Property;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "checklist")
public class Checklist implements IChecklistTemplate {
    @Id
    @GeneratedValue(generator = "sequence")
    @SequenceGenerator(name = "sequence", sequenceName = "MY_SEQ", allocationSize = 1, initialValue = 1000)
    private Long id;

    @NotBlank
    @Column
    private String name;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "property_id")
    private Property property;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "checklist", cascade = {CascadeType.ALL}, orphanRemoval = true)
    private Set<ChecklistLevel> levels = new HashSet<>();

    @Column
    private LocalDateTime createdDate;

    @Column
    private LocalDateTime updatedDate;

    public Checklist() {
    }

    public Checklist(String name) {
        this.name = name;
    }

    @Override
    public Set<ChecklistLevel> getLevels() {
        return levels;
    }

    public void setLevels(Set<ChecklistLevel> levels) {
        this.levels = levels;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Property getProperty() {
        return property;
    }

    public void setProperty(Property property) {
        this.property = property;
    }

    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    public LocalDateTime getUpdatedDate() {
        return updatedDate;
    }

    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        updatedDate = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedDate = LocalDateTime.now();
    }

    public Boolean getDefaultChecklist() {
        return false;
    }
}
