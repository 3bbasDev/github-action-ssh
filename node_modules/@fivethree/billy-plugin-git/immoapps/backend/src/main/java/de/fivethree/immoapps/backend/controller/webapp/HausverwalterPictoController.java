package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.domain.picto.HausverwalterPicto;
import de.fivethree.immoapps.backend.model.payload.res.common.Base64ImagesRep;
import de.fivethree.immoapps.backend.model.payload.res.common.ImagesRep;
import de.fivethree.immoapps.backend.model.payload.res.common.UploadFileResponse;
import de.fivethree.immoapps.backend.model.payload.res.common.UploadFilesResponse;
import de.fivethree.immoapps.backend.service.PictoService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@RestController
@RequestMapping("/immoapps/api/hausverwalterpicto")
public class HausverwalterPictoController {

    @Autowired
    private PictoService pictoService;

    @PostMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> uploadPicto(@RequestParam("file") MultipartFile file) {
        HausverwalterPicto picto = this.pictoService.saveHausverwalterPicto(file);
        return ResponseEntity.created(URI.create(picto.getUrl()))
                .body(ModelMapper.mapFileUpload(picto, file.getSize()));
    }

    @PostMapping("/multiple")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> uploadPictos(@RequestParam("files") MultipartFile[] files) {
        List<UploadFileResponse> uploades = new ArrayList<>();

        for (MultipartFile file : files) {
            HausverwalterPicto picto = this.pictoService.saveHausverwalterPicto(file);
            uploades.add(ModelMapper.mapFileUpload(picto, file.getSize()));
        }
        return ResponseEntity.ok(new UploadFilesResponse(uploades));
    }


    @GetMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPictos() {
        Set<HausverwalterPicto> pictos = this.pictoService.getAllHausverwalterPictos();
        return ResponseEntity.ok(new ImagesRep(ModelMapper.mapImages(pictos)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deletePicto(@PathVariable Long id) {
        this.pictoService.deleteHausverwalterPicto(id);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPicto(@PathVariable Long id) {
        HausverwalterPicto picto = this.pictoService.getHausverwalterPictoById(id);

        return ResponseEntity.ok().contentType(MediaType.parseMediaType(picto.getType()))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + picto.getName() + "\"")
                .body(new ByteArrayResource(picto.getData()));
    }

    @GetMapping("/base64")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPictosBase64() {
        Set<HausverwalterPicto> all = this.pictoService.getAllHausverwalterPictos();
        return ResponseEntity.ok(new Base64ImagesRep(ModelMapper.mapImagesToBase64Images(all)));
    }

    @GetMapping("/base64/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadPictoBase64(@PathVariable Long id) {
        HausverwalterPicto picto = this.pictoService.getHausverwalterPictoById(id);
        return ResponseEntity.ok(ModelMapper.mapImageToBase64Image(picto));
    }
}
