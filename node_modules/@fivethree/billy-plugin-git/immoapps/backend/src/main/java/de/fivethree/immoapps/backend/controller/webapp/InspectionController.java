package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.domain.inspection.Inspection;
import de.fivethree.immoapps.backend.domain.inspection.InspectionImage;
import de.fivethree.immoapps.backend.exceptions.*;
import de.fivethree.immoapps.backend.model.payload.req.inspection.CreateInspectionRequest;
import de.fivethree.immoapps.backend.model.payload.res.common.ApiResponse;
import de.fivethree.immoapps.backend.model.payload.res.inspection.InspectionsRep;
import de.fivethree.immoapps.backend.service.InspectionService;
import de.fivethree.immoapps.backend.service.ReportService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Set;

/*
Inspektions Prozess:
Zunächst muss eine Inspektion angelegt werden.
Dazu wird der Request app/inspections/'add new inspection' benötigt.
Hier wird lediglich angegeben welches Objekt (property) inspiziert wird und welche Prüfpunkte übermittelt werden sollen.
Nach diesem Request gibt es eine Inspektion mit dem Flag: 'done' === false, nennen wir diese offene Inspektion.
Zugriff auf eine offene Inspektion hat tatsächlich nur der Ersteller dieser Inspektion mit dem Request /app/inspections/'get open inspections'.
Die Inspektion bleibt so lange offen bis alle Prüfpunkte der Inspektion mit einem Ergebnis verknüpft worden sind.
Ein solches Ergebnis zu einem Prüfpunkt einer offenen Inspektion wird mit dem Request /app/inspections/'attach result to inspection...' erstellt.
Ein Ergebnis ist entweder positiv oder negativ und kann mit einem Text(description) und/oder Bildern (images) versehen werden (Siehe drei unterschiedliche postman requests).
Wenn alle Prüfpunkte der Inspektion mit einem Ergebis versehen worden sind, steht das Flag 'done' auf true.
Dadurch verschwindet diese Inspektion als offene Inspektion für den Nutzer und wird für Hausverwalter und Mitarbeiter der Immobilie sichtbar.
Mitarbeiter und Hausverwalter können getätigte Ablesungen mit den Request /inspections/'get all closed inspections' und /inspections/'get closed inspections of property' angezeigt werden.
 */
@RestController
@RequestMapping("/immoapps/api")
public class InspectionController {

    @Autowired
    private InspectionService inspectionService;

    @Autowired
    private ReportService reportService;

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @GetMapping("/inspections")
    public ResponseEntity<?> getClosedInspections() {
        Set<Inspection> inspections = this.inspectionService.getClosedInspections();
        return ResponseEntity.ok(new InspectionsRep(ModelMapper.mapInspections(inspections)));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @GetMapping("/properties/{id}/inspections")
    public ResponseEntity<?> getClosedInspectionsForProperty(@PathVariable Long id) {
        Set<Inspection> inspections = this.inspectionService.getClosedInspectionsForProperty(id);
        return ResponseEntity.ok(new InspectionsRep(ModelMapper.mapInspections(inspections)));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @GetMapping("/openinspections")
    public ResponseEntity<?> getOpenInspections() {
        Set<Inspection> inspections = this.inspectionService.getOpenInspections();
        return ResponseEntity.ok(new InspectionsRep(ModelMapper.mapInspections(inspections)));
    }

    @CrossOrigin
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @DeleteMapping("/openinspections/{id}")
    public ResponseEntity<?> deleteOpenInspection(@PathVariable Long id) {
        this.inspectionService.deleteOpenInspection(id);
        return ResponseEntity.ok().build();
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @GetMapping("/properties/{id}/openinspections")
    public ResponseEntity<?> getOpenInspectionsForProperty(@PathVariable Long id) {
        Set<Inspection> inspections = this.inspectionService.getOpenInspectionsForProperty(id);
        return ResponseEntity.ok(new InspectionsRep(ModelMapper.mapInspections(inspections)));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @PostMapping("/properties/{id}/inspections")
    public ResponseEntity<?> createInspectionForProperty(@PathVariable Long id,
                                                         @RequestBody @Valid @NotNull CreateInspectionRequest createInspectionRequest) {
        Inspection inspection = this.inspectionService.addInspectionForUser(id,
                createInspectionRequest.getAssignedUserId(),
                createInspectionRequest.getInspectionCriterias());
        return ResponseEntity.ok(ModelMapper.mapInspection(inspection));
    }

    @GetMapping("/inspections/images/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadInspectionImage(@PathVariable Long id) {
        InspectionImage image = this.inspectionService.getInspectionImageById(id);

        return ResponseEntity.ok().contentType(MediaType.parseMediaType(image.getType()))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + image.getName() + "\"")
                .body(new ByteArrayResource(image.getData()));
    }

    @GetMapping("/inspections/images/{id}/base64")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public ResponseEntity<?> downloadInspectionImageAsBase64(@PathVariable Long id) {
        InspectionImage image = this.inspectionService.getInspectionImageById(id);
        return ResponseEntity.ok(ModelMapper.mapImageToBase64Image(image));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @GetMapping("/inspections/{id}/report")
    public ResponseEntity<?> getInspectionReport(@PathVariable Long id) {
        Inspection inspection = this.inspectionService.getClosedInspectionById(id);
        byte[] reportFile = this.reportService.generateInspectionReport(inspection);
        return ResponseEntity.ok().contentType(MediaType.parseMediaType("application/pdf"))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + "report.pdf" + "\"")
                .body(new ByteArrayResource(reportFile));
    }

}
