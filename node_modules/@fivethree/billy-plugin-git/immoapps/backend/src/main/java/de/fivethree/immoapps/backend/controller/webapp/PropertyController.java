package de.fivethree.immoapps.backend.controller.webapp;

import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.model.payload.req.property.CreatePropertyRequest;
import de.fivethree.immoapps.backend.model.payload.req.property.UpdatePropertyRequest;
import de.fivethree.immoapps.backend.model.payload.req.user.LinkUsersToPropertyReq;
import de.fivethree.immoapps.backend.model.payload.res.property.GetPropertiesResponse;
import de.fivethree.immoapps.backend.model.payload.res.property.GetPropertyAndBoundUsersResponse;
import de.fivethree.immoapps.backend.model.payload.res.user.GetUsersResponse;
import de.fivethree.immoapps.backend.service.PropertyService;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Set;

@RestController
@RequestMapping("/immoapps/api/properties")
public class PropertyController {
    @Autowired
    private PropertyService propertyService;

    @GetMapping
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getProperties() {
        Set<Property> props = propertyService.getProperties();
        return ResponseEntity.ok(new GetPropertiesResponse(ModelMapper.mapProperties(props)));
    }


    @GetMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getProperty(@PathVariable Long id) {
        Property prop = propertyService.getPropertyById(id);
        return ResponseEntity.ok(ModelMapper.mapProperty(prop));
    }

    @GetMapping("/{id}/users")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> getPropertyAndBoundUsers(@PathVariable Long id) {
        Property prop = propertyService.getPropertyAndBoundUsers(id);
        return ResponseEntity.ok(new GetPropertyAndBoundUsersResponse(prop.getId(), prop.getName(), prop.getCity(),
                prop.getZip(), prop.getStreetAndNo(), ModelMapper.mapUsers(prop.getUsers())));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @PostMapping
    public ResponseEntity<?> addProperty(@Valid @RequestBody CreatePropertyRequest createPropertyRequest) {
        Property result = this.propertyService.createProperty(
                createPropertyRequest.getName(),
                createPropertyRequest.getCity(),
                createPropertyRequest.getZip(),
                createPropertyRequest.getStreetAndNo());

        return ResponseEntity.ok(ModelMapper.mapProperty(result));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    @PostMapping("/{id}")
    public ResponseEntity<?> updateProperty(@Valid @RequestBody UpdatePropertyRequest updatePropertyRequest,
                                            @PathVariable Long id) {
        Property updatedProperty = propertyService.updateProperty(id, updatePropertyRequest);
        return ResponseEntity.ok(ModelMapper.mapProperty(updatedProperty));
    }

    @PostMapping("/{id}/{userId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> linkUser(@PathVariable Long id,
                                      @PathVariable Long userId) {
        Set<User> users = propertyService.linkUserAndProperty(userId, id);
        return ResponseEntity.ok(new GetUsersResponse(ModelMapper.mapUsers(users)));
    }

    @PostMapping("/{id}/users")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> linkUsers(@PathVariable Long id,
                                       @RequestBody LinkUsersToPropertyReq linkUsersToProperty) {
        Set<User> users = propertyService.linkUsersToProperty(id, linkUsersToProperty.getUserIds());
        return ResponseEntity.ok(new GetUsersResponse(ModelMapper.mapUsers(users)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}/{userId}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> unlinkProperty(@PathVariable Long id,
                                            @PathVariable Long userId) {
        Set<User> users = propertyService.unlinkUserAndProperty(userId, id);
        return ResponseEntity.ok(new GetUsersResponse(ModelMapper.mapUsers(users)));
    }

    @CrossOrigin
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public ResponseEntity<?> deleteProperty(@PathVariable Long id) {
        propertyService.deleteProperty(id);
        return ResponseEntity.ok().build();
    }


}
