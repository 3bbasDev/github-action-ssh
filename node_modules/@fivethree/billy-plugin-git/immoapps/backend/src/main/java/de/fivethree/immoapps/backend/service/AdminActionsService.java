package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.checklist.Checklist;
import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplate;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.Role;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.exceptions.AppException;
import de.fivethree.immoapps.backend.exceptions.EntityNotFoundException;
import de.fivethree.immoapps.backend.model.csv.FileRep;
import de.fivethree.immoapps.backend.model.csv.PropertyCsvHelper;
import de.fivethree.immoapps.backend.model.payload.req.admin.EntityCreationReportReq;
import de.fivethree.immoapps.backend.model.payload.res.admin.EntityCreationReportRes;
import de.fivethree.immoapps.backend.repository.PropertyRepository;
import de.fivethree.immoapps.backend.repository.RoleRepository;
import de.fivethree.immoapps.backend.repository.UserRepository;
import de.fivethree.immoapps.backend.repository.checklist.ChecklistTemplateRepository;
import de.fivethree.immoapps.backend.repository.inspection.InspectionRepository;
import de.fivethree.immoapps.backend.util.CSVUtil;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Service
@Transactional
public class AdminActionsService {
    @Autowired
    private UserRepository userRepo;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private ChecklistTemplateRepository checklistTemplateRepo;

    @Autowired
    private PropertyRepository propertyRepository;

    @Autowired
    private InspectionRepository inspectionRepository;

    @PreAuthorize("hasRole('ADMIN')")
    public EntityCreationReportRes getHausverwalterEntityCreationReport(Long hausverwalterId,
                                                                        EntityCreationReportReq entityCreationReportReq) {
        //This statement checks if the hausverwalter is existing.
        User hausverwalter = getHausverwalter(hausverwalterId);

        Role roleUser = roleRepository.findByName(RoleName.ROLE_USER)
                .orElseThrow(() -> new AppException("User Role not set."));

        Role roleMitarbeiter = roleRepository.findByName(RoleName.ROLE_MITARBEITER)
                .orElseThrow(() -> new AppException("User Role not set."));

        Long mitarbeiterCreationCount = userRepo.countHausverwalterUserCreationByRoleAndStartAndEnd(roleMitarbeiter,
                hausverwalterId, entityCreationReportReq.getStartDate().atStartOfDay(),
                entityCreationReportReq.getEndDate().plusDays(1).atStartOfDay());

        Long hausmeisterCreationCount = userRepo.countHausverwalterUserCreationByRoleAndStartAndEnd(roleUser,
                hausverwalterId, entityCreationReportReq.getStartDate().atStartOfDay(),
                entityCreationReportReq.getEndDate().plusDays(1).atStartOfDay());

        Long propertyCreationCount = propertyRepository.countHausverwalterPropertyCreationByStartAndEnd(hausverwalterId,
                entityCreationReportReq.getStartDate().atStartOfDay(),
                entityCreationReportReq.getEndDate().plusDays(1).atStartOfDay());

        Long finishedInspectionsCount = inspectionRepository
                .countClosedHausverwalterInspectionsByFinishedDateBetween(hausverwalterId,
                        entityCreationReportReq.getStartDate().atStartOfDay(),
                        entityCreationReportReq.getEndDate().plusDays(1).atStartOfDay());


        return new EntityCreationReportRes(mitarbeiterCreationCount, hausmeisterCreationCount, propertyCreationCount,
                finishedInspectionsCount);
    }

    @PreAuthorize("hasRole('ADMIN')")
    public void saveHausverwalterPropertiesFromCsv(Long hausverwalterId, InputStream inputStream) {
        User hausverwalter = getHausverwalter(hausverwalterId);

        List<Map<String, String>> fullPropertyCsv = CSVUtil.getCSVValuesForHeaders(PropertyCsvHelper.getHeaders(),
                inputStream);

        //we only want to create new properties when the csv field ID isn't filled. -> filled ID means that the property is already existing.
        List<Map<String, String>> newPropertiesToCreate = CSVUtil.filterWhereValueIsNullOrEmpty(PropertyCsvHelper.ID,
                fullPropertyCsv);

        //get all default checklists and add them to the new property.
        Set<ChecklistTemplate> templatesToAdd = checklistTemplateRepo
                .getAllDefaultByHausverwalterAndFetchLevelsAndFetchKriterien(hausverwalterId);

        List<Property> properties = PropertyCsvHelper.getPropertiesFromCsvValues(newPropertiesToCreate,
                hausverwalter, templatesToAdd);

        if (properties != null && properties.size() > 0) {
            this.propertyRepository.saveAll(properties);
        }
    }

    @PreAuthorize("hasRole('ADMIN')")
    public FileRep getHausverwalterPropertiesAsCsv(Long hausverwalterId) {
        User hausverwalter = getHausverwalter(hausverwalterId);

        Set<Property> properties = hausverwalter.getOwnProperties();

        String fileName = hausverwalter.getFullName() + "_immobilien.csv";

        if (hausverwalter.getAdditionalUserInfo() != null && hausverwalter.getAdditionalUserInfo()
                .getCompanyName() != null && !hausverwalter.getAdditionalUserInfo()
                .getCompanyName().isEmpty()) {
            fileName = hausverwalter.getAdditionalUserInfo().getCompanyName() + "_immobilien.csv";
        }

        return new FileRep(fileName ,CSVUtil.writeCsvFile(PropertyCsvHelper.getHeaders(),
                PropertyCsvHelper.getCsvValues(properties)));
    }

    private User getHausverwalter(Long id) {
        Role userRole = roleRepository.findByName(RoleName.ROLE_HAUSVERWALTER)
                .orElseThrow(() -> new AppException("User Role not set."));

        User hausverwalter = userRepo.getUserByIdAndRoleAndFetchPropertiesAndFetchAdditionalInfo(id,
                userRole);

        if (hausverwalter == null) {
            throw new EntityNotFoundException(id, "User");
        }

        return hausverwalter;
    }
}
