package de.fivethree.immoapps.backend.domain.user;

import de.fivethree.immoapps.backend.domain.checklisttemplate.ChecklistTemplate;
import de.fivethree.immoapps.backend.domain.inspection.Inspection;
import de.fivethree.immoapps.backend.domain.picto.HausverwalterPicto;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.task.Task;

import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * User:
 * Ein User ist entweder ein Hausverwalter
 * Oder ein Mitarbeiter
 * Oder ein Hausmeister.
 *
 * Ein Hausverwalter beinhaltet seine Mitarbeiter in mitarbeiter.
 * Ein Hausverwalter beinhaltet seine Hausmeister in users.
 * Ein Mitarbeiter beinhaltet seinen Hausverwalter in vorgesetzter.
 * Ein Hausmeister beinhaltet seinen Hausverwalter in hausverwalter.
 *
 * Ein Hausverwaltet beinhaltet seine eigene Immobilien in ownProperties.
 * Ein Hausmeister beinhaltet die ihm zugewiesenen Immobilien in properties.
 */
@Entity
@Table(name = "user", uniqueConstraints = {
        @UniqueConstraint(columnNames = {
                "email"
        })
})
public class User {
    @Id
    @GeneratedValue(generator = "sequence")
    @SequenceGenerator(name = "sequence", sequenceName = "MY_SEQ", allocationSize = 1, initialValue = 1000)
    private Long id;

    @NotBlank
    @Column
    private String lastname;

    @NotBlank
    @Column
    private String firstname;

    @Column
    @Email
    @NotBlank
    private String email;

    @Column
    @NotBlank
    @Size(min = 4)
    private String password;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_has_roles",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "hausverwalter", cascade = {CascadeType.REMOVE}, orphanRemoval = true)
    private Set<User> users = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "vorgesetzter", cascade = {CascadeType.REMOVE})
    private Set<User> mitarbeiter = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "hausverwalter", cascade = {CascadeType.REMOVE}, orphanRemoval = true)
    private Set<Property> ownProperties = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "hausverwalter", cascade = {CascadeType.ALL}, orphanRemoval = true)
    private Set<HausverwalterPicto> hausverwalterPictos = new HashSet<>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "hausverwalter_id")
    private User hausverwalter;

    //this property is set in case the user is an employee, vorgesetzter would be the hausverwalter
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "vorgesetzter_id")
    private User vorgesetzter;

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "users")
    private Set<Property> properties = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "hausverwalter", cascade = {CascadeType.ALL}, orphanRemoval = true)
    private Set<ChecklistTemplate> checklistTemplates = new HashSet<>();

    //inspections where the user is the Auftragnehmer
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user", cascade = {CascadeType.ALL})
    private Set<Inspection> inspections = new HashSet<>();

    //inspections where the user is the Auftraggeber
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "auftragGeber", cascade = {CascadeType.ALL})
    private Set<Inspection> auftragGeberInspections = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<PushMessage> pushNotifications = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<PushToken> pushTokens = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "auftragGeber", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Task> auftragGeberTasks = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<Task> auftragNehmerTasks = new HashSet<>();

    @OneToOne(fetch = FetchType.LAZY,
            cascade =  CascadeType.ALL,
            orphanRemoval = true,
            mappedBy = "user")
    private AdditionalUserInfo additionalUserInfo;

    @Column
    private LocalDateTime createdDate;

    @Column
    private LocalDateTime updatedDate;

    @Column
    private Boolean deleted = false;

    public User() {

    }

    public User(String firstname, String lastname, String email, String password) {
        this.firstname = firstname;
        this.lastname = lastname;
        this.email = email;
        this.password = password;
    }

    public Set<Inspection> getInspections() {
        return inspections;
    }

    public void setInspections(Set<Inspection> inspections) {
        this.inspections = inspections;
    }

    public Set<Property> getOwnProperties() {
        return ownProperties;
    }

    public void setOwnProperties(Set<Property> ownProperties) {
        this.ownProperties = ownProperties;
    }

    public Set<Property> getProperties() {
        return properties;
    }

    public void setProperties(Set<Property> properties) {
        this.properties = properties;
    }

    public Set<User> getUsers() {
        return users;
    }

    public void setUsers(Set<User> users) {
        this.users = users;
    }

    public User getHausverwalter() {
        return hausverwalter;
    }

    public void setHausverwalter(User hausverwalter) {
        this.hausverwalter = hausverwalter;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Set<Role> getRoles() {
        return roles;
    }

    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }

    public Set<ChecklistTemplate> getChecklistTemplates() {
        return checklistTemplates;
    }

    public void setChecklistTemplates(Set<ChecklistTemplate> checklistTemplates) {
        this.checklistTemplates = checklistTemplates;
    }

    public Set<User> getMitarbeiter() {
        return mitarbeiter;
    }

    public void setMitarbeiter(Set<User> mitarbeiter) {
        this.mitarbeiter = mitarbeiter;
    }

    public User getVorgesetzter() {
        return vorgesetzter;
    }

    public void setVorgesetzter(User vorgesetzter) {
        this.vorgesetzter = vorgesetzter;
    }

    public Set<HausverwalterPicto> getHausverwalterPictos() {
        return hausverwalterPictos;
    }

    public void setHausverwalterPictos(Set<HausverwalterPicto> hausverwalterPictos) {
        this.hausverwalterPictos = hausverwalterPictos;
    }

    public AdditionalUserInfo getAdditionalUserInfo() {
        return additionalUserInfo;
    }

    public void setAdditionalUserInfo(AdditionalUserInfo additionalUserInfo) {
        this.additionalUserInfo = additionalUserInfo;
    }

    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    public LocalDateTime getUpdatedDate() {
        return updatedDate;
    }

    public void setUpdatedDate(LocalDateTime updatedDate) {
        this.updatedDate = updatedDate;
    }

    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        updatedDate = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedDate = LocalDateTime.now();
    }


    public String getFullName() {
        return this.firstname + " " + this.lastname;
    }

    public Set<PushMessage> getPushNotifications() {
        return pushNotifications;
    }

    public void setPushNotifications(Set<PushMessage> pushNotifications) {
        this.pushNotifications = pushNotifications;
    }

    public Set<PushToken> getPushTokens() {
        return pushTokens;
    }

    public void setPushTokens(Set<PushToken> pushTokens) {
        this.pushTokens = pushTokens;
    }

    public Set<Inspection> getAuftragGeberInspections() {
        return auftragGeberInspections;
    }

    public void setAuftragGeberInspections(Set<Inspection> auftragGeberInspections) {
        this.auftragGeberInspections = auftragGeberInspections;
    }

    public Set<Task> getAuftragGeberTasks() {
        return auftragGeberTasks;
    }

    public void setAuftragGeberTasks(Set<Task> auftragGeberTasks) {
        this.auftragGeberTasks = auftragGeberTasks;
    }

    public Set<Task> getAuftragNehmerTasks() {
        return auftragNehmerTasks;
    }

    public void setAuftragNehmerTasks(Set<Task> auftragNehmerTasks) {
        this.auftragNehmerTasks = auftragNehmerTasks;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        if (! (obj instanceof User)) {
            return false;
        }

        User other = (User) obj;
        return this.getId().equals(other.getId());
    }
}
