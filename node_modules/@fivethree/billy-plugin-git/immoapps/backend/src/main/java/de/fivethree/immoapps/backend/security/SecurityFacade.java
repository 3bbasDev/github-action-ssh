package de.fivethree.immoapps.backend.security;

import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.Role;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

@Component
public class SecurityFacade {

    public UserPrincipal getCurrentUser() {
        return (UserPrincipal) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    }

    public Authentication getAuthentication() {
        return SecurityContextHolder.getContext().getAuthentication();
    }

    public boolean hasRole(RoleName roleName) {
        SimpleGrantedAuthority toCheck = new SimpleGrantedAuthority(roleName.name());
        return getAuthentication().getAuthorities().contains(toCheck);
    }

    public boolean hasRole(User userToCheck, RoleName roleName) {
        for (Role role : userToCheck.getRoles()) {
            if (role.getName().equals(roleName)) {
                return true;
            }
        }

        return false;
    }

    public boolean checkUserPropertyAccess(Property property, User user) {
        if (hasRole(user, RoleName.ROLE_USER)) {
            if (property.getUsers().contains(user)) {
               return true;
            }
        } else if (hasRole(user, RoleName.ROLE_HAUSVERWALTER)) {
            if (property.getHausverwalter().getId().equals(user.getId())) {
                return true;
            }
        } else if (hasRole(user, RoleName.ROLE_MITARBEITER)) {
            if (property.getHausverwalter().getId().equals(user.getVorgesetzter().getId())) {
                return true;
            }
        }

        return false;
    }
}
