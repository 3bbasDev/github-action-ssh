package de.fivethree.immoapps.backend.service;

import de.fivethree.immoapps.backend.domain.checklist.ChecklistPruefkriterium;
import de.fivethree.immoapps.backend.domain.inspection.*;
import de.fivethree.immoapps.backend.domain.property.Property;
import de.fivethree.immoapps.backend.domain.user.RoleName;
import de.fivethree.immoapps.backend.domain.user.User;
import de.fivethree.immoapps.backend.exceptions.*;
import de.fivethree.immoapps.backend.model.mail.InspectionFinishedSummary;
import de.fivethree.immoapps.backend.model.mail.NewOpenInspectionMail;
import de.fivethree.immoapps.backend.model.payload.req.common.AddBase64ImageRequest;
import de.fivethree.immoapps.backend.model.push.PushNotificationType;
import de.fivethree.immoapps.backend.repository.*;
import de.fivethree.immoapps.backend.repository.checklist.ChecklistPruefkriteriumRepository;
import de.fivethree.immoapps.backend.repository.inspection.InspectionCriteriaPruefkriteriumRepository;
import de.fivethree.immoapps.backend.repository.inspection.InspectionImageRepository;
import de.fivethree.immoapps.backend.repository.inspection.InspectionRepository;
import de.fivethree.immoapps.backend.security.SecurityFacade;
import de.fivethree.immoapps.backend.util.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Service
@Transactional
public class InspectionService {
    @Autowired
    private InspectionRepository inspectionRepo;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private SecurityFacade securityFacade;

    @Autowired
    private ChecklistPruefkriteriumRepository checklistPruefkriteriumRepo;

    @Autowired
    private InspectionCriteriaPruefkriteriumRepository criteriaPruefkriteriumRepo;

    @Autowired
    private UserRepository userRepo;

    @Autowired
    private PropertyService propertyService;

    @Autowired
    private InspectionImageRepository inspectionImageRepo;

    @Autowired
    private UserMailService userMailService;

    @Autowired
    private PushnotificationService pushnotificationService;

    /**
     * Returns the inspections in which the caller is the executor of this inspections.
     * @return inspections which shall be done by the caller.
     */
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Set<Inspection> getOpenUserInspections() {
        Set<Inspection> inspections = this.inspectionRepo.findAllOpenByOwner(securityFacade.getCurrentUser().getId());

        // we want to hide the inspection in case the user has no assignment to this inspection property.
        if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            User user = userRepo.findByIdAndFetchProperties(securityFacade.getCurrentUser().getId());
            inspections.removeIf(i -> !user.getProperties().contains(i.getProperty()));
        }

        return inspections;
    }

    /**
     * Returns the inspections in which the caller is the executor of this inspections.
     * @return inspections which shall be done by the caller.
     */
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Set<Inspection> getClosedUserInspections() {
        Set<Inspection> inspections = this.inspectionRepo.findAllClosedByOwner(securityFacade.getCurrentUser().getId());

        // we want to hide the inspection in case the user has no assignment to this inspection property.
        if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            User user = userRepo.findByIdAndFetchProperties(securityFacade.getCurrentUser().getId());
            inspections.removeIf(i -> !user.getProperties().contains(i.getProperty()));
        }

        return inspections;
    }

    /**
     * This method creates an inspection for the caller himself.
     * @param propertyId id of the property where the inspection shall be done.
     * @param inspectionCriteriaIds ids of checklists pruefkriterien which shall be inspected.
     * @return the created and new inspection.
     */
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Inspection addInspection(Long propertyId, List<Long> inspectionCriteriaIds) {
        Property property = this.propertyService.getPropertyById(propertyId);
        User user = userRepository.getUserByIdAndFetchAdditionalInfo(securityFacade.getCurrentUser().getId());
        Inspection newInspection = new Inspection(user, property, user);

        List<InspectionCriteria> inspectionCriterias = getInspectionCriteriasFromIds(inspectionCriteriaIds, newInspection);
        newInspection.getInspectionCriterias().addAll(inspectionCriterias);

        return this.inspectionRepo.save(newInspection);
    }

    /**
     * This method creates an inspection for a different user.
     * @param propertyId id of the property where the inspection shall be done.
     * @param userId id of the user who shall execute this inspection.
     * @param inspectionCriteriaIds ids of checklists pruefkriterien which shall be inspected.
     * @return the created and new inspection.
     */
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Inspection addInspectionForUser(Long propertyId, Long userId, List<Long> inspectionCriteriaIds) {
        // in case a user wants to assign an inspection to himself.
        if (userId.equals(securityFacade.getCurrentUser().getId())) {
            return addInspection(propertyId, inspectionCriteriaIds);
        }

        //different users
        Long hausverwalterId = getHausverwalterId();

        User user = userRepo.findByIdAndHausverwalterOrVorgesetzter(userId, hausverwalterId);

        if (user == null) {
            throw new EntityNotFoundException(userId, "User");
        }

        Property property = this.propertyService.getPropertyByIdAndFetchAllDetails(propertyId);

        // if the target user is a hausmeister we have to check if he is assigned to the target property.
        if (securityFacade.hasRole(user, RoleName.ROLE_USER) && !property.getUsers().contains(user)) {
            throw new UserPropertyException("Der Nutzer: " + user.getFullName() + " ist der Immobilie: "
                    + property.getName() + " nicht zugeordnet");
        }

        User sender = userRepo.getOne(securityFacade.getCurrentUser().getId());

        Inspection newInspection = new Inspection(user, property, sender);

        List<InspectionCriteria> inspectionCriterias = getInspectionCriteriasFromIds(inspectionCriteriaIds, newInspection);
        newInspection.getInspectionCriterias().addAll(inspectionCriterias);

        newInspection = this.inspectionRepo.save(newInspection);

        this.userMailService.sendNewOpenInspectionMail(user.getEmail(), user.getFullName(), new NewOpenInspectionMail(
                newInspection.getProperty().getName(),
                "" + newInspection.getInspectionCriterias().size(),
                property.getHausverwalter().getAdditionalUserInfo() != null ? property.getHausverwalter().getAdditionalUserInfo().getCompanyName() : null,
                newInspection.getAuftragGeber().getFullName(),
                newInspection.getAuftragGeber().getEmail()));

        this.pushnotificationService.sendPushToUser(user, "Neue offene Inspektion",
                "FÃ¼r Sie wurde eine neue Inspektion angelegt.", PushNotificationType.INSPECTION_CREATED,
                sender, "" + newInspection.getId());

        return newInspection;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Inspection attachInspectionResult(Inspection inspection, Long pruefkriteriumId,
                                             Boolean result, String description,
                                             List<AddBase64ImageRequest> images,
                                             Long assignedUserId) {
        if (inspection.getDone()) {
            throw new InspectionAlreadyFinishedException("Die Inspektion mit der id: "
                    + inspection.getId() + " ist bereits abgeschlossen.");
        }

        Optional<InspectionCriteriaPruefkriterium> pruefkriteriumOptional = this.criteriaPruefkriteriumRepo
                .findById(pruefkriteriumId);

        if (!pruefkriteriumOptional.isPresent()) {
            throw new EntityNotFoundException(pruefkriteriumId, "Kriterium");
        }

        InspectionCriteriaPruefkriterium kriterium = pruefkriteriumOptional.get();

        if (this.checkIfKriteriumIsAlreadyInspected(inspection, kriterium)) {
            throw new KriteriumAlreadyInspectedException("Das Kriterium mit der id: " + pruefkriteriumId
                    + " wurde innerhalb dieser Inspektion bereits inspiziert.");
        }

        if (!this.checkIfKrieriumIsPresent(inspection, kriterium)) {
            throw new KriteriumNotPresentException("Das Kriterium mit der id: " + pruefkriteriumId
                    + " ist kein Bestandteil in der Inspektion mit der id: " + inspection.getId() + ".");
        }

        InspectionResult inspectionResult = createNewInspectionResultForInspection(inspection, kriterium, result, description, images, assignedUserId);
        inspection.getInspectionResults().add(inspectionResult);

        inspection = maybeCloseInspection(inspection);

        return this.inspectionRepo.save(inspection);
    }


    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public Inspection getInspectionByIdAndOwner(Long inspectionId) {
        Inspection inspection = this.inspectionRepo.findByIdAndOwnerId(inspectionId,
                securityFacade.getCurrentUser().getId());

        if (inspection == null) {
            throw new EntityNotFoundException(inspectionId, "Inspection");
        }

        return inspection;
    }

    /**
     * this method returns all open inspections where the caller
     * or his employees (in case he is a hausverwalter) is the auftraggeber.
     */
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Inspection> getOpenInspections() {
        return inspectionRepo.findAllOpenByHausverwalter(getHausverwalterId());
    }

    /**
     * this method returns all open inspections for a specific property
     * where the caller or his employees (in case he is a hausverwalter) is the auftraggeber.
     */
    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Inspection> getOpenInspectionsForProperty(Long propertyId) {
        Property property = this.propertyService.getPropertyById(propertyId);
        return inspectionRepo.findAllOpenByPropertyAndHausverwalterId(property, getHausverwalterId());
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Inspection getOpenInspectionById(Long id) {
        Inspection ret = inspectionRepo.findOpenByIdAndHausverwalterId(id, getHausverwalterId());;

        if (ret == null) {
            throw new EntityNotFoundException(id, "Inspection");
        }

        return ret;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public void deleteOpenInspection(Long id) {
        Inspection inspectionToDelete = getOpenInspectionById(id);
        inspectionRepo.delete(inspectionToDelete);
    }


    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Inspection> getClosedInspections() {
        return inspectionRepo.findAllClosedByHausverwalter(getHausverwalterId());
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Inspection getClosedInspectionById(Long id) {
        Inspection ret = inspectionRepo.findClosedByIdAndHausverwalter(id,getHausverwalterId());

        if (ret == null) {
            throw new EntityNotFoundException(id, "Inspection");
        }

        return ret;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER')")
    public Set<Inspection> getClosedInspectionsForProperty(Long propertyId) {
        return inspectionRepo.findAllClosedByProperty(propertyService.getPropertyById(propertyId));
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    public InspectionImage getInspectionImageById(Long id) {
        InspectionImage image = null;

        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)
                || securityFacade.hasRole(RoleName.ROLE_HAUSVERWALTER)) {
            image = inspectionImageRepo.getImageByIdAndHausverwalter(id, getHausverwalterId());
        } else if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            User currentUser = userRepository.getOne(securityFacade.getCurrentUser().getId());
            image = inspectionImageRepo.getImageByIdAndUserContains(id, currentUser);
        }

        if (image == null) {
            throw new EntityNotFoundException(id, "InspectionImage");
        }

        return image;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    private Inspection maybeCloseInspection(Inspection inspection) {
        if (inspection.getInspectionResults().size() == inspection.getInspectionCriterias().size()) {
            inspection.setDone(true);
            maybeCreateNewInspections(inspection);
            Property property = inspection.getProperty();
            long criteriaCount = inspection.getInspectionCriterias().size();
            long successCount = inspection.getInspectionResults().stream()
                    .filter(criteriaResult -> criteriaResult.getResult().equals(true)).count();
            long issueCount = inspection.getInspectionResults().stream()
                    .filter(criteriaResult -> criteriaResult.getResult().equals(false)).count();

            this.userMailService.sendInspectionFinishedMail(property.getHausverwalter().getEmail(),
                    property.getHausverwalter().getFullName(), new InspectionFinishedSummary(
                            property.getName(),
                            criteriaCount,
                            successCount,
                            issueCount,
                            inspection.getUser().getFullName(),
                            inspection.getUser().getEmail()), true
            );
        }

        return inspection;
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    private void maybeCreateNewInspections(Inspection inspection) {
        if (securityFacade.hasRole(RoleName.ROLE_HAUSVERWALTER)
                || securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            Map<User, Set<InspectionResult>> usersAndTheirInspectionTodos = new HashMap<>();

            inspection.getInspectionResults().forEach(ir -> {
                if (ir.getAssignedUser() != null) {
                    User user = ir.getAssignedUser();
                    if (usersAndTheirInspectionTodos.get(user) == null) {
                        Set<InspectionResult> userTodos = new HashSet<>();
                        usersAndTheirInspectionTodos.put(user, userTodos);
                    }

                    Set<InspectionResult> userTodos = usersAndTheirInspectionTodos.get(user);
                    userTodos.add(ir);
                }
            });

            if (usersAndTheirInspectionTodos.size() > 0) {
                for (User user : usersAndTheirInspectionTodos.keySet()) {
                    Set<InspectionResult> inspectionResults = usersAndTheirInspectionTodos.get(user);

                    User sender = userRepo.getOne(securityFacade.getCurrentUser().getId());

                    Inspection newInspection = new Inspection(user, inspection.getProperty(), sender);

                    List<InspectionCriteria> inspectionCriterias = getInspectionCriteriasFromInspectionResults(inspectionResults, newInspection);
                    newInspection.getInspectionCriterias().addAll(inspectionCriterias);
                    newInspection = this.inspectionRepo.save(newInspection);

                    if (!newInspection.getUser().getId().equals(newInspection.getAuftragGeber().getId())) {
                        this.userMailService.sendNewOpenInspectionMail(user.getEmail(), user.getFullName(), new NewOpenInspectionMail(
                                newInspection.getProperty().getName(),
                                "" + newInspection.getInspectionCriterias().size(),
                                inspection.getProperty().getHausverwalter().getAdditionalUserInfo() != null ?
                                        inspection.getProperty().getHausverwalter().getAdditionalUserInfo().getCompanyName() : null,
                                newInspection.getAuftragGeber().getFullName(),
                                newInspection.getAuftragGeber().getEmail()));

                        this.pushnotificationService.sendPushToUser(user, "Neue offene Inspektion",
                                "FÃ¼r Sie wurde eine neue Inspektion angelegt.",
                                PushNotificationType.INSPECTION_CREATED, sender, "" + newInspection.getId());
                    }


                }
            }
        }
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    private InspectionResult createNewInspectionResultForInspection(Inspection inspection,
                                                                    InspectionCriteriaPruefkriterium kriterium,
                                                                    Boolean result,
                                                                    String description,
                                                                    List<AddBase64ImageRequest> images,
                                                                    Long assignedUserId) {
        InspectionResult inspectionResult = new InspectionResult();
        inspectionResult.setPruefkriterium(kriterium);
        inspectionResult.setInspection(inspection);
        inspectionResult.setResult(result);

        // only a mitarbeiter or a hausverwalter can assign tasks to other users (mitarbeiter or hausmeister).
        if (assignedUserId != null && (securityFacade.hasRole(RoleName.ROLE_HAUSVERWALTER)
                || securityFacade.hasRole(RoleName.ROLE_MITARBEITER))) {
            //this method will only get mitarbeiter or hausmeister and NOT a hausverwalter.
            User assignedUser = userRepo.findByIdAndHausverwalterOrVorgesetzter(assignedUserId, getHausverwalterId());

            if (assignedUser == null) {
                throw new EntityNotFoundException(assignedUserId, "User");
            }

            inspectionResult.setAssignedUser(assignedUser);
        }

        if (description != null && !description.trim().isEmpty()) {
            inspectionResult.setDescription(description.trim());
        }

        if (images != null && images.size() > 0) {
            for (AddBase64ImageRequest image : images) {
                InspectionImage inspectionImage = new InspectionImage();
                inspectionImage.setInspectionResult(inspectionResult);
                inspectionImage.setName(image.getName());
                inspectionImage.setType(image.getType());
                inspectionImage.setData(Base64.getDecoder().decode(image.getData()));
                inspectionResult.getImages().add(inspectionImage);
            }
        }

        return inspectionResult;
    }

    private List<InspectionCriteria> getInspectionCriteriasFromInspectionResults(Collection<InspectionResult> inspectionResults,
                                                                                 Inspection inspection) {
        List<InspectionCriteria> ret = new ArrayList<>();

        for (InspectionResult inspectionResult : inspectionResults) {
            InspectionCriteria inspectionCriteria = new InspectionCriteria();
            inspectionCriteria.setPruefkriterium(ModelMapper
                    .mapInspectionPruefkriteriumToInspectionPruefkriterium(inspectionResult.getPruefkriterium(),
                            inspectionCriteria));
            inspectionCriteria.setInspection(inspection);
            ret.add(inspectionCriteria);
        }

        return ret;
    }

    private List<InspectionCriteria> getInspectionCriteriasFromIds(List<Long> inspectionCriteriaIds,
                                                                   Inspection inspection) {
        List<InspectionCriteria> ret = new ArrayList<>();
        for (Long inspectionCriteriaId : inspectionCriteriaIds) {
            ChecklistPruefkriterium criteria = this.checklistPruefkriteriumRepo
                    .findByIdAndFetchEverything(inspectionCriteriaId);
            this.checkCriteriaAllowed(criteria, inspectionCriteriaId);

            InspectionCriteria inspectionCriteria = new InspectionCriteria();
            inspectionCriteria.setPruefkriterium(ModelMapper.mapChecklistPruefkriteriumToInspectionPruefkriterium(criteria, inspectionCriteria));
            inspectionCriteria.setInspection(inspection);

            ret.add(inspectionCriteria);
        }

        return ret;
    }

    /**
     * This method checks if the target kriterium to inspect is part of the inspection.
     *
     * @param inspection which contains all the criteria to inspect.
     * @param kriterium  criteria which the user wants to inspect.
     * @return true in case the criteria shall be inspected in this inspection. false otherwise.
     */
    private boolean checkIfKrieriumIsPresent(Inspection inspection, InspectionCriteriaPruefkriterium kriterium) {
        for (InspectionCriteria inspectionCriteria : inspection.getInspectionCriterias()) {
            if (inspectionCriteria.getPruefkriterium().getId().equals(kriterium.getId())) {
                return true;
            }
        }

        return false;
    }

    private boolean checkIfKriteriumIsAlreadyInspected(Inspection inspection, InspectionCriteriaPruefkriterium kriterium) {
        for (InspectionResult inspectionResult : inspection.getInspectionResults()) {
            if (inspectionResult.getPruefkriterium().getId().equals(kriterium.getId())) {
                return true;
            }
        }

        return false;
    }

    private void checkCriteriaAllowed(ChecklistPruefkriterium criteria, Long criteriaId) {
        boolean allowed = false;

        if (criteria == null) {
            throw new EntityNotFoundException(criteriaId, "Pruefkriterium");
        }

        if (securityFacade.hasRole(RoleName.ROLE_HAUSVERWALTER)
                || securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            allowed = criteria.getLevel().getChecklist().getProperty()
                    .getHausverwalter().getId().equals(getHausverwalterId());
        } else if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            allowed = criteria.getLevel().getChecklist().getProperty()
                    .getUsers().contains(userRepo.getOne(securityFacade.getCurrentUser().getId()));
        }

        if (!allowed) {
            throw new CriteriaNotAllowedException("Sie haben keine Berechtigung, um auf dieses Kriterium zuzugreifen.");
        }
    }

    @PreAuthorize("hasRole('HAUSVERWALTER') or hasRole('MITARBEITER') or hasRole('USER')")
    private Long getHausverwalterId() {
        Long hausverwalterId = securityFacade.getCurrentUser().getId();

        //in case a mitarbeiter wants to assign an inspection we have to search for this user with the hausverwalterId
        if (securityFacade.hasRole(RoleName.ROLE_MITARBEITER)) {
            User mitarbeiter = userRepo.getOne(securityFacade.getCurrentUser().getId());
            hausverwalterId = mitarbeiter.getVorgesetzter().getId();
        } else if (securityFacade.hasRole(RoleName.ROLE_USER)) {
            User hausmeister = userRepo.getOne(securityFacade.getCurrentUser().getId());
            hausverwalterId = hausmeister.getHausverwalter().getId();
        }

        return hausverwalterId;
    }
}
