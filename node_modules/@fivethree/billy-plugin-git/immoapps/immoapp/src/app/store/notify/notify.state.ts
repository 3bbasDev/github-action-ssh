import { State, Action, StateContext } from '@ngxs/store';
import { Notify, NotifySuccess, NotifyWarning, NotifyError, NotifyUnknownError, NotifyHint } from './notify.actions';
import { NotifyService } from '@services/notify.service';
import { NotifyType } from './notify.types';

export interface NotifyStateModel {
    notification?: string;
    type?: NotifyType;
    error?: any;
}

@State<NotifyStateModel>({
    name: 'notify',
    defaults: {
        notification: null,
        type: null,
        error: null
    }
})
export class NotifyState {

    constructor(private notifyService: NotifyService) {

    }

    @Action(NotifySuccess)
    notifySuccess(ctx: StateContext<NotifyStateModel>, action: NotifySuccess) {
        ctx.dispatch(new Notify(action.payload, 'success', null, action.options, action.eventOnCancel));
    }

    @Action(NotifyHint)
    notifyHint(ctx: StateContext<NotifyStateModel>, action: NotifyHint) {
        ctx.dispatch(new Notify(action.payload, 'hint', null, action.options, action.eventOnCancel));
    }
    @Action(NotifyWarning)
    notifyWarning(ctx: StateContext<NotifyStateModel>, action: NotifyWarning) {
        ctx.dispatch(new Notify(action.payload, 'warning', action.error, action.options, action.eventOnCancel));
    }

    @Action(NotifyError)
    notifyError(ctx: StateContext<NotifyStateModel>, action: NotifyError) {
        ctx.dispatch(new Notify(action.payload, 'error', action.error, action.options, action.eventOnCancel));
    }

    @Action(NotifyUnknownError)
    notifyUnknownError(ctx: StateContext<NotifyStateModel>, action: NotifyUnknownError) {
        ctx.dispatch(new Notify('', 'unknown-error', action.error));
    }

    @Action(Notify)
    notify(ctx: StateContext<NotifyStateModel>, action: Notify) {
        ctx.patchState({
            notification: action.payload,
            type: action.type,
            error: action.error
        });
        switch (action.type) {
            case 'success':
                this.notifyService.success(action.payload, action.options, action.eventOnCancel);
                break;
            case 'hint':
                this.notifyService.hint(action.payload, action.options, action.eventOnCancel);
                break;
            case 'warning':
                this.notifyService.warning(action.payload, action.options, action.eventOnCancel);
                break;
            case 'error':
                this.notifyService.error(action.payload, action.options, action.eventOnCancel);
                break;
            case 'unknown-error':
                this.notifyService.unknownError();
                break;
        }
    }
}
