import { NavigateForward } from '@fivethree/ngxs-ionic-router-plugin';
import { GetMessages, MessagesRedirect, MessageRedirect, MarkMessageRead } from './messages.actions';
import { State, Selector, Action, StateContext, createSelector } from '@ngxs/store';
import { MessageService } from '@services/message.service';
import { tap, map } from 'rxjs/operators';
import { Message } from 'shared';

export interface MessagesStateModel {
    notifications: Message[];
}

@State<MessagesStateModel>({
    name: 'messages',
    defaults: {
        notifications: []
    }
})
export class MessagesState {

    static getMessage(messageId: number) {
        return createSelector([MessagesState], (state: MessagesStateModel) => {
            return state.notifications.find(notification => notification.id === messageId);
        });
    }

    @Selector()
    static notifications(state: MessagesStateModel) { return state.notifications; }

    @Selector()
    static unreadNotificationCount(state: MessagesStateModel) {
        return state.notifications.filter(notification => !notification.readByUser).length;
    }

    constructor(private messageService: MessageService) { }


    @Action(GetMessages)
    getMessages(ctx: StateContext<MessagesStateModel>) {
        return this.messageService.loadMessages()
            .pipe(
                map(messages => messages.notifications.sort((m1, m2) => m1.id < m2.id ? 1 : -1)),
                tap(messages => ctx.patchState({ notifications: messages })));
    }

    @Action(MarkMessageRead)
    markMessageRead(ctx: StateContext<MessagesStateModel>, action: MarkMessageRead) {
        return this.messageService.markMessageAsRead(action.payload)
            .pipe(tap(notification => {
                const notifications = Object.assign([], ctx.getState().notifications);
                const notifyIndex = notifications.findIndex(n => n.id === notification.id);
                notifications[notifyIndex] = notification;
                ctx.patchState({ notifications });
            }));
    }


    @Action(MessagesRedirect)
    onMessagesRedirect(ctx: StateContext<MessagesStateModel>) {
        ctx.dispatch(new NavigateForward('/tabs/tab3'));
    }

    @Action(MessageRedirect)
    onMessageRedirect(ctx: StateContext<MessagesStateModel>, action: MessageRedirect) {
        ctx.dispatch(new NavigateForward(`/messages/${action.payload}`));
    }

}
