import { NotifyOptions, NotifyType } from './notify.types';


export class NotifySuccess {
    static readonly type = '[Notify] NotifySuccess';
    constructor(public readonly payload: string,
        public readonly options?: Partial<NotifyOptions>,
        public readonly eventOnCancel?: any | any[]) { }
}

export class NotifyHint {
    static readonly type = '[Notify] NotifyHint';
    constructor(public readonly payload: string,
        public readonly options?: Partial<NotifyOptions>,
        public readonly eventOnCancel?: any | any[]) { }
}

export class NotifyWarning {
    static readonly type = '[Notify] NotifyWarning';
    constructor(public readonly payload: string,
        public readonly error?: any,
        public readonly options?: Partial<NotifyOptions>,
        public readonly eventOnCancel?: any | any[]) { }
}

export class NotifyError {
    static readonly type = '[Notify] NotifyError';
    constructor(public readonly payload: string,
        public readonly error?: any,
        public readonly options?: Partial<NotifyOptions>,
        public readonly eventOnCancel?: any | any[]) { }
}

export class NotifyUnknownError {
    static readonly type = '[Notify] NotifyUnknownError';
    constructor(public readonly error?: any) { }
}

export class Notify {
    static readonly type = '[Notify] Notify';
    constructor(public readonly payload: string,
        public readonly type: NotifyType,
        public readonly error?: any,
        public readonly options?: Partial<NotifyOptions>,
        public readonly eventOnCancel?: any | any[]) { }
}
