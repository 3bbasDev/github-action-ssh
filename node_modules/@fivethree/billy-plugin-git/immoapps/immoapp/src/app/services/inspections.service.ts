import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import {
  GetInspectionsResult,
  AddInspectionPayload,
  Inspection,
  AddInspectionResultPayload
} from 'shared';
import { environment } from '@environments/environment';
import { Observable, defer } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class InspectionsService {

  constructor(private http: HttpClient) { }

  loadInspections(): Observable<Inspection[]> {
    return this.http
      .get<GetInspectionsResult>(`${environment.baseURL}/appapi/inspections`)
      .pipe(map((response) => response.inspections))
      .pipe(sortInspectionsCriterias());
  }
  loadClosedInspections(): Observable<Inspection[]> {
    return this.http
      .get<GetInspectionsResult>(`${environment.baseURL}/appapi/inspections/history`)
      .pipe(map((response) => response.inspections))
      .pipe(sortInspectionsCriterias());
  }

  addInspection(payload: AddInspectionPayload): Observable<Inspection> {
    return this.http
      .post<Inspection>(`${environment.baseURL}/appapi/inspections`, payload)
      .pipe(sortInspectionCriterias());
  }

  addInspectionResult(inspectionId: number, payload: AddInspectionResultPayload): Observable<Inspection> {
    return this.http
      .post<Inspection>(`${environment.baseURL}/appapi/inspections/${inspectionId}`, payload)
      .pipe(sortInspectionCriterias());
  }

}

export const sortInspectionsCriterias = () => {
  return (source: Observable<Inspection[]>) => defer(() => {
    return source.pipe(
      map((inspections: Inspection[]) => {
        inspections.map((inspection) => {
          inspection.criterias = inspection.criterias.sort(sortByID);
          return inspection;
        });
        return inspections;
      }));
  });
};

export const sortInspectionCriterias = () => {
  return (source: Observable<Inspection>) => defer(() => {
    return source.pipe(
      map((inspection: Inspection) => {
        if (inspection && inspection.criterias) {
          inspection.criterias = inspection.criterias.sort(sortByID);
        }
        return inspection;
      }));
  });
};

const sortByID = (c1, c2) => c1.id < c2.id ? -1 : 1;
