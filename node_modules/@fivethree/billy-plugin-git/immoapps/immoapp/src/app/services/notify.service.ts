import { Injectable } from '@angular/core';
import { ToastController } from '@ionic/angular';
import { Dispatch } from '@ngxs-labs/dispatch-decorator';
import { NotifyOptions, NotifyType } from '@store/notify/notify.types';
import { Store } from '@ngxs/store';

@Injectable({
  providedIn: 'root'
})
export class NotifyService {

  private static LONG_DURATION = 6000;
  private static SHORT_DURATION = 3000;

  constructor(private toastCtrl: ToastController,
    private store: Store) { }


  /**
   *
   *
   * @param {string} message
   * @param {Partial<NotifyOptions>} [options]
   * @param {(any | any[])} [eventOnCancel] Dispatches event(s) on cancel button click
   * @memberof NotifyService
   */
  success(message: string, options?: Partial<NotifyOptions>, eventOnCancel?: any | any[]) {
    this.showToast(message, 'success', options, eventOnCancel);
  }

  /**
   *
   *
   * @param {string} message
   * @param {Partial<NotifyOptions>} [options]
   * @param {(any | any[])} [eventOnCancel] Dispatches event(s) on cancel button click
   * @memberof NotifyService
   */
  hint(message: string, options?: Partial<NotifyOptions>, eventOnCancel?: any | any[]) {
    this.showToast(message, 'hint', options, eventOnCancel);
  }


  /**
   *
   *
   * @param {string} message
   * @param {Partial<NotifyOptions>} [options]
   * @param {(any | any[])} [eventOnCancel] Dispatches event(s) on cancel button click
   * @memberof NotifyService
   */
  warning(message: string, options?: Partial<NotifyOptions>, eventOnCancel?: any | any[]) {
    this.showToast(message, 'warning', options, eventOnCancel);
  }


  /**
   *
   *
   * @param {string} message
   * @param {Partial<NotifyOptions>} [options]
   * @param {(any | any[])} [eventOnCancel] Dispatches event(s) on cancel button click
   * @memberof NotifyService
   */
  error(message: string, options?: Partial<NotifyOptions>, eventOnCancel?: any | any[]) {
    this.showToast(message, 'error', options, eventOnCancel);
  }

  unknownError() {
    this.showToast('Ein Fehler ist aufgetreten. Bitte versuche es erneut.', 'error');
  }

  /**
   *
   *
   * @private
   * @param {string} message
   * @param {NotifyType} type
   * @param {Partial<NotifyOptions>} [options]
   * @param {(any | any[])} [eventOnCancel] Dispatches event(s) on cancel button click
   * @memberof NotifyService
   */
  private async showToast(message: string, type: NotifyType, options?: Partial<NotifyOptions>, eventOnCancel?: any | any[]) {
    const toastOptions: Partial<NotifyOptions> = {
      message: message,
      cssClass: `toast-${type}`,
      duration: options && options.showCloseButton ? 0 : message.length < 80 ? NotifyService.SHORT_DURATION : NotifyService.LONG_DURATION,
      ...options
    };
    console.log(toastOptions);

    const toast = await this.toastCtrl.create(toastOptions);
    toast.present();

    const { role } = await toast.onDidDismiss();

    if (role === 'cancel' && eventOnCancel) {
      this.store.dispatch(eventOnCancel);
    }
  }

}
