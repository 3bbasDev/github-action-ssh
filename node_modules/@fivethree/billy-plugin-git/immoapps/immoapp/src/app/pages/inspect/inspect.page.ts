import { InspectionsState } from '@store/inspections/inspections.state';
import { FivStep, FivStepper } from '@fivethree/core';
import { Component, OnInit, ViewChildren, QueryList, ViewChild, ChangeDetectorRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable, Subscription } from 'rxjs';
import { Inspection, GetContextResult } from 'shared';
import { tap } from 'rxjs/operators';
import { AlertController } from '@ionic/angular';
import { InspectKriteriumComponent } from '../../components/inspect-kriterium/inspect-kriterium.component';
import { Store, Select } from '@ngxs/store';
import { NavigateBackward } from '@fivethree/ngxs-ionic-router-plugin';
import { NotifySuccess } from '@store/notify/notify.actions';
import { Dispatch } from '@ngxs-labs/dispatch-decorator';
import { GetContext } from '@store/context/context.actions';
import { ContextState } from '@store/context/context.state';
import { GetInspections, GetClosedInspections } from '@store/inspections/inspections.actions';

@Component({
  selector: 'app-inspect',
  templateUrl: './inspect.page.html',
  styleUrls: ['./inspect.page.scss'],
})
export class InspectPage implements OnInit {

  @Select(ContextState.context)
  context: Observable<GetContextResult>;

  inspectionId: number;
  inspection: Observable<Inspection>;

  @ViewChild(FivStepper) stepper: FivStepper;
  @ViewChildren(FivStep) steps: QueryList<FivStep>;
  @ViewChildren(InspectKriteriumComponent) krits: QueryList<InspectKriteriumComponent>;
  statusSub: Subscription;
  checkedStatus = false;

  constructor(private store: Store,
    private route: ActivatedRoute,
    private change: ChangeDetectorRef,
    private alertController: AlertController) { }

  ngOnInit() {

  }

  ionViewWillEnter() {
    this.loadContext();
    this.inspectionId = +this.route.snapshot.paramMap.get('id');
    this.inspection = this.store.select(InspectionsState.getInspection(this.inspectionId));
  }

  ionViewDidEnter() {
    this.statusSub = this.inspection
      .pipe(
        tap(inspection => this.onInspectionChange(inspection))
      )
      .subscribe();
  }

  ionViewDidLeave() {
    if (this.statusSub) {
      this.statusSub.unsubscribe();
    }
  }

  checkStatus(inspection: Inspection) {
    if (!inspection) { return; }
    this.change.detectChanges();

    inspection.results
      .forEach(result => {
        const krit = this.krits.find(kr => kr.kriterium.id == result.pruefkriterium.id);
        if (!!krit) {
          krit.done = result.result;
          const i = this.krits.toArray().findIndex(k => k.kriterium.id == result.pruefkriterium.id);
          this.stepper.steps.forEach(step => step.step.timingFunction = '0ms');
          console.log('complete step', i);
          this.stepper.completeStep(i);
          this.stepper.close(i);
        }
      });
    this.checkedStatus = true;
  }

  goToInspections(inspection: Inspection) {
    if (inspection.done) {
      this.goBack();
    } else {
      this.presentAlertConfirm();
    }
  }

  async presentAlertConfirm() {
    const alert = await this.alertController.create({
      header: 'Seite verlassen?',
      message: 'Die Inspektion ist noch nicht vollständig. Sie können die Seite verlassen und die Inspektion später fertigstellen.',
      buttons: [
        {
          text: 'Auf der Seite bleiben',
          role: 'cancel',
          cssClass: 'secondary',
          handler: () => {

          }
        }, {
          text: 'Verlassen',
          handler: () => {
            this.goBack();
          }
        }
      ]
    });

    await alert.present();
  }

  goBack() {
    this.store.dispatch(new NavigateBackward('/tabs/tab2'));
  }

  onInspectionChange(inspection: Inspection) {
    console.log('inspection change', inspection);
    if (!inspection) { return; }

    this.checkStatus(inspection);
    if (inspection.done) {
      this.store.dispatch(new NotifySuccess('Die Begehung wurde erfolgreich abgeschlossen'));
      this.loadInspections();
      this.loadClosedInspections();
      this.goBack();
    }
  }

  @Dispatch()
  loadContext = () => new GetContext()

  @Dispatch()
  loadInspections = () => new GetInspections()

  @Dispatch()
  loadClosedInspections = () => new GetClosedInspections()
}
